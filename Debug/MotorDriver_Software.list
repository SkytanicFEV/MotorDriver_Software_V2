
MotorDriver_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004c90  08004c90  00014c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004c94  08004c94  00014c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08004c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000075c  20000004  08004c9c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000760  08004c9c  00020760  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001f621  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000036d3  00000000  00000000  0003f64d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000802f  00000000  00000000  00042d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ad0  00000000  00000000  0004ad50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001048  00000000  00000000  0004b820  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000071be  00000000  00000000  0004c868  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003e9f  00000000  00000000  00053a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000578c5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002344  00000000  00000000  00057944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b88 	.word	0x08004b88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08004b88 	.word	0x08004b88

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 faf9 	bl	800183c <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fa53 	bl	8001700 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 faeb 	bl	800183c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fae1 	bl	800183c <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fa73 	bl	8001774 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fa69 	bl	8001774 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	1c08      	adds	r0, r1, #0
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 f899 	bl	80003f0 <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 f82b 	bl	8000324 <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f88b 	bl	80003f0 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f881 	bl	80003f0 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f837 	bl	8000370 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 f82d 	bl	8000370 <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__eqsf2>:
 8000324:	b570      	push	{r4, r5, r6, lr}
 8000326:	0042      	lsls	r2, r0, #1
 8000328:	0245      	lsls	r5, r0, #9
 800032a:	024e      	lsls	r6, r1, #9
 800032c:	004c      	lsls	r4, r1, #1
 800032e:	0fc3      	lsrs	r3, r0, #31
 8000330:	0a6d      	lsrs	r5, r5, #9
 8000332:	0e12      	lsrs	r2, r2, #24
 8000334:	0a76      	lsrs	r6, r6, #9
 8000336:	0e24      	lsrs	r4, r4, #24
 8000338:	0fc9      	lsrs	r1, r1, #31
 800033a:	2001      	movs	r0, #1
 800033c:	2aff      	cmp	r2, #255	; 0xff
 800033e:	d006      	beq.n	800034e <__eqsf2+0x2a>
 8000340:	2cff      	cmp	r4, #255	; 0xff
 8000342:	d003      	beq.n	800034c <__eqsf2+0x28>
 8000344:	42a2      	cmp	r2, r4
 8000346:	d101      	bne.n	800034c <__eqsf2+0x28>
 8000348:	42b5      	cmp	r5, r6
 800034a:	d006      	beq.n	800035a <__eqsf2+0x36>
 800034c:	bd70      	pop	{r4, r5, r6, pc}
 800034e:	2d00      	cmp	r5, #0
 8000350:	d1fc      	bne.n	800034c <__eqsf2+0x28>
 8000352:	2cff      	cmp	r4, #255	; 0xff
 8000354:	d1fa      	bne.n	800034c <__eqsf2+0x28>
 8000356:	2e00      	cmp	r6, #0
 8000358:	d1f8      	bne.n	800034c <__eqsf2+0x28>
 800035a:	428b      	cmp	r3, r1
 800035c:	d006      	beq.n	800036c <__eqsf2+0x48>
 800035e:	2001      	movs	r0, #1
 8000360:	2a00      	cmp	r2, #0
 8000362:	d1f3      	bne.n	800034c <__eqsf2+0x28>
 8000364:	0028      	movs	r0, r5
 8000366:	1e45      	subs	r5, r0, #1
 8000368:	41a8      	sbcs	r0, r5
 800036a:	e7ef      	b.n	800034c <__eqsf2+0x28>
 800036c:	2000      	movs	r0, #0
 800036e:	e7ed      	b.n	800034c <__eqsf2+0x28>

08000370 <__gesf2>:
 8000370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000372:	0042      	lsls	r2, r0, #1
 8000374:	0245      	lsls	r5, r0, #9
 8000376:	024c      	lsls	r4, r1, #9
 8000378:	0fc3      	lsrs	r3, r0, #31
 800037a:	0048      	lsls	r0, r1, #1
 800037c:	0a6d      	lsrs	r5, r5, #9
 800037e:	0e12      	lsrs	r2, r2, #24
 8000380:	0a64      	lsrs	r4, r4, #9
 8000382:	0e00      	lsrs	r0, r0, #24
 8000384:	0fc9      	lsrs	r1, r1, #31
 8000386:	2aff      	cmp	r2, #255	; 0xff
 8000388:	d01e      	beq.n	80003c8 <__gesf2+0x58>
 800038a:	28ff      	cmp	r0, #255	; 0xff
 800038c:	d021      	beq.n	80003d2 <__gesf2+0x62>
 800038e:	2a00      	cmp	r2, #0
 8000390:	d10a      	bne.n	80003a8 <__gesf2+0x38>
 8000392:	426e      	negs	r6, r5
 8000394:	416e      	adcs	r6, r5
 8000396:	b2f6      	uxtb	r6, r6
 8000398:	2800      	cmp	r0, #0
 800039a:	d10f      	bne.n	80003bc <__gesf2+0x4c>
 800039c:	2c00      	cmp	r4, #0
 800039e:	d10d      	bne.n	80003bc <__gesf2+0x4c>
 80003a0:	2000      	movs	r0, #0
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d009      	beq.n	80003ba <__gesf2+0x4a>
 80003a6:	e005      	b.n	80003b4 <__gesf2+0x44>
 80003a8:	2800      	cmp	r0, #0
 80003aa:	d101      	bne.n	80003b0 <__gesf2+0x40>
 80003ac:	2c00      	cmp	r4, #0
 80003ae:	d001      	beq.n	80003b4 <__gesf2+0x44>
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d011      	beq.n	80003d8 <__gesf2+0x68>
 80003b4:	2101      	movs	r1, #1
 80003b6:	4258      	negs	r0, r3
 80003b8:	4308      	orrs	r0, r1
 80003ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003bc:	2e00      	cmp	r6, #0
 80003be:	d0f7      	beq.n	80003b0 <__gesf2+0x40>
 80003c0:	2001      	movs	r0, #1
 80003c2:	3901      	subs	r1, #1
 80003c4:	4308      	orrs	r0, r1
 80003c6:	e7f8      	b.n	80003ba <__gesf2+0x4a>
 80003c8:	2d00      	cmp	r5, #0
 80003ca:	d0de      	beq.n	800038a <__gesf2+0x1a>
 80003cc:	2002      	movs	r0, #2
 80003ce:	4240      	negs	r0, r0
 80003d0:	e7f3      	b.n	80003ba <__gesf2+0x4a>
 80003d2:	2c00      	cmp	r4, #0
 80003d4:	d0db      	beq.n	800038e <__gesf2+0x1e>
 80003d6:	e7f9      	b.n	80003cc <__gesf2+0x5c>
 80003d8:	4282      	cmp	r2, r0
 80003da:	dceb      	bgt.n	80003b4 <__gesf2+0x44>
 80003dc:	db04      	blt.n	80003e8 <__gesf2+0x78>
 80003de:	42a5      	cmp	r5, r4
 80003e0:	d8e8      	bhi.n	80003b4 <__gesf2+0x44>
 80003e2:	2000      	movs	r0, #0
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	d2e8      	bcs.n	80003ba <__gesf2+0x4a>
 80003e8:	2101      	movs	r1, #1
 80003ea:	1e58      	subs	r0, r3, #1
 80003ec:	4308      	orrs	r0, r1
 80003ee:	e7e4      	b.n	80003ba <__gesf2+0x4a>

080003f0 <__lesf2>:
 80003f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f2:	0042      	lsls	r2, r0, #1
 80003f4:	024d      	lsls	r5, r1, #9
 80003f6:	004c      	lsls	r4, r1, #1
 80003f8:	0246      	lsls	r6, r0, #9
 80003fa:	0a76      	lsrs	r6, r6, #9
 80003fc:	0e12      	lsrs	r2, r2, #24
 80003fe:	0fc3      	lsrs	r3, r0, #31
 8000400:	0a6d      	lsrs	r5, r5, #9
 8000402:	0e24      	lsrs	r4, r4, #24
 8000404:	0fc9      	lsrs	r1, r1, #31
 8000406:	2aff      	cmp	r2, #255	; 0xff
 8000408:	d016      	beq.n	8000438 <__lesf2+0x48>
 800040a:	2cff      	cmp	r4, #255	; 0xff
 800040c:	d018      	beq.n	8000440 <__lesf2+0x50>
 800040e:	2a00      	cmp	r2, #0
 8000410:	d10a      	bne.n	8000428 <__lesf2+0x38>
 8000412:	4270      	negs	r0, r6
 8000414:	4170      	adcs	r0, r6
 8000416:	b2c0      	uxtb	r0, r0
 8000418:	2c00      	cmp	r4, #0
 800041a:	d015      	beq.n	8000448 <__lesf2+0x58>
 800041c:	2800      	cmp	r0, #0
 800041e:	d005      	beq.n	800042c <__lesf2+0x3c>
 8000420:	2001      	movs	r0, #1
 8000422:	3901      	subs	r1, #1
 8000424:	4308      	orrs	r0, r1
 8000426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000428:	2c00      	cmp	r4, #0
 800042a:	d013      	beq.n	8000454 <__lesf2+0x64>
 800042c:	4299      	cmp	r1, r3
 800042e:	d014      	beq.n	800045a <__lesf2+0x6a>
 8000430:	2001      	movs	r0, #1
 8000432:	425b      	negs	r3, r3
 8000434:	4318      	orrs	r0, r3
 8000436:	e7f6      	b.n	8000426 <__lesf2+0x36>
 8000438:	2002      	movs	r0, #2
 800043a:	2e00      	cmp	r6, #0
 800043c:	d1f3      	bne.n	8000426 <__lesf2+0x36>
 800043e:	e7e4      	b.n	800040a <__lesf2+0x1a>
 8000440:	2002      	movs	r0, #2
 8000442:	2d00      	cmp	r5, #0
 8000444:	d1ef      	bne.n	8000426 <__lesf2+0x36>
 8000446:	e7e2      	b.n	800040e <__lesf2+0x1e>
 8000448:	2d00      	cmp	r5, #0
 800044a:	d1e7      	bne.n	800041c <__lesf2+0x2c>
 800044c:	2000      	movs	r0, #0
 800044e:	2e00      	cmp	r6, #0
 8000450:	d0e9      	beq.n	8000426 <__lesf2+0x36>
 8000452:	e7ed      	b.n	8000430 <__lesf2+0x40>
 8000454:	2d00      	cmp	r5, #0
 8000456:	d1e9      	bne.n	800042c <__lesf2+0x3c>
 8000458:	e7ea      	b.n	8000430 <__lesf2+0x40>
 800045a:	42a2      	cmp	r2, r4
 800045c:	dc06      	bgt.n	800046c <__lesf2+0x7c>
 800045e:	dbdf      	blt.n	8000420 <__lesf2+0x30>
 8000460:	42ae      	cmp	r6, r5
 8000462:	d803      	bhi.n	800046c <__lesf2+0x7c>
 8000464:	2000      	movs	r0, #0
 8000466:	42ae      	cmp	r6, r5
 8000468:	d3da      	bcc.n	8000420 <__lesf2+0x30>
 800046a:	e7dc      	b.n	8000426 <__lesf2+0x36>
 800046c:	2001      	movs	r0, #1
 800046e:	4249      	negs	r1, r1
 8000470:	4308      	orrs	r0, r1
 8000472:	e7d8      	b.n	8000426 <__lesf2+0x36>

08000474 <__aeabi_fmul>:
 8000474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000476:	4657      	mov	r7, sl
 8000478:	464e      	mov	r6, r9
 800047a:	4645      	mov	r5, r8
 800047c:	46de      	mov	lr, fp
 800047e:	b5e0      	push	{r5, r6, r7, lr}
 8000480:	0247      	lsls	r7, r0, #9
 8000482:	0046      	lsls	r6, r0, #1
 8000484:	4688      	mov	r8, r1
 8000486:	0a7f      	lsrs	r7, r7, #9
 8000488:	0e36      	lsrs	r6, r6, #24
 800048a:	0fc4      	lsrs	r4, r0, #31
 800048c:	2e00      	cmp	r6, #0
 800048e:	d047      	beq.n	8000520 <__aeabi_fmul+0xac>
 8000490:	2eff      	cmp	r6, #255	; 0xff
 8000492:	d024      	beq.n	80004de <__aeabi_fmul+0x6a>
 8000494:	00fb      	lsls	r3, r7, #3
 8000496:	2780      	movs	r7, #128	; 0x80
 8000498:	04ff      	lsls	r7, r7, #19
 800049a:	431f      	orrs	r7, r3
 800049c:	2300      	movs	r3, #0
 800049e:	4699      	mov	r9, r3
 80004a0:	469a      	mov	sl, r3
 80004a2:	3e7f      	subs	r6, #127	; 0x7f
 80004a4:	4643      	mov	r3, r8
 80004a6:	025d      	lsls	r5, r3, #9
 80004a8:	0058      	lsls	r0, r3, #1
 80004aa:	0fdb      	lsrs	r3, r3, #31
 80004ac:	0a6d      	lsrs	r5, r5, #9
 80004ae:	0e00      	lsrs	r0, r0, #24
 80004b0:	4698      	mov	r8, r3
 80004b2:	d043      	beq.n	800053c <__aeabi_fmul+0xc8>
 80004b4:	28ff      	cmp	r0, #255	; 0xff
 80004b6:	d03b      	beq.n	8000530 <__aeabi_fmul+0xbc>
 80004b8:	00eb      	lsls	r3, r5, #3
 80004ba:	2580      	movs	r5, #128	; 0x80
 80004bc:	2200      	movs	r2, #0
 80004be:	04ed      	lsls	r5, r5, #19
 80004c0:	431d      	orrs	r5, r3
 80004c2:	387f      	subs	r0, #127	; 0x7f
 80004c4:	1836      	adds	r6, r6, r0
 80004c6:	1c73      	adds	r3, r6, #1
 80004c8:	4641      	mov	r1, r8
 80004ca:	469b      	mov	fp, r3
 80004cc:	464b      	mov	r3, r9
 80004ce:	4061      	eors	r1, r4
 80004d0:	4313      	orrs	r3, r2
 80004d2:	2b0f      	cmp	r3, #15
 80004d4:	d864      	bhi.n	80005a0 <__aeabi_fmul+0x12c>
 80004d6:	4875      	ldr	r0, [pc, #468]	; (80006ac <__aeabi_fmul+0x238>)
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	58c3      	ldr	r3, [r0, r3]
 80004dc:	469f      	mov	pc, r3
 80004de:	2f00      	cmp	r7, #0
 80004e0:	d142      	bne.n	8000568 <__aeabi_fmul+0xf4>
 80004e2:	2308      	movs	r3, #8
 80004e4:	4699      	mov	r9, r3
 80004e6:	3b06      	subs	r3, #6
 80004e8:	26ff      	movs	r6, #255	; 0xff
 80004ea:	469a      	mov	sl, r3
 80004ec:	e7da      	b.n	80004a4 <__aeabi_fmul+0x30>
 80004ee:	4641      	mov	r1, r8
 80004f0:	2a02      	cmp	r2, #2
 80004f2:	d028      	beq.n	8000546 <__aeabi_fmul+0xd2>
 80004f4:	2a03      	cmp	r2, #3
 80004f6:	d100      	bne.n	80004fa <__aeabi_fmul+0x86>
 80004f8:	e0ce      	b.n	8000698 <__aeabi_fmul+0x224>
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	d000      	beq.n	8000500 <__aeabi_fmul+0x8c>
 80004fe:	e0ac      	b.n	800065a <__aeabi_fmul+0x1e6>
 8000500:	4011      	ands	r1, r2
 8000502:	2000      	movs	r0, #0
 8000504:	2200      	movs	r2, #0
 8000506:	b2cc      	uxtb	r4, r1
 8000508:	0240      	lsls	r0, r0, #9
 800050a:	05d2      	lsls	r2, r2, #23
 800050c:	0a40      	lsrs	r0, r0, #9
 800050e:	07e4      	lsls	r4, r4, #31
 8000510:	4310      	orrs	r0, r2
 8000512:	4320      	orrs	r0, r4
 8000514:	bc3c      	pop	{r2, r3, r4, r5}
 8000516:	4690      	mov	r8, r2
 8000518:	4699      	mov	r9, r3
 800051a:	46a2      	mov	sl, r4
 800051c:	46ab      	mov	fp, r5
 800051e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000520:	2f00      	cmp	r7, #0
 8000522:	d115      	bne.n	8000550 <__aeabi_fmul+0xdc>
 8000524:	2304      	movs	r3, #4
 8000526:	4699      	mov	r9, r3
 8000528:	3b03      	subs	r3, #3
 800052a:	2600      	movs	r6, #0
 800052c:	469a      	mov	sl, r3
 800052e:	e7b9      	b.n	80004a4 <__aeabi_fmul+0x30>
 8000530:	20ff      	movs	r0, #255	; 0xff
 8000532:	2202      	movs	r2, #2
 8000534:	2d00      	cmp	r5, #0
 8000536:	d0c5      	beq.n	80004c4 <__aeabi_fmul+0x50>
 8000538:	2203      	movs	r2, #3
 800053a:	e7c3      	b.n	80004c4 <__aeabi_fmul+0x50>
 800053c:	2d00      	cmp	r5, #0
 800053e:	d119      	bne.n	8000574 <__aeabi_fmul+0x100>
 8000540:	2000      	movs	r0, #0
 8000542:	2201      	movs	r2, #1
 8000544:	e7be      	b.n	80004c4 <__aeabi_fmul+0x50>
 8000546:	2401      	movs	r4, #1
 8000548:	22ff      	movs	r2, #255	; 0xff
 800054a:	400c      	ands	r4, r1
 800054c:	2000      	movs	r0, #0
 800054e:	e7db      	b.n	8000508 <__aeabi_fmul+0x94>
 8000550:	0038      	movs	r0, r7
 8000552:	f002 f847 	bl	80025e4 <__clzsi2>
 8000556:	2676      	movs	r6, #118	; 0x76
 8000558:	1f43      	subs	r3, r0, #5
 800055a:	409f      	lsls	r7, r3
 800055c:	2300      	movs	r3, #0
 800055e:	4276      	negs	r6, r6
 8000560:	1a36      	subs	r6, r6, r0
 8000562:	4699      	mov	r9, r3
 8000564:	469a      	mov	sl, r3
 8000566:	e79d      	b.n	80004a4 <__aeabi_fmul+0x30>
 8000568:	230c      	movs	r3, #12
 800056a:	4699      	mov	r9, r3
 800056c:	3b09      	subs	r3, #9
 800056e:	26ff      	movs	r6, #255	; 0xff
 8000570:	469a      	mov	sl, r3
 8000572:	e797      	b.n	80004a4 <__aeabi_fmul+0x30>
 8000574:	0028      	movs	r0, r5
 8000576:	f002 f835 	bl	80025e4 <__clzsi2>
 800057a:	1f43      	subs	r3, r0, #5
 800057c:	409d      	lsls	r5, r3
 800057e:	2376      	movs	r3, #118	; 0x76
 8000580:	425b      	negs	r3, r3
 8000582:	1a18      	subs	r0, r3, r0
 8000584:	2200      	movs	r2, #0
 8000586:	e79d      	b.n	80004c4 <__aeabi_fmul+0x50>
 8000588:	2080      	movs	r0, #128	; 0x80
 800058a:	2400      	movs	r4, #0
 800058c:	03c0      	lsls	r0, r0, #15
 800058e:	22ff      	movs	r2, #255	; 0xff
 8000590:	e7ba      	b.n	8000508 <__aeabi_fmul+0x94>
 8000592:	003d      	movs	r5, r7
 8000594:	4652      	mov	r2, sl
 8000596:	e7ab      	b.n	80004f0 <__aeabi_fmul+0x7c>
 8000598:	003d      	movs	r5, r7
 800059a:	0021      	movs	r1, r4
 800059c:	4652      	mov	r2, sl
 800059e:	e7a7      	b.n	80004f0 <__aeabi_fmul+0x7c>
 80005a0:	0c3b      	lsrs	r3, r7, #16
 80005a2:	469c      	mov	ip, r3
 80005a4:	042a      	lsls	r2, r5, #16
 80005a6:	0c12      	lsrs	r2, r2, #16
 80005a8:	0c2b      	lsrs	r3, r5, #16
 80005aa:	0014      	movs	r4, r2
 80005ac:	4660      	mov	r0, ip
 80005ae:	4665      	mov	r5, ip
 80005b0:	043f      	lsls	r7, r7, #16
 80005b2:	0c3f      	lsrs	r7, r7, #16
 80005b4:	437c      	muls	r4, r7
 80005b6:	4342      	muls	r2, r0
 80005b8:	435d      	muls	r5, r3
 80005ba:	437b      	muls	r3, r7
 80005bc:	0c27      	lsrs	r7, r4, #16
 80005be:	189b      	adds	r3, r3, r2
 80005c0:	18ff      	adds	r7, r7, r3
 80005c2:	42ba      	cmp	r2, r7
 80005c4:	d903      	bls.n	80005ce <__aeabi_fmul+0x15a>
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	025b      	lsls	r3, r3, #9
 80005ca:	469c      	mov	ip, r3
 80005cc:	4465      	add	r5, ip
 80005ce:	0424      	lsls	r4, r4, #16
 80005d0:	043a      	lsls	r2, r7, #16
 80005d2:	0c24      	lsrs	r4, r4, #16
 80005d4:	1912      	adds	r2, r2, r4
 80005d6:	0193      	lsls	r3, r2, #6
 80005d8:	1e5c      	subs	r4, r3, #1
 80005da:	41a3      	sbcs	r3, r4
 80005dc:	0c3f      	lsrs	r7, r7, #16
 80005de:	0e92      	lsrs	r2, r2, #26
 80005e0:	197d      	adds	r5, r7, r5
 80005e2:	431a      	orrs	r2, r3
 80005e4:	01ad      	lsls	r5, r5, #6
 80005e6:	4315      	orrs	r5, r2
 80005e8:	012b      	lsls	r3, r5, #4
 80005ea:	d504      	bpl.n	80005f6 <__aeabi_fmul+0x182>
 80005ec:	2301      	movs	r3, #1
 80005ee:	465e      	mov	r6, fp
 80005f0:	086a      	lsrs	r2, r5, #1
 80005f2:	401d      	ands	r5, r3
 80005f4:	4315      	orrs	r5, r2
 80005f6:	0032      	movs	r2, r6
 80005f8:	327f      	adds	r2, #127	; 0x7f
 80005fa:	2a00      	cmp	r2, #0
 80005fc:	dd25      	ble.n	800064a <__aeabi_fmul+0x1d6>
 80005fe:	076b      	lsls	r3, r5, #29
 8000600:	d004      	beq.n	800060c <__aeabi_fmul+0x198>
 8000602:	230f      	movs	r3, #15
 8000604:	402b      	ands	r3, r5
 8000606:	2b04      	cmp	r3, #4
 8000608:	d000      	beq.n	800060c <__aeabi_fmul+0x198>
 800060a:	3504      	adds	r5, #4
 800060c:	012b      	lsls	r3, r5, #4
 800060e:	d503      	bpl.n	8000618 <__aeabi_fmul+0x1a4>
 8000610:	0032      	movs	r2, r6
 8000612:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <__aeabi_fmul+0x23c>)
 8000614:	3280      	adds	r2, #128	; 0x80
 8000616:	401d      	ands	r5, r3
 8000618:	2afe      	cmp	r2, #254	; 0xfe
 800061a:	dc94      	bgt.n	8000546 <__aeabi_fmul+0xd2>
 800061c:	2401      	movs	r4, #1
 800061e:	01a8      	lsls	r0, r5, #6
 8000620:	0a40      	lsrs	r0, r0, #9
 8000622:	b2d2      	uxtb	r2, r2
 8000624:	400c      	ands	r4, r1
 8000626:	e76f      	b.n	8000508 <__aeabi_fmul+0x94>
 8000628:	2080      	movs	r0, #128	; 0x80
 800062a:	03c0      	lsls	r0, r0, #15
 800062c:	4207      	tst	r7, r0
 800062e:	d007      	beq.n	8000640 <__aeabi_fmul+0x1cc>
 8000630:	4205      	tst	r5, r0
 8000632:	d105      	bne.n	8000640 <__aeabi_fmul+0x1cc>
 8000634:	4328      	orrs	r0, r5
 8000636:	0240      	lsls	r0, r0, #9
 8000638:	0a40      	lsrs	r0, r0, #9
 800063a:	4644      	mov	r4, r8
 800063c:	22ff      	movs	r2, #255	; 0xff
 800063e:	e763      	b.n	8000508 <__aeabi_fmul+0x94>
 8000640:	4338      	orrs	r0, r7
 8000642:	0240      	lsls	r0, r0, #9
 8000644:	0a40      	lsrs	r0, r0, #9
 8000646:	22ff      	movs	r2, #255	; 0xff
 8000648:	e75e      	b.n	8000508 <__aeabi_fmul+0x94>
 800064a:	2401      	movs	r4, #1
 800064c:	1aa3      	subs	r3, r4, r2
 800064e:	2b1b      	cmp	r3, #27
 8000650:	dd05      	ble.n	800065e <__aeabi_fmul+0x1ea>
 8000652:	400c      	ands	r4, r1
 8000654:	2200      	movs	r2, #0
 8000656:	2000      	movs	r0, #0
 8000658:	e756      	b.n	8000508 <__aeabi_fmul+0x94>
 800065a:	465e      	mov	r6, fp
 800065c:	e7cb      	b.n	80005f6 <__aeabi_fmul+0x182>
 800065e:	002a      	movs	r2, r5
 8000660:	2020      	movs	r0, #32
 8000662:	40da      	lsrs	r2, r3
 8000664:	1ac3      	subs	r3, r0, r3
 8000666:	409d      	lsls	r5, r3
 8000668:	002b      	movs	r3, r5
 800066a:	1e5d      	subs	r5, r3, #1
 800066c:	41ab      	sbcs	r3, r5
 800066e:	4313      	orrs	r3, r2
 8000670:	075a      	lsls	r2, r3, #29
 8000672:	d004      	beq.n	800067e <__aeabi_fmul+0x20a>
 8000674:	220f      	movs	r2, #15
 8000676:	401a      	ands	r2, r3
 8000678:	2a04      	cmp	r2, #4
 800067a:	d000      	beq.n	800067e <__aeabi_fmul+0x20a>
 800067c:	3304      	adds	r3, #4
 800067e:	015a      	lsls	r2, r3, #5
 8000680:	d504      	bpl.n	800068c <__aeabi_fmul+0x218>
 8000682:	2401      	movs	r4, #1
 8000684:	2201      	movs	r2, #1
 8000686:	400c      	ands	r4, r1
 8000688:	2000      	movs	r0, #0
 800068a:	e73d      	b.n	8000508 <__aeabi_fmul+0x94>
 800068c:	2401      	movs	r4, #1
 800068e:	019b      	lsls	r3, r3, #6
 8000690:	0a58      	lsrs	r0, r3, #9
 8000692:	400c      	ands	r4, r1
 8000694:	2200      	movs	r2, #0
 8000696:	e737      	b.n	8000508 <__aeabi_fmul+0x94>
 8000698:	2080      	movs	r0, #128	; 0x80
 800069a:	2401      	movs	r4, #1
 800069c:	03c0      	lsls	r0, r0, #15
 800069e:	4328      	orrs	r0, r5
 80006a0:	0240      	lsls	r0, r0, #9
 80006a2:	0a40      	lsrs	r0, r0, #9
 80006a4:	400c      	ands	r4, r1
 80006a6:	22ff      	movs	r2, #255	; 0xff
 80006a8:	e72e      	b.n	8000508 <__aeabi_fmul+0x94>
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	08004bc0 	.word	0x08004bc0
 80006b0:	f7ffffff 	.word	0xf7ffffff

080006b4 <__aeabi_fsub>:
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	464f      	mov	r7, r9
 80006b8:	46d6      	mov	lr, sl
 80006ba:	4646      	mov	r6, r8
 80006bc:	0044      	lsls	r4, r0, #1
 80006be:	b5c0      	push	{r6, r7, lr}
 80006c0:	0fc2      	lsrs	r2, r0, #31
 80006c2:	0247      	lsls	r7, r0, #9
 80006c4:	0248      	lsls	r0, r1, #9
 80006c6:	0a40      	lsrs	r0, r0, #9
 80006c8:	4684      	mov	ip, r0
 80006ca:	4666      	mov	r6, ip
 80006cc:	0a7b      	lsrs	r3, r7, #9
 80006ce:	0048      	lsls	r0, r1, #1
 80006d0:	0fc9      	lsrs	r1, r1, #31
 80006d2:	469a      	mov	sl, r3
 80006d4:	0e24      	lsrs	r4, r4, #24
 80006d6:	0015      	movs	r5, r2
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	0e00      	lsrs	r0, r0, #24
 80006dc:	4689      	mov	r9, r1
 80006de:	00f6      	lsls	r6, r6, #3
 80006e0:	28ff      	cmp	r0, #255	; 0xff
 80006e2:	d100      	bne.n	80006e6 <__aeabi_fsub+0x32>
 80006e4:	e08f      	b.n	8000806 <__aeabi_fsub+0x152>
 80006e6:	2101      	movs	r1, #1
 80006e8:	464f      	mov	r7, r9
 80006ea:	404f      	eors	r7, r1
 80006ec:	0039      	movs	r1, r7
 80006ee:	4291      	cmp	r1, r2
 80006f0:	d066      	beq.n	80007c0 <__aeabi_fsub+0x10c>
 80006f2:	1a22      	subs	r2, r4, r0
 80006f4:	2a00      	cmp	r2, #0
 80006f6:	dc00      	bgt.n	80006fa <__aeabi_fsub+0x46>
 80006f8:	e09d      	b.n	8000836 <__aeabi_fsub+0x182>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d13d      	bne.n	800077a <__aeabi_fsub+0xc6>
 80006fe:	2e00      	cmp	r6, #0
 8000700:	d100      	bne.n	8000704 <__aeabi_fsub+0x50>
 8000702:	e08b      	b.n	800081c <__aeabi_fsub+0x168>
 8000704:	1e51      	subs	r1, r2, #1
 8000706:	2900      	cmp	r1, #0
 8000708:	d000      	beq.n	800070c <__aeabi_fsub+0x58>
 800070a:	e0b5      	b.n	8000878 <__aeabi_fsub+0x1c4>
 800070c:	2401      	movs	r4, #1
 800070e:	1b9b      	subs	r3, r3, r6
 8000710:	015a      	lsls	r2, r3, #5
 8000712:	d544      	bpl.n	800079e <__aeabi_fsub+0xea>
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	099f      	lsrs	r7, r3, #6
 8000718:	0038      	movs	r0, r7
 800071a:	f001 ff63 	bl	80025e4 <__clzsi2>
 800071e:	3805      	subs	r0, #5
 8000720:	4087      	lsls	r7, r0
 8000722:	4284      	cmp	r4, r0
 8000724:	dd00      	ble.n	8000728 <__aeabi_fsub+0x74>
 8000726:	e096      	b.n	8000856 <__aeabi_fsub+0x1a2>
 8000728:	1b04      	subs	r4, r0, r4
 800072a:	003a      	movs	r2, r7
 800072c:	2020      	movs	r0, #32
 800072e:	3401      	adds	r4, #1
 8000730:	40e2      	lsrs	r2, r4
 8000732:	1b04      	subs	r4, r0, r4
 8000734:	40a7      	lsls	r7, r4
 8000736:	003b      	movs	r3, r7
 8000738:	1e5f      	subs	r7, r3, #1
 800073a:	41bb      	sbcs	r3, r7
 800073c:	2400      	movs	r4, #0
 800073e:	4313      	orrs	r3, r2
 8000740:	075a      	lsls	r2, r3, #29
 8000742:	d004      	beq.n	800074e <__aeabi_fsub+0x9a>
 8000744:	220f      	movs	r2, #15
 8000746:	401a      	ands	r2, r3
 8000748:	2a04      	cmp	r2, #4
 800074a:	d000      	beq.n	800074e <__aeabi_fsub+0x9a>
 800074c:	3304      	adds	r3, #4
 800074e:	015a      	lsls	r2, r3, #5
 8000750:	d527      	bpl.n	80007a2 <__aeabi_fsub+0xee>
 8000752:	3401      	adds	r4, #1
 8000754:	2cff      	cmp	r4, #255	; 0xff
 8000756:	d100      	bne.n	800075a <__aeabi_fsub+0xa6>
 8000758:	e079      	b.n	800084e <__aeabi_fsub+0x19a>
 800075a:	2201      	movs	r2, #1
 800075c:	019b      	lsls	r3, r3, #6
 800075e:	0a5b      	lsrs	r3, r3, #9
 8000760:	b2e4      	uxtb	r4, r4
 8000762:	402a      	ands	r2, r5
 8000764:	025b      	lsls	r3, r3, #9
 8000766:	05e4      	lsls	r4, r4, #23
 8000768:	0a58      	lsrs	r0, r3, #9
 800076a:	07d2      	lsls	r2, r2, #31
 800076c:	4320      	orrs	r0, r4
 800076e:	4310      	orrs	r0, r2
 8000770:	bc1c      	pop	{r2, r3, r4}
 8000772:	4690      	mov	r8, r2
 8000774:	4699      	mov	r9, r3
 8000776:	46a2      	mov	sl, r4
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	2cff      	cmp	r4, #255	; 0xff
 800077c:	d0e0      	beq.n	8000740 <__aeabi_fsub+0x8c>
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	04c9      	lsls	r1, r1, #19
 8000782:	430e      	orrs	r6, r1
 8000784:	2a1b      	cmp	r2, #27
 8000786:	dc7b      	bgt.n	8000880 <__aeabi_fsub+0x1cc>
 8000788:	0031      	movs	r1, r6
 800078a:	2020      	movs	r0, #32
 800078c:	40d1      	lsrs	r1, r2
 800078e:	1a82      	subs	r2, r0, r2
 8000790:	4096      	lsls	r6, r2
 8000792:	1e72      	subs	r2, r6, #1
 8000794:	4196      	sbcs	r6, r2
 8000796:	430e      	orrs	r6, r1
 8000798:	1b9b      	subs	r3, r3, r6
 800079a:	015a      	lsls	r2, r3, #5
 800079c:	d4ba      	bmi.n	8000714 <__aeabi_fsub+0x60>
 800079e:	075a      	lsls	r2, r3, #29
 80007a0:	d1d0      	bne.n	8000744 <__aeabi_fsub+0x90>
 80007a2:	2201      	movs	r2, #1
 80007a4:	08df      	lsrs	r7, r3, #3
 80007a6:	402a      	ands	r2, r5
 80007a8:	2cff      	cmp	r4, #255	; 0xff
 80007aa:	d133      	bne.n	8000814 <__aeabi_fsub+0x160>
 80007ac:	2f00      	cmp	r7, #0
 80007ae:	d100      	bne.n	80007b2 <__aeabi_fsub+0xfe>
 80007b0:	e0a8      	b.n	8000904 <__aeabi_fsub+0x250>
 80007b2:	2380      	movs	r3, #128	; 0x80
 80007b4:	03db      	lsls	r3, r3, #15
 80007b6:	433b      	orrs	r3, r7
 80007b8:	025b      	lsls	r3, r3, #9
 80007ba:	0a5b      	lsrs	r3, r3, #9
 80007bc:	24ff      	movs	r4, #255	; 0xff
 80007be:	e7d1      	b.n	8000764 <__aeabi_fsub+0xb0>
 80007c0:	1a21      	subs	r1, r4, r0
 80007c2:	2900      	cmp	r1, #0
 80007c4:	dd4c      	ble.n	8000860 <__aeabi_fsub+0x1ac>
 80007c6:	2800      	cmp	r0, #0
 80007c8:	d02a      	beq.n	8000820 <__aeabi_fsub+0x16c>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d0b8      	beq.n	8000740 <__aeabi_fsub+0x8c>
 80007ce:	2080      	movs	r0, #128	; 0x80
 80007d0:	04c0      	lsls	r0, r0, #19
 80007d2:	4306      	orrs	r6, r0
 80007d4:	291b      	cmp	r1, #27
 80007d6:	dd00      	ble.n	80007da <__aeabi_fsub+0x126>
 80007d8:	e0af      	b.n	800093a <__aeabi_fsub+0x286>
 80007da:	0030      	movs	r0, r6
 80007dc:	2720      	movs	r7, #32
 80007de:	40c8      	lsrs	r0, r1
 80007e0:	1a79      	subs	r1, r7, r1
 80007e2:	408e      	lsls	r6, r1
 80007e4:	1e71      	subs	r1, r6, #1
 80007e6:	418e      	sbcs	r6, r1
 80007e8:	4306      	orrs	r6, r0
 80007ea:	199b      	adds	r3, r3, r6
 80007ec:	0159      	lsls	r1, r3, #5
 80007ee:	d5d6      	bpl.n	800079e <__aeabi_fsub+0xea>
 80007f0:	3401      	adds	r4, #1
 80007f2:	2cff      	cmp	r4, #255	; 0xff
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fsub+0x144>
 80007f6:	e085      	b.n	8000904 <__aeabi_fsub+0x250>
 80007f8:	2201      	movs	r2, #1
 80007fa:	497a      	ldr	r1, [pc, #488]	; (80009e4 <__aeabi_fsub+0x330>)
 80007fc:	401a      	ands	r2, r3
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	400b      	ands	r3, r1
 8000802:	4313      	orrs	r3, r2
 8000804:	e79c      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d000      	beq.n	800080c <__aeabi_fsub+0x158>
 800080a:	e770      	b.n	80006ee <__aeabi_fsub+0x3a>
 800080c:	e76b      	b.n	80006e6 <__aeabi_fsub+0x32>
 800080e:	1e3b      	subs	r3, r7, #0
 8000810:	d1c5      	bne.n	800079e <__aeabi_fsub+0xea>
 8000812:	2200      	movs	r2, #0
 8000814:	027b      	lsls	r3, r7, #9
 8000816:	0a5b      	lsrs	r3, r3, #9
 8000818:	b2e4      	uxtb	r4, r4
 800081a:	e7a3      	b.n	8000764 <__aeabi_fsub+0xb0>
 800081c:	0014      	movs	r4, r2
 800081e:	e78f      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000820:	2e00      	cmp	r6, #0
 8000822:	d04d      	beq.n	80008c0 <__aeabi_fsub+0x20c>
 8000824:	1e48      	subs	r0, r1, #1
 8000826:	2800      	cmp	r0, #0
 8000828:	d157      	bne.n	80008da <__aeabi_fsub+0x226>
 800082a:	199b      	adds	r3, r3, r6
 800082c:	2401      	movs	r4, #1
 800082e:	015a      	lsls	r2, r3, #5
 8000830:	d5b5      	bpl.n	800079e <__aeabi_fsub+0xea>
 8000832:	2402      	movs	r4, #2
 8000834:	e7e0      	b.n	80007f8 <__aeabi_fsub+0x144>
 8000836:	2a00      	cmp	r2, #0
 8000838:	d125      	bne.n	8000886 <__aeabi_fsub+0x1d2>
 800083a:	1c62      	adds	r2, r4, #1
 800083c:	b2d2      	uxtb	r2, r2
 800083e:	2a01      	cmp	r2, #1
 8000840:	dd72      	ble.n	8000928 <__aeabi_fsub+0x274>
 8000842:	1b9f      	subs	r7, r3, r6
 8000844:	017a      	lsls	r2, r7, #5
 8000846:	d535      	bpl.n	80008b4 <__aeabi_fsub+0x200>
 8000848:	1af7      	subs	r7, r6, r3
 800084a:	000d      	movs	r5, r1
 800084c:	e764      	b.n	8000718 <__aeabi_fsub+0x64>
 800084e:	2201      	movs	r2, #1
 8000850:	2300      	movs	r3, #0
 8000852:	402a      	ands	r2, r5
 8000854:	e786      	b.n	8000764 <__aeabi_fsub+0xb0>
 8000856:	003b      	movs	r3, r7
 8000858:	4a63      	ldr	r2, [pc, #396]	; (80009e8 <__aeabi_fsub+0x334>)
 800085a:	1a24      	subs	r4, r4, r0
 800085c:	4013      	ands	r3, r2
 800085e:	e76f      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000860:	2900      	cmp	r1, #0
 8000862:	d16c      	bne.n	800093e <__aeabi_fsub+0x28a>
 8000864:	1c61      	adds	r1, r4, #1
 8000866:	b2c8      	uxtb	r0, r1
 8000868:	2801      	cmp	r0, #1
 800086a:	dd4e      	ble.n	800090a <__aeabi_fsub+0x256>
 800086c:	29ff      	cmp	r1, #255	; 0xff
 800086e:	d049      	beq.n	8000904 <__aeabi_fsub+0x250>
 8000870:	199b      	adds	r3, r3, r6
 8000872:	085b      	lsrs	r3, r3, #1
 8000874:	000c      	movs	r4, r1
 8000876:	e763      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000878:	2aff      	cmp	r2, #255	; 0xff
 800087a:	d041      	beq.n	8000900 <__aeabi_fsub+0x24c>
 800087c:	000a      	movs	r2, r1
 800087e:	e781      	b.n	8000784 <__aeabi_fsub+0xd0>
 8000880:	2601      	movs	r6, #1
 8000882:	1b9b      	subs	r3, r3, r6
 8000884:	e789      	b.n	800079a <__aeabi_fsub+0xe6>
 8000886:	2c00      	cmp	r4, #0
 8000888:	d01c      	beq.n	80008c4 <__aeabi_fsub+0x210>
 800088a:	28ff      	cmp	r0, #255	; 0xff
 800088c:	d021      	beq.n	80008d2 <__aeabi_fsub+0x21e>
 800088e:	2480      	movs	r4, #128	; 0x80
 8000890:	04e4      	lsls	r4, r4, #19
 8000892:	4252      	negs	r2, r2
 8000894:	4323      	orrs	r3, r4
 8000896:	2a1b      	cmp	r2, #27
 8000898:	dd00      	ble.n	800089c <__aeabi_fsub+0x1e8>
 800089a:	e096      	b.n	80009ca <__aeabi_fsub+0x316>
 800089c:	001c      	movs	r4, r3
 800089e:	2520      	movs	r5, #32
 80008a0:	40d4      	lsrs	r4, r2
 80008a2:	1aaa      	subs	r2, r5, r2
 80008a4:	4093      	lsls	r3, r2
 80008a6:	1e5a      	subs	r2, r3, #1
 80008a8:	4193      	sbcs	r3, r2
 80008aa:	4323      	orrs	r3, r4
 80008ac:	1af3      	subs	r3, r6, r3
 80008ae:	0004      	movs	r4, r0
 80008b0:	000d      	movs	r5, r1
 80008b2:	e72d      	b.n	8000710 <__aeabi_fsub+0x5c>
 80008b4:	2f00      	cmp	r7, #0
 80008b6:	d000      	beq.n	80008ba <__aeabi_fsub+0x206>
 80008b8:	e72e      	b.n	8000718 <__aeabi_fsub+0x64>
 80008ba:	2200      	movs	r2, #0
 80008bc:	2400      	movs	r4, #0
 80008be:	e7a9      	b.n	8000814 <__aeabi_fsub+0x160>
 80008c0:	000c      	movs	r4, r1
 80008c2:	e73d      	b.n	8000740 <__aeabi_fsub+0x8c>
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d058      	beq.n	800097a <__aeabi_fsub+0x2c6>
 80008c8:	43d2      	mvns	r2, r2
 80008ca:	2a00      	cmp	r2, #0
 80008cc:	d0ee      	beq.n	80008ac <__aeabi_fsub+0x1f8>
 80008ce:	28ff      	cmp	r0, #255	; 0xff
 80008d0:	d1e1      	bne.n	8000896 <__aeabi_fsub+0x1e2>
 80008d2:	0033      	movs	r3, r6
 80008d4:	24ff      	movs	r4, #255	; 0xff
 80008d6:	000d      	movs	r5, r1
 80008d8:	e732      	b.n	8000740 <__aeabi_fsub+0x8c>
 80008da:	29ff      	cmp	r1, #255	; 0xff
 80008dc:	d010      	beq.n	8000900 <__aeabi_fsub+0x24c>
 80008de:	0001      	movs	r1, r0
 80008e0:	e778      	b.n	80007d4 <__aeabi_fsub+0x120>
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d06e      	beq.n	80009c4 <__aeabi_fsub+0x310>
 80008e6:	24ff      	movs	r4, #255	; 0xff
 80008e8:	2e00      	cmp	r6, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_fsub+0x23a>
 80008ec:	e728      	b.n	8000740 <__aeabi_fsub+0x8c>
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	4651      	mov	r1, sl
 80008f2:	03d2      	lsls	r2, r2, #15
 80008f4:	4211      	tst	r1, r2
 80008f6:	d003      	beq.n	8000900 <__aeabi_fsub+0x24c>
 80008f8:	4661      	mov	r1, ip
 80008fa:	4211      	tst	r1, r2
 80008fc:	d100      	bne.n	8000900 <__aeabi_fsub+0x24c>
 80008fe:	0033      	movs	r3, r6
 8000900:	24ff      	movs	r4, #255	; 0xff
 8000902:	e71d      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000904:	24ff      	movs	r4, #255	; 0xff
 8000906:	2300      	movs	r3, #0
 8000908:	e72c      	b.n	8000764 <__aeabi_fsub+0xb0>
 800090a:	2c00      	cmp	r4, #0
 800090c:	d1e9      	bne.n	80008e2 <__aeabi_fsub+0x22e>
 800090e:	2b00      	cmp	r3, #0
 8000910:	d063      	beq.n	80009da <__aeabi_fsub+0x326>
 8000912:	2e00      	cmp	r6, #0
 8000914:	d100      	bne.n	8000918 <__aeabi_fsub+0x264>
 8000916:	e713      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000918:	199b      	adds	r3, r3, r6
 800091a:	015a      	lsls	r2, r3, #5
 800091c:	d400      	bmi.n	8000920 <__aeabi_fsub+0x26c>
 800091e:	e73e      	b.n	800079e <__aeabi_fsub+0xea>
 8000920:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <__aeabi_fsub+0x334>)
 8000922:	000c      	movs	r4, r1
 8000924:	4013      	ands	r3, r2
 8000926:	e70b      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000928:	2c00      	cmp	r4, #0
 800092a:	d11e      	bne.n	800096a <__aeabi_fsub+0x2b6>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d12f      	bne.n	8000990 <__aeabi_fsub+0x2dc>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d04f      	beq.n	80009d4 <__aeabi_fsub+0x320>
 8000934:	0033      	movs	r3, r6
 8000936:	000d      	movs	r5, r1
 8000938:	e702      	b.n	8000740 <__aeabi_fsub+0x8c>
 800093a:	2601      	movs	r6, #1
 800093c:	e755      	b.n	80007ea <__aeabi_fsub+0x136>
 800093e:	2c00      	cmp	r4, #0
 8000940:	d11f      	bne.n	8000982 <__aeabi_fsub+0x2ce>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d043      	beq.n	80009ce <__aeabi_fsub+0x31a>
 8000946:	43c9      	mvns	r1, r1
 8000948:	2900      	cmp	r1, #0
 800094a:	d00b      	beq.n	8000964 <__aeabi_fsub+0x2b0>
 800094c:	28ff      	cmp	r0, #255	; 0xff
 800094e:	d039      	beq.n	80009c4 <__aeabi_fsub+0x310>
 8000950:	291b      	cmp	r1, #27
 8000952:	dc44      	bgt.n	80009de <__aeabi_fsub+0x32a>
 8000954:	001c      	movs	r4, r3
 8000956:	2720      	movs	r7, #32
 8000958:	40cc      	lsrs	r4, r1
 800095a:	1a79      	subs	r1, r7, r1
 800095c:	408b      	lsls	r3, r1
 800095e:	1e59      	subs	r1, r3, #1
 8000960:	418b      	sbcs	r3, r1
 8000962:	4323      	orrs	r3, r4
 8000964:	199b      	adds	r3, r3, r6
 8000966:	0004      	movs	r4, r0
 8000968:	e740      	b.n	80007ec <__aeabi_fsub+0x138>
 800096a:	2b00      	cmp	r3, #0
 800096c:	d11a      	bne.n	80009a4 <__aeabi_fsub+0x2f0>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d124      	bne.n	80009bc <__aeabi_fsub+0x308>
 8000972:	2780      	movs	r7, #128	; 0x80
 8000974:	2200      	movs	r2, #0
 8000976:	03ff      	lsls	r7, r7, #15
 8000978:	e71b      	b.n	80007b2 <__aeabi_fsub+0xfe>
 800097a:	0033      	movs	r3, r6
 800097c:	0004      	movs	r4, r0
 800097e:	000d      	movs	r5, r1
 8000980:	e6de      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000982:	28ff      	cmp	r0, #255	; 0xff
 8000984:	d01e      	beq.n	80009c4 <__aeabi_fsub+0x310>
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	04e4      	lsls	r4, r4, #19
 800098a:	4249      	negs	r1, r1
 800098c:	4323      	orrs	r3, r4
 800098e:	e7df      	b.n	8000950 <__aeabi_fsub+0x29c>
 8000990:	2e00      	cmp	r6, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x2e2>
 8000994:	e6d4      	b.n	8000740 <__aeabi_fsub+0x8c>
 8000996:	1b9f      	subs	r7, r3, r6
 8000998:	017a      	lsls	r2, r7, #5
 800099a:	d400      	bmi.n	800099e <__aeabi_fsub+0x2ea>
 800099c:	e737      	b.n	800080e <__aeabi_fsub+0x15a>
 800099e:	1af3      	subs	r3, r6, r3
 80009a0:	000d      	movs	r5, r1
 80009a2:	e6cd      	b.n	8000740 <__aeabi_fsub+0x8c>
 80009a4:	24ff      	movs	r4, #255	; 0xff
 80009a6:	2e00      	cmp	r6, #0
 80009a8:	d100      	bne.n	80009ac <__aeabi_fsub+0x2f8>
 80009aa:	e6c9      	b.n	8000740 <__aeabi_fsub+0x8c>
 80009ac:	2280      	movs	r2, #128	; 0x80
 80009ae:	4650      	mov	r0, sl
 80009b0:	03d2      	lsls	r2, r2, #15
 80009b2:	4210      	tst	r0, r2
 80009b4:	d0a4      	beq.n	8000900 <__aeabi_fsub+0x24c>
 80009b6:	4660      	mov	r0, ip
 80009b8:	4210      	tst	r0, r2
 80009ba:	d1a1      	bne.n	8000900 <__aeabi_fsub+0x24c>
 80009bc:	0033      	movs	r3, r6
 80009be:	000d      	movs	r5, r1
 80009c0:	24ff      	movs	r4, #255	; 0xff
 80009c2:	e6bd      	b.n	8000740 <__aeabi_fsub+0x8c>
 80009c4:	0033      	movs	r3, r6
 80009c6:	24ff      	movs	r4, #255	; 0xff
 80009c8:	e6ba      	b.n	8000740 <__aeabi_fsub+0x8c>
 80009ca:	2301      	movs	r3, #1
 80009cc:	e76e      	b.n	80008ac <__aeabi_fsub+0x1f8>
 80009ce:	0033      	movs	r3, r6
 80009d0:	0004      	movs	r4, r0
 80009d2:	e6b5      	b.n	8000740 <__aeabi_fsub+0x8c>
 80009d4:	2700      	movs	r7, #0
 80009d6:	2200      	movs	r2, #0
 80009d8:	e71c      	b.n	8000814 <__aeabi_fsub+0x160>
 80009da:	0033      	movs	r3, r6
 80009dc:	e6b0      	b.n	8000740 <__aeabi_fsub+0x8c>
 80009de:	2301      	movs	r3, #1
 80009e0:	e7c0      	b.n	8000964 <__aeabi_fsub+0x2b0>
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	7dffffff 	.word	0x7dffffff
 80009e8:	fbffffff 	.word	0xfbffffff

080009ec <__aeabi_ui2f>:
 80009ec:	b510      	push	{r4, lr}
 80009ee:	1e04      	subs	r4, r0, #0
 80009f0:	d027      	beq.n	8000a42 <__aeabi_ui2f+0x56>
 80009f2:	f001 fdf7 	bl	80025e4 <__clzsi2>
 80009f6:	239e      	movs	r3, #158	; 0x9e
 80009f8:	1a1b      	subs	r3, r3, r0
 80009fa:	2b96      	cmp	r3, #150	; 0x96
 80009fc:	dc0a      	bgt.n	8000a14 <__aeabi_ui2f+0x28>
 80009fe:	2296      	movs	r2, #150	; 0x96
 8000a00:	1ad2      	subs	r2, r2, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	0264      	lsls	r4, r4, #9
 8000a06:	0a64      	lsrs	r4, r4, #9
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	0264      	lsls	r4, r4, #9
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	0a60      	lsrs	r0, r4, #9
 8000a10:	4318      	orrs	r0, r3
 8000a12:	bd10      	pop	{r4, pc}
 8000a14:	2b99      	cmp	r3, #153	; 0x99
 8000a16:	dc17      	bgt.n	8000a48 <__aeabi_ui2f+0x5c>
 8000a18:	2299      	movs	r2, #153	; 0x99
 8000a1a:	1ad2      	subs	r2, r2, r3
 8000a1c:	2a00      	cmp	r2, #0
 8000a1e:	dd27      	ble.n	8000a70 <__aeabi_ui2f+0x84>
 8000a20:	4094      	lsls	r4, r2
 8000a22:	0022      	movs	r2, r4
 8000a24:	4c13      	ldr	r4, [pc, #76]	; (8000a74 <__aeabi_ui2f+0x88>)
 8000a26:	4014      	ands	r4, r2
 8000a28:	0751      	lsls	r1, r2, #29
 8000a2a:	d004      	beq.n	8000a36 <__aeabi_ui2f+0x4a>
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	400a      	ands	r2, r1
 8000a30:	2a04      	cmp	r2, #4
 8000a32:	d000      	beq.n	8000a36 <__aeabi_ui2f+0x4a>
 8000a34:	3404      	adds	r4, #4
 8000a36:	0162      	lsls	r2, r4, #5
 8000a38:	d412      	bmi.n	8000a60 <__aeabi_ui2f+0x74>
 8000a3a:	01a4      	lsls	r4, r4, #6
 8000a3c:	0a64      	lsrs	r4, r4, #9
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	e7e3      	b.n	8000a0a <__aeabi_ui2f+0x1e>
 8000a42:	2300      	movs	r3, #0
 8000a44:	2400      	movs	r4, #0
 8000a46:	e7e0      	b.n	8000a0a <__aeabi_ui2f+0x1e>
 8000a48:	22b9      	movs	r2, #185	; 0xb9
 8000a4a:	0021      	movs	r1, r4
 8000a4c:	1ad2      	subs	r2, r2, r3
 8000a4e:	4091      	lsls	r1, r2
 8000a50:	000a      	movs	r2, r1
 8000a52:	1e51      	subs	r1, r2, #1
 8000a54:	418a      	sbcs	r2, r1
 8000a56:	2105      	movs	r1, #5
 8000a58:	1a09      	subs	r1, r1, r0
 8000a5a:	40cc      	lsrs	r4, r1
 8000a5c:	4314      	orrs	r4, r2
 8000a5e:	e7db      	b.n	8000a18 <__aeabi_ui2f+0x2c>
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__aeabi_ui2f+0x88>)
 8000a62:	401c      	ands	r4, r3
 8000a64:	239f      	movs	r3, #159	; 0x9f
 8000a66:	01a4      	lsls	r4, r4, #6
 8000a68:	1a1b      	subs	r3, r3, r0
 8000a6a:	0a64      	lsrs	r4, r4, #9
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	e7cc      	b.n	8000a0a <__aeabi_ui2f+0x1e>
 8000a70:	0022      	movs	r2, r4
 8000a72:	e7d7      	b.n	8000a24 <__aeabi_ui2f+0x38>
 8000a74:	fbffffff 	.word	0xfbffffff

08000a78 <__aeabi_dadd>:
 8000a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7a:	4645      	mov	r5, r8
 8000a7c:	46de      	mov	lr, fp
 8000a7e:	4657      	mov	r7, sl
 8000a80:	464e      	mov	r6, r9
 8000a82:	030c      	lsls	r4, r1, #12
 8000a84:	b5e0      	push	{r5, r6, r7, lr}
 8000a86:	004e      	lsls	r6, r1, #1
 8000a88:	0fc9      	lsrs	r1, r1, #31
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	000d      	movs	r5, r1
 8000a8e:	0a61      	lsrs	r1, r4, #9
 8000a90:	0f44      	lsrs	r4, r0, #29
 8000a92:	430c      	orrs	r4, r1
 8000a94:	00c7      	lsls	r7, r0, #3
 8000a96:	0319      	lsls	r1, r3, #12
 8000a98:	0058      	lsls	r0, r3, #1
 8000a9a:	0fdb      	lsrs	r3, r3, #31
 8000a9c:	469b      	mov	fp, r3
 8000a9e:	0a4b      	lsrs	r3, r1, #9
 8000aa0:	0f51      	lsrs	r1, r2, #29
 8000aa2:	430b      	orrs	r3, r1
 8000aa4:	0d76      	lsrs	r6, r6, #21
 8000aa6:	0d40      	lsrs	r0, r0, #21
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	45d8      	cmp	r8, fp
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dadd+0x3a>
 8000ab0:	e0ae      	b.n	8000c10 <__aeabi_dadd+0x198>
 8000ab2:	1a35      	subs	r5, r6, r0
 8000ab4:	2d00      	cmp	r5, #0
 8000ab6:	dc00      	bgt.n	8000aba <__aeabi_dadd+0x42>
 8000ab8:	e0f6      	b.n	8000ca8 <__aeabi_dadd+0x230>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	d10f      	bne.n	8000ade <__aeabi_dadd+0x66>
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_dadd+0x4c>
 8000ac2:	e0db      	b.n	8000c7c <__aeabi_dadd+0x204>
 8000ac4:	1e6b      	subs	r3, r5, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d000      	beq.n	8000acc <__aeabi_dadd+0x54>
 8000aca:	e137      	b.n	8000d3c <__aeabi_dadd+0x2c4>
 8000acc:	1aba      	subs	r2, r7, r2
 8000ace:	4297      	cmp	r7, r2
 8000ad0:	41bf      	sbcs	r7, r7
 8000ad2:	1a64      	subs	r4, r4, r1
 8000ad4:	427f      	negs	r7, r7
 8000ad6:	1be4      	subs	r4, r4, r7
 8000ad8:	2601      	movs	r6, #1
 8000ada:	0017      	movs	r7, r2
 8000adc:	e024      	b.n	8000b28 <__aeabi_dadd+0xb0>
 8000ade:	4bc6      	ldr	r3, [pc, #792]	; (8000df8 <__aeabi_dadd+0x380>)
 8000ae0:	429e      	cmp	r6, r3
 8000ae2:	d04d      	beq.n	8000b80 <__aeabi_dadd+0x108>
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	041b      	lsls	r3, r3, #16
 8000ae8:	4319      	orrs	r1, r3
 8000aea:	2d38      	cmp	r5, #56	; 0x38
 8000aec:	dd00      	ble.n	8000af0 <__aeabi_dadd+0x78>
 8000aee:	e107      	b.n	8000d00 <__aeabi_dadd+0x288>
 8000af0:	2d1f      	cmp	r5, #31
 8000af2:	dd00      	ble.n	8000af6 <__aeabi_dadd+0x7e>
 8000af4:	e138      	b.n	8000d68 <__aeabi_dadd+0x2f0>
 8000af6:	2020      	movs	r0, #32
 8000af8:	1b43      	subs	r3, r0, r5
 8000afa:	469a      	mov	sl, r3
 8000afc:	000b      	movs	r3, r1
 8000afe:	4650      	mov	r0, sl
 8000b00:	4083      	lsls	r3, r0
 8000b02:	4699      	mov	r9, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	4648      	mov	r0, r9
 8000b08:	40eb      	lsrs	r3, r5
 8000b0a:	4318      	orrs	r0, r3
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	4650      	mov	r0, sl
 8000b10:	4082      	lsls	r2, r0
 8000b12:	1e50      	subs	r0, r2, #1
 8000b14:	4182      	sbcs	r2, r0
 8000b16:	40e9      	lsrs	r1, r5
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	1aba      	subs	r2, r7, r2
 8000b1c:	1a61      	subs	r1, r4, r1
 8000b1e:	4297      	cmp	r7, r2
 8000b20:	41a4      	sbcs	r4, r4
 8000b22:	0017      	movs	r7, r2
 8000b24:	4264      	negs	r4, r4
 8000b26:	1b0c      	subs	r4, r1, r4
 8000b28:	0223      	lsls	r3, r4, #8
 8000b2a:	d562      	bpl.n	8000bf2 <__aeabi_dadd+0x17a>
 8000b2c:	0264      	lsls	r4, r4, #9
 8000b2e:	0a65      	lsrs	r5, r4, #9
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d100      	bne.n	8000b36 <__aeabi_dadd+0xbe>
 8000b34:	e0df      	b.n	8000cf6 <__aeabi_dadd+0x27e>
 8000b36:	0028      	movs	r0, r5
 8000b38:	f001 fd54 	bl	80025e4 <__clzsi2>
 8000b3c:	0003      	movs	r3, r0
 8000b3e:	3b08      	subs	r3, #8
 8000b40:	2b1f      	cmp	r3, #31
 8000b42:	dd00      	ble.n	8000b46 <__aeabi_dadd+0xce>
 8000b44:	e0d2      	b.n	8000cec <__aeabi_dadd+0x274>
 8000b46:	2220      	movs	r2, #32
 8000b48:	003c      	movs	r4, r7
 8000b4a:	1ad2      	subs	r2, r2, r3
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	40d4      	lsrs	r4, r2
 8000b50:	409f      	lsls	r7, r3
 8000b52:	4325      	orrs	r5, r4
 8000b54:	429e      	cmp	r6, r3
 8000b56:	dd00      	ble.n	8000b5a <__aeabi_dadd+0xe2>
 8000b58:	e0c4      	b.n	8000ce4 <__aeabi_dadd+0x26c>
 8000b5a:	1b9e      	subs	r6, r3, r6
 8000b5c:	1c73      	adds	r3, r6, #1
 8000b5e:	2b1f      	cmp	r3, #31
 8000b60:	dd00      	ble.n	8000b64 <__aeabi_dadd+0xec>
 8000b62:	e0f1      	b.n	8000d48 <__aeabi_dadd+0x2d0>
 8000b64:	2220      	movs	r2, #32
 8000b66:	0038      	movs	r0, r7
 8000b68:	0029      	movs	r1, r5
 8000b6a:	1ad2      	subs	r2, r2, r3
 8000b6c:	40d8      	lsrs	r0, r3
 8000b6e:	4091      	lsls	r1, r2
 8000b70:	4097      	lsls	r7, r2
 8000b72:	002c      	movs	r4, r5
 8000b74:	4301      	orrs	r1, r0
 8000b76:	1e78      	subs	r0, r7, #1
 8000b78:	4187      	sbcs	r7, r0
 8000b7a:	40dc      	lsrs	r4, r3
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	430f      	orrs	r7, r1
 8000b80:	077b      	lsls	r3, r7, #29
 8000b82:	d009      	beq.n	8000b98 <__aeabi_dadd+0x120>
 8000b84:	230f      	movs	r3, #15
 8000b86:	403b      	ands	r3, r7
 8000b88:	2b04      	cmp	r3, #4
 8000b8a:	d005      	beq.n	8000b98 <__aeabi_dadd+0x120>
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	42bb      	cmp	r3, r7
 8000b90:	41bf      	sbcs	r7, r7
 8000b92:	427f      	negs	r7, r7
 8000b94:	19e4      	adds	r4, r4, r7
 8000b96:	001f      	movs	r7, r3
 8000b98:	0223      	lsls	r3, r4, #8
 8000b9a:	d52c      	bpl.n	8000bf6 <__aeabi_dadd+0x17e>
 8000b9c:	4b96      	ldr	r3, [pc, #600]	; (8000df8 <__aeabi_dadd+0x380>)
 8000b9e:	3601      	adds	r6, #1
 8000ba0:	429e      	cmp	r6, r3
 8000ba2:	d100      	bne.n	8000ba6 <__aeabi_dadd+0x12e>
 8000ba4:	e09a      	b.n	8000cdc <__aeabi_dadd+0x264>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	4b94      	ldr	r3, [pc, #592]	; (8000dfc <__aeabi_dadd+0x384>)
 8000baa:	08ff      	lsrs	r7, r7, #3
 8000bac:	401c      	ands	r4, r3
 8000bae:	0760      	lsls	r0, r4, #29
 8000bb0:	0576      	lsls	r6, r6, #21
 8000bb2:	0264      	lsls	r4, r4, #9
 8000bb4:	4307      	orrs	r7, r0
 8000bb6:	0b24      	lsrs	r4, r4, #12
 8000bb8:	0d76      	lsrs	r6, r6, #21
 8000bba:	2100      	movs	r1, #0
 8000bbc:	0324      	lsls	r4, r4, #12
 8000bbe:	0b23      	lsrs	r3, r4, #12
 8000bc0:	0d0c      	lsrs	r4, r1, #20
 8000bc2:	4a8f      	ldr	r2, [pc, #572]	; (8000e00 <__aeabi_dadd+0x388>)
 8000bc4:	0524      	lsls	r4, r4, #20
 8000bc6:	431c      	orrs	r4, r3
 8000bc8:	4014      	ands	r4, r2
 8000bca:	0533      	lsls	r3, r6, #20
 8000bcc:	4323      	orrs	r3, r4
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	07ed      	lsls	r5, r5, #31
 8000bd2:	085b      	lsrs	r3, r3, #1
 8000bd4:	432b      	orrs	r3, r5
 8000bd6:	0038      	movs	r0, r7
 8000bd8:	0019      	movs	r1, r3
 8000bda:	bc3c      	pop	{r2, r3, r4, r5}
 8000bdc:	4690      	mov	r8, r2
 8000bde:	4699      	mov	r9, r3
 8000be0:	46a2      	mov	sl, r4
 8000be2:	46ab      	mov	fp, r5
 8000be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be6:	4664      	mov	r4, ip
 8000be8:	4304      	orrs	r4, r0
 8000bea:	d100      	bne.n	8000bee <__aeabi_dadd+0x176>
 8000bec:	e211      	b.n	8001012 <__aeabi_dadd+0x59a>
 8000bee:	0004      	movs	r4, r0
 8000bf0:	4667      	mov	r7, ip
 8000bf2:	077b      	lsls	r3, r7, #29
 8000bf4:	d1c6      	bne.n	8000b84 <__aeabi_dadd+0x10c>
 8000bf6:	4645      	mov	r5, r8
 8000bf8:	0760      	lsls	r0, r4, #29
 8000bfa:	08ff      	lsrs	r7, r7, #3
 8000bfc:	4307      	orrs	r7, r0
 8000bfe:	08e4      	lsrs	r4, r4, #3
 8000c00:	4b7d      	ldr	r3, [pc, #500]	; (8000df8 <__aeabi_dadd+0x380>)
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d030      	beq.n	8000c68 <__aeabi_dadd+0x1f0>
 8000c06:	0324      	lsls	r4, r4, #12
 8000c08:	0576      	lsls	r6, r6, #21
 8000c0a:	0b24      	lsrs	r4, r4, #12
 8000c0c:	0d76      	lsrs	r6, r6, #21
 8000c0e:	e7d4      	b.n	8000bba <__aeabi_dadd+0x142>
 8000c10:	1a33      	subs	r3, r6, r0
 8000c12:	469a      	mov	sl, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	dd78      	ble.n	8000d0a <__aeabi_dadd+0x292>
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	d031      	beq.n	8000c80 <__aeabi_dadd+0x208>
 8000c1c:	4876      	ldr	r0, [pc, #472]	; (8000df8 <__aeabi_dadd+0x380>)
 8000c1e:	4286      	cmp	r6, r0
 8000c20:	d0ae      	beq.n	8000b80 <__aeabi_dadd+0x108>
 8000c22:	2080      	movs	r0, #128	; 0x80
 8000c24:	0400      	lsls	r0, r0, #16
 8000c26:	4301      	orrs	r1, r0
 8000c28:	4653      	mov	r3, sl
 8000c2a:	2b38      	cmp	r3, #56	; 0x38
 8000c2c:	dc00      	bgt.n	8000c30 <__aeabi_dadd+0x1b8>
 8000c2e:	e0e9      	b.n	8000e04 <__aeabi_dadd+0x38c>
 8000c30:	430a      	orrs	r2, r1
 8000c32:	1e51      	subs	r1, r2, #1
 8000c34:	418a      	sbcs	r2, r1
 8000c36:	2100      	movs	r1, #0
 8000c38:	19d2      	adds	r2, r2, r7
 8000c3a:	42ba      	cmp	r2, r7
 8000c3c:	41bf      	sbcs	r7, r7
 8000c3e:	1909      	adds	r1, r1, r4
 8000c40:	427c      	negs	r4, r7
 8000c42:	0017      	movs	r7, r2
 8000c44:	190c      	adds	r4, r1, r4
 8000c46:	0223      	lsls	r3, r4, #8
 8000c48:	d5d3      	bpl.n	8000bf2 <__aeabi_dadd+0x17a>
 8000c4a:	4b6b      	ldr	r3, [pc, #428]	; (8000df8 <__aeabi_dadd+0x380>)
 8000c4c:	3601      	adds	r6, #1
 8000c4e:	429e      	cmp	r6, r3
 8000c50:	d100      	bne.n	8000c54 <__aeabi_dadd+0x1dc>
 8000c52:	e13a      	b.n	8000eca <__aeabi_dadd+0x452>
 8000c54:	2001      	movs	r0, #1
 8000c56:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <__aeabi_dadd+0x384>)
 8000c58:	401c      	ands	r4, r3
 8000c5a:	087b      	lsrs	r3, r7, #1
 8000c5c:	4007      	ands	r7, r0
 8000c5e:	431f      	orrs	r7, r3
 8000c60:	07e0      	lsls	r0, r4, #31
 8000c62:	4307      	orrs	r7, r0
 8000c64:	0864      	lsrs	r4, r4, #1
 8000c66:	e78b      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000c68:	0023      	movs	r3, r4
 8000c6a:	433b      	orrs	r3, r7
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_dadd+0x1f8>
 8000c6e:	e1cb      	b.n	8001008 <__aeabi_dadd+0x590>
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	0312      	lsls	r2, r2, #12
 8000c74:	4314      	orrs	r4, r2
 8000c76:	0324      	lsls	r4, r4, #12
 8000c78:	0b24      	lsrs	r4, r4, #12
 8000c7a:	e79e      	b.n	8000bba <__aeabi_dadd+0x142>
 8000c7c:	002e      	movs	r6, r5
 8000c7e:	e77f      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000c80:	0008      	movs	r0, r1
 8000c82:	4310      	orrs	r0, r2
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x210>
 8000c86:	e0b4      	b.n	8000df2 <__aeabi_dadd+0x37a>
 8000c88:	1e58      	subs	r0, r3, #1
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dadd+0x218>
 8000c8e:	e0de      	b.n	8000e4e <__aeabi_dadd+0x3d6>
 8000c90:	18ba      	adds	r2, r7, r2
 8000c92:	42ba      	cmp	r2, r7
 8000c94:	419b      	sbcs	r3, r3
 8000c96:	1864      	adds	r4, r4, r1
 8000c98:	425b      	negs	r3, r3
 8000c9a:	18e4      	adds	r4, r4, r3
 8000c9c:	0017      	movs	r7, r2
 8000c9e:	2601      	movs	r6, #1
 8000ca0:	0223      	lsls	r3, r4, #8
 8000ca2:	d5a6      	bpl.n	8000bf2 <__aeabi_dadd+0x17a>
 8000ca4:	2602      	movs	r6, #2
 8000ca6:	e7d5      	b.n	8000c54 <__aeabi_dadd+0x1dc>
 8000ca8:	2d00      	cmp	r5, #0
 8000caa:	d16e      	bne.n	8000d8a <__aeabi_dadd+0x312>
 8000cac:	1c70      	adds	r0, r6, #1
 8000cae:	0540      	lsls	r0, r0, #21
 8000cb0:	0d40      	lsrs	r0, r0, #21
 8000cb2:	2801      	cmp	r0, #1
 8000cb4:	dc00      	bgt.n	8000cb8 <__aeabi_dadd+0x240>
 8000cb6:	e0f9      	b.n	8000eac <__aeabi_dadd+0x434>
 8000cb8:	1ab8      	subs	r0, r7, r2
 8000cba:	4684      	mov	ip, r0
 8000cbc:	4287      	cmp	r7, r0
 8000cbe:	4180      	sbcs	r0, r0
 8000cc0:	1ae5      	subs	r5, r4, r3
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	1a2d      	subs	r5, r5, r0
 8000cc6:	0228      	lsls	r0, r5, #8
 8000cc8:	d400      	bmi.n	8000ccc <__aeabi_dadd+0x254>
 8000cca:	e089      	b.n	8000de0 <__aeabi_dadd+0x368>
 8000ccc:	1bd7      	subs	r7, r2, r7
 8000cce:	42ba      	cmp	r2, r7
 8000cd0:	4192      	sbcs	r2, r2
 8000cd2:	1b1c      	subs	r4, r3, r4
 8000cd4:	4252      	negs	r2, r2
 8000cd6:	1aa5      	subs	r5, r4, r2
 8000cd8:	46d8      	mov	r8, fp
 8000cda:	e729      	b.n	8000b30 <__aeabi_dadd+0xb8>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	e76a      	b.n	8000bba <__aeabi_dadd+0x142>
 8000ce4:	4c45      	ldr	r4, [pc, #276]	; (8000dfc <__aeabi_dadd+0x384>)
 8000ce6:	1af6      	subs	r6, r6, r3
 8000ce8:	402c      	ands	r4, r5
 8000cea:	e749      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000cec:	003d      	movs	r5, r7
 8000cee:	3828      	subs	r0, #40	; 0x28
 8000cf0:	4085      	lsls	r5, r0
 8000cf2:	2700      	movs	r7, #0
 8000cf4:	e72e      	b.n	8000b54 <__aeabi_dadd+0xdc>
 8000cf6:	0038      	movs	r0, r7
 8000cf8:	f001 fc74 	bl	80025e4 <__clzsi2>
 8000cfc:	3020      	adds	r0, #32
 8000cfe:	e71d      	b.n	8000b3c <__aeabi_dadd+0xc4>
 8000d00:	430a      	orrs	r2, r1
 8000d02:	1e51      	subs	r1, r2, #1
 8000d04:	418a      	sbcs	r2, r1
 8000d06:	2100      	movs	r1, #0
 8000d08:	e707      	b.n	8000b1a <__aeabi_dadd+0xa2>
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d000      	beq.n	8000d10 <__aeabi_dadd+0x298>
 8000d0e:	e0f3      	b.n	8000ef8 <__aeabi_dadd+0x480>
 8000d10:	1c70      	adds	r0, r6, #1
 8000d12:	0543      	lsls	r3, r0, #21
 8000d14:	0d5b      	lsrs	r3, r3, #21
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	dc00      	bgt.n	8000d1c <__aeabi_dadd+0x2a4>
 8000d1a:	e0ad      	b.n	8000e78 <__aeabi_dadd+0x400>
 8000d1c:	4b36      	ldr	r3, [pc, #216]	; (8000df8 <__aeabi_dadd+0x380>)
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dadd+0x2ac>
 8000d22:	e0d1      	b.n	8000ec8 <__aeabi_dadd+0x450>
 8000d24:	18ba      	adds	r2, r7, r2
 8000d26:	42ba      	cmp	r2, r7
 8000d28:	41bf      	sbcs	r7, r7
 8000d2a:	1864      	adds	r4, r4, r1
 8000d2c:	427f      	negs	r7, r7
 8000d2e:	19e4      	adds	r4, r4, r7
 8000d30:	07e7      	lsls	r7, r4, #31
 8000d32:	0852      	lsrs	r2, r2, #1
 8000d34:	4317      	orrs	r7, r2
 8000d36:	0864      	lsrs	r4, r4, #1
 8000d38:	0006      	movs	r6, r0
 8000d3a:	e721      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000d3c:	482e      	ldr	r0, [pc, #184]	; (8000df8 <__aeabi_dadd+0x380>)
 8000d3e:	4285      	cmp	r5, r0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_dadd+0x2cc>
 8000d42:	e093      	b.n	8000e6c <__aeabi_dadd+0x3f4>
 8000d44:	001d      	movs	r5, r3
 8000d46:	e6d0      	b.n	8000aea <__aeabi_dadd+0x72>
 8000d48:	0029      	movs	r1, r5
 8000d4a:	3e1f      	subs	r6, #31
 8000d4c:	40f1      	lsrs	r1, r6
 8000d4e:	2b20      	cmp	r3, #32
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dadd+0x2dc>
 8000d52:	e08d      	b.n	8000e70 <__aeabi_dadd+0x3f8>
 8000d54:	2240      	movs	r2, #64	; 0x40
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	409d      	lsls	r5, r3
 8000d5a:	432f      	orrs	r7, r5
 8000d5c:	1e7d      	subs	r5, r7, #1
 8000d5e:	41af      	sbcs	r7, r5
 8000d60:	2400      	movs	r4, #0
 8000d62:	430f      	orrs	r7, r1
 8000d64:	2600      	movs	r6, #0
 8000d66:	e744      	b.n	8000bf2 <__aeabi_dadd+0x17a>
 8000d68:	002b      	movs	r3, r5
 8000d6a:	0008      	movs	r0, r1
 8000d6c:	3b20      	subs	r3, #32
 8000d6e:	40d8      	lsrs	r0, r3
 8000d70:	0003      	movs	r3, r0
 8000d72:	2d20      	cmp	r5, #32
 8000d74:	d100      	bne.n	8000d78 <__aeabi_dadd+0x300>
 8000d76:	e07d      	b.n	8000e74 <__aeabi_dadd+0x3fc>
 8000d78:	2040      	movs	r0, #64	; 0x40
 8000d7a:	1b45      	subs	r5, r0, r5
 8000d7c:	40a9      	lsls	r1, r5
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	1e51      	subs	r1, r2, #1
 8000d82:	418a      	sbcs	r2, r1
 8000d84:	2100      	movs	r1, #0
 8000d86:	431a      	orrs	r2, r3
 8000d88:	e6c7      	b.n	8000b1a <__aeabi_dadd+0xa2>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d050      	beq.n	8000e30 <__aeabi_dadd+0x3b8>
 8000d8e:	4e1a      	ldr	r6, [pc, #104]	; (8000df8 <__aeabi_dadd+0x380>)
 8000d90:	42b0      	cmp	r0, r6
 8000d92:	d057      	beq.n	8000e44 <__aeabi_dadd+0x3cc>
 8000d94:	2680      	movs	r6, #128	; 0x80
 8000d96:	426b      	negs	r3, r5
 8000d98:	4699      	mov	r9, r3
 8000d9a:	0436      	lsls	r6, r6, #16
 8000d9c:	4334      	orrs	r4, r6
 8000d9e:	464b      	mov	r3, r9
 8000da0:	2b38      	cmp	r3, #56	; 0x38
 8000da2:	dd00      	ble.n	8000da6 <__aeabi_dadd+0x32e>
 8000da4:	e0d6      	b.n	8000f54 <__aeabi_dadd+0x4dc>
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	dd00      	ble.n	8000dac <__aeabi_dadd+0x334>
 8000daa:	e135      	b.n	8001018 <__aeabi_dadd+0x5a0>
 8000dac:	2620      	movs	r6, #32
 8000dae:	1af5      	subs	r5, r6, r3
 8000db0:	0026      	movs	r6, r4
 8000db2:	40ae      	lsls	r6, r5
 8000db4:	46b2      	mov	sl, r6
 8000db6:	003e      	movs	r6, r7
 8000db8:	40de      	lsrs	r6, r3
 8000dba:	46ac      	mov	ip, r5
 8000dbc:	0035      	movs	r5, r6
 8000dbe:	4656      	mov	r6, sl
 8000dc0:	432e      	orrs	r6, r5
 8000dc2:	4665      	mov	r5, ip
 8000dc4:	40af      	lsls	r7, r5
 8000dc6:	1e7d      	subs	r5, r7, #1
 8000dc8:	41af      	sbcs	r7, r5
 8000dca:	40dc      	lsrs	r4, r3
 8000dcc:	4337      	orrs	r7, r6
 8000dce:	1bd7      	subs	r7, r2, r7
 8000dd0:	42ba      	cmp	r2, r7
 8000dd2:	4192      	sbcs	r2, r2
 8000dd4:	1b0c      	subs	r4, r1, r4
 8000dd6:	4252      	negs	r2, r2
 8000dd8:	1aa4      	subs	r4, r4, r2
 8000dda:	0006      	movs	r6, r0
 8000ddc:	46d8      	mov	r8, fp
 8000dde:	e6a3      	b.n	8000b28 <__aeabi_dadd+0xb0>
 8000de0:	4664      	mov	r4, ip
 8000de2:	4667      	mov	r7, ip
 8000de4:	432c      	orrs	r4, r5
 8000de6:	d000      	beq.n	8000dea <__aeabi_dadd+0x372>
 8000de8:	e6a2      	b.n	8000b30 <__aeabi_dadd+0xb8>
 8000dea:	2500      	movs	r5, #0
 8000dec:	2600      	movs	r6, #0
 8000dee:	2700      	movs	r7, #0
 8000df0:	e706      	b.n	8000c00 <__aeabi_dadd+0x188>
 8000df2:	001e      	movs	r6, r3
 8000df4:	e6c4      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	000007ff 	.word	0x000007ff
 8000dfc:	ff7fffff 	.word	0xff7fffff
 8000e00:	800fffff 	.word	0x800fffff
 8000e04:	2b1f      	cmp	r3, #31
 8000e06:	dc63      	bgt.n	8000ed0 <__aeabi_dadd+0x458>
 8000e08:	2020      	movs	r0, #32
 8000e0a:	1ac3      	subs	r3, r0, r3
 8000e0c:	0008      	movs	r0, r1
 8000e0e:	4098      	lsls	r0, r3
 8000e10:	469c      	mov	ip, r3
 8000e12:	4683      	mov	fp, r0
 8000e14:	4653      	mov	r3, sl
 8000e16:	0010      	movs	r0, r2
 8000e18:	40d8      	lsrs	r0, r3
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	4658      	mov	r0, fp
 8000e1e:	4318      	orrs	r0, r3
 8000e20:	4663      	mov	r3, ip
 8000e22:	409a      	lsls	r2, r3
 8000e24:	1e53      	subs	r3, r2, #1
 8000e26:	419a      	sbcs	r2, r3
 8000e28:	4653      	mov	r3, sl
 8000e2a:	4302      	orrs	r2, r0
 8000e2c:	40d9      	lsrs	r1, r3
 8000e2e:	e703      	b.n	8000c38 <__aeabi_dadd+0x1c0>
 8000e30:	0026      	movs	r6, r4
 8000e32:	433e      	orrs	r6, r7
 8000e34:	d006      	beq.n	8000e44 <__aeabi_dadd+0x3cc>
 8000e36:	43eb      	mvns	r3, r5
 8000e38:	4699      	mov	r9, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0c7      	beq.n	8000dce <__aeabi_dadd+0x356>
 8000e3e:	4e94      	ldr	r6, [pc, #592]	; (8001090 <__aeabi_dadd+0x618>)
 8000e40:	42b0      	cmp	r0, r6
 8000e42:	d1ac      	bne.n	8000d9e <__aeabi_dadd+0x326>
 8000e44:	000c      	movs	r4, r1
 8000e46:	0017      	movs	r7, r2
 8000e48:	0006      	movs	r6, r0
 8000e4a:	46d8      	mov	r8, fp
 8000e4c:	e698      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000e4e:	4b90      	ldr	r3, [pc, #576]	; (8001090 <__aeabi_dadd+0x618>)
 8000e50:	459a      	cmp	sl, r3
 8000e52:	d00b      	beq.n	8000e6c <__aeabi_dadd+0x3f4>
 8000e54:	4682      	mov	sl, r0
 8000e56:	e6e7      	b.n	8000c28 <__aeabi_dadd+0x1b0>
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d000      	beq.n	8000e5e <__aeabi_dadd+0x3e6>
 8000e5c:	e09e      	b.n	8000f9c <__aeabi_dadd+0x524>
 8000e5e:	0018      	movs	r0, r3
 8000e60:	4310      	orrs	r0, r2
 8000e62:	d100      	bne.n	8000e66 <__aeabi_dadd+0x3ee>
 8000e64:	e0e9      	b.n	800103a <__aeabi_dadd+0x5c2>
 8000e66:	001c      	movs	r4, r3
 8000e68:	0017      	movs	r7, r2
 8000e6a:	46d8      	mov	r8, fp
 8000e6c:	4e88      	ldr	r6, [pc, #544]	; (8001090 <__aeabi_dadd+0x618>)
 8000e6e:	e687      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000e70:	2500      	movs	r5, #0
 8000e72:	e772      	b.n	8000d5a <__aeabi_dadd+0x2e2>
 8000e74:	2100      	movs	r1, #0
 8000e76:	e782      	b.n	8000d7e <__aeabi_dadd+0x306>
 8000e78:	0023      	movs	r3, r4
 8000e7a:	433b      	orrs	r3, r7
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d000      	beq.n	8000e82 <__aeabi_dadd+0x40a>
 8000e80:	e0ab      	b.n	8000fda <__aeabi_dadd+0x562>
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_dadd+0x410>
 8000e86:	e0e7      	b.n	8001058 <__aeabi_dadd+0x5e0>
 8000e88:	000b      	movs	r3, r1
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_dadd+0x418>
 8000e8e:	e677      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000e90:	18ba      	adds	r2, r7, r2
 8000e92:	42ba      	cmp	r2, r7
 8000e94:	41bf      	sbcs	r7, r7
 8000e96:	1864      	adds	r4, r4, r1
 8000e98:	427f      	negs	r7, r7
 8000e9a:	19e4      	adds	r4, r4, r7
 8000e9c:	0223      	lsls	r3, r4, #8
 8000e9e:	d400      	bmi.n	8000ea2 <__aeabi_dadd+0x42a>
 8000ea0:	e0f2      	b.n	8001088 <__aeabi_dadd+0x610>
 8000ea2:	4b7c      	ldr	r3, [pc, #496]	; (8001094 <__aeabi_dadd+0x61c>)
 8000ea4:	0017      	movs	r7, r2
 8000ea6:	401c      	ands	r4, r3
 8000ea8:	0006      	movs	r6, r0
 8000eaa:	e669      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000eac:	0020      	movs	r0, r4
 8000eae:	4338      	orrs	r0, r7
 8000eb0:	2e00      	cmp	r6, #0
 8000eb2:	d1d1      	bne.n	8000e58 <__aeabi_dadd+0x3e0>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d15b      	bne.n	8000f70 <__aeabi_dadd+0x4f8>
 8000eb8:	001c      	movs	r4, r3
 8000eba:	4314      	orrs	r4, r2
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_dadd+0x448>
 8000ebe:	e0a8      	b.n	8001012 <__aeabi_dadd+0x59a>
 8000ec0:	001c      	movs	r4, r3
 8000ec2:	0017      	movs	r7, r2
 8000ec4:	46d8      	mov	r8, fp
 8000ec6:	e65b      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000ec8:	0006      	movs	r6, r0
 8000eca:	2400      	movs	r4, #0
 8000ecc:	2700      	movs	r7, #0
 8000ece:	e697      	b.n	8000c00 <__aeabi_dadd+0x188>
 8000ed0:	4650      	mov	r0, sl
 8000ed2:	000b      	movs	r3, r1
 8000ed4:	3820      	subs	r0, #32
 8000ed6:	40c3      	lsrs	r3, r0
 8000ed8:	4699      	mov	r9, r3
 8000eda:	4653      	mov	r3, sl
 8000edc:	2b20      	cmp	r3, #32
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x46a>
 8000ee0:	e095      	b.n	800100e <__aeabi_dadd+0x596>
 8000ee2:	2340      	movs	r3, #64	; 0x40
 8000ee4:	4650      	mov	r0, sl
 8000ee6:	1a1b      	subs	r3, r3, r0
 8000ee8:	4099      	lsls	r1, r3
 8000eea:	430a      	orrs	r2, r1
 8000eec:	1e51      	subs	r1, r2, #1
 8000eee:	418a      	sbcs	r2, r1
 8000ef0:	464b      	mov	r3, r9
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	e69f      	b.n	8000c38 <__aeabi_dadd+0x1c0>
 8000ef8:	2e00      	cmp	r6, #0
 8000efa:	d130      	bne.n	8000f5e <__aeabi_dadd+0x4e6>
 8000efc:	0026      	movs	r6, r4
 8000efe:	433e      	orrs	r6, r7
 8000f00:	d067      	beq.n	8000fd2 <__aeabi_dadd+0x55a>
 8000f02:	43db      	mvns	r3, r3
 8000f04:	469a      	mov	sl, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d01c      	beq.n	8000f44 <__aeabi_dadd+0x4cc>
 8000f0a:	4e61      	ldr	r6, [pc, #388]	; (8001090 <__aeabi_dadd+0x618>)
 8000f0c:	42b0      	cmp	r0, r6
 8000f0e:	d060      	beq.n	8000fd2 <__aeabi_dadd+0x55a>
 8000f10:	4653      	mov	r3, sl
 8000f12:	2b38      	cmp	r3, #56	; 0x38
 8000f14:	dd00      	ble.n	8000f18 <__aeabi_dadd+0x4a0>
 8000f16:	e096      	b.n	8001046 <__aeabi_dadd+0x5ce>
 8000f18:	2b1f      	cmp	r3, #31
 8000f1a:	dd00      	ble.n	8000f1e <__aeabi_dadd+0x4a6>
 8000f1c:	e09f      	b.n	800105e <__aeabi_dadd+0x5e6>
 8000f1e:	2620      	movs	r6, #32
 8000f20:	1af3      	subs	r3, r6, r3
 8000f22:	0026      	movs	r6, r4
 8000f24:	409e      	lsls	r6, r3
 8000f26:	469c      	mov	ip, r3
 8000f28:	46b3      	mov	fp, r6
 8000f2a:	4653      	mov	r3, sl
 8000f2c:	003e      	movs	r6, r7
 8000f2e:	40de      	lsrs	r6, r3
 8000f30:	0033      	movs	r3, r6
 8000f32:	465e      	mov	r6, fp
 8000f34:	431e      	orrs	r6, r3
 8000f36:	4663      	mov	r3, ip
 8000f38:	409f      	lsls	r7, r3
 8000f3a:	1e7b      	subs	r3, r7, #1
 8000f3c:	419f      	sbcs	r7, r3
 8000f3e:	4653      	mov	r3, sl
 8000f40:	40dc      	lsrs	r4, r3
 8000f42:	4337      	orrs	r7, r6
 8000f44:	18bf      	adds	r7, r7, r2
 8000f46:	4297      	cmp	r7, r2
 8000f48:	4192      	sbcs	r2, r2
 8000f4a:	1864      	adds	r4, r4, r1
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	18a4      	adds	r4, r4, r2
 8000f50:	0006      	movs	r6, r0
 8000f52:	e678      	b.n	8000c46 <__aeabi_dadd+0x1ce>
 8000f54:	4327      	orrs	r7, r4
 8000f56:	1e7c      	subs	r4, r7, #1
 8000f58:	41a7      	sbcs	r7, r4
 8000f5a:	2400      	movs	r4, #0
 8000f5c:	e737      	b.n	8000dce <__aeabi_dadd+0x356>
 8000f5e:	4e4c      	ldr	r6, [pc, #304]	; (8001090 <__aeabi_dadd+0x618>)
 8000f60:	42b0      	cmp	r0, r6
 8000f62:	d036      	beq.n	8000fd2 <__aeabi_dadd+0x55a>
 8000f64:	2680      	movs	r6, #128	; 0x80
 8000f66:	425b      	negs	r3, r3
 8000f68:	0436      	lsls	r6, r6, #16
 8000f6a:	469a      	mov	sl, r3
 8000f6c:	4334      	orrs	r4, r6
 8000f6e:	e7cf      	b.n	8000f10 <__aeabi_dadd+0x498>
 8000f70:	0018      	movs	r0, r3
 8000f72:	4310      	orrs	r0, r2
 8000f74:	d100      	bne.n	8000f78 <__aeabi_dadd+0x500>
 8000f76:	e603      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000f78:	1ab8      	subs	r0, r7, r2
 8000f7a:	4684      	mov	ip, r0
 8000f7c:	4567      	cmp	r7, ip
 8000f7e:	41ad      	sbcs	r5, r5
 8000f80:	1ae0      	subs	r0, r4, r3
 8000f82:	426d      	negs	r5, r5
 8000f84:	1b40      	subs	r0, r0, r5
 8000f86:	0205      	lsls	r5, r0, #8
 8000f88:	d400      	bmi.n	8000f8c <__aeabi_dadd+0x514>
 8000f8a:	e62c      	b.n	8000be6 <__aeabi_dadd+0x16e>
 8000f8c:	1bd7      	subs	r7, r2, r7
 8000f8e:	42ba      	cmp	r2, r7
 8000f90:	4192      	sbcs	r2, r2
 8000f92:	1b1c      	subs	r4, r3, r4
 8000f94:	4252      	negs	r2, r2
 8000f96:	1aa4      	subs	r4, r4, r2
 8000f98:	46d8      	mov	r8, fp
 8000f9a:	e5f1      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	4310      	orrs	r0, r2
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dadd+0x52c>
 8000fa2:	e763      	b.n	8000e6c <__aeabi_dadd+0x3f4>
 8000fa4:	08f8      	lsrs	r0, r7, #3
 8000fa6:	0767      	lsls	r7, r4, #29
 8000fa8:	4307      	orrs	r7, r0
 8000faa:	2080      	movs	r0, #128	; 0x80
 8000fac:	08e4      	lsrs	r4, r4, #3
 8000fae:	0300      	lsls	r0, r0, #12
 8000fb0:	4204      	tst	r4, r0
 8000fb2:	d008      	beq.n	8000fc6 <__aeabi_dadd+0x54e>
 8000fb4:	08dd      	lsrs	r5, r3, #3
 8000fb6:	4205      	tst	r5, r0
 8000fb8:	d105      	bne.n	8000fc6 <__aeabi_dadd+0x54e>
 8000fba:	08d2      	lsrs	r2, r2, #3
 8000fbc:	0759      	lsls	r1, r3, #29
 8000fbe:	4311      	orrs	r1, r2
 8000fc0:	000f      	movs	r7, r1
 8000fc2:	002c      	movs	r4, r5
 8000fc4:	46d8      	mov	r8, fp
 8000fc6:	0f7b      	lsrs	r3, r7, #29
 8000fc8:	00e4      	lsls	r4, r4, #3
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	00ff      	lsls	r7, r7, #3
 8000fce:	4e30      	ldr	r6, [pc, #192]	; (8001090 <__aeabi_dadd+0x618>)
 8000fd0:	e5d6      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000fd2:	000c      	movs	r4, r1
 8000fd4:	0017      	movs	r7, r2
 8000fd6:	0006      	movs	r6, r0
 8000fd8:	e5d2      	b.n	8000b80 <__aeabi_dadd+0x108>
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d038      	beq.n	8001050 <__aeabi_dadd+0x5d8>
 8000fde:	000b      	movs	r3, r1
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x56e>
 8000fe4:	e742      	b.n	8000e6c <__aeabi_dadd+0x3f4>
 8000fe6:	08f8      	lsrs	r0, r7, #3
 8000fe8:	0767      	lsls	r7, r4, #29
 8000fea:	4307      	orrs	r7, r0
 8000fec:	2080      	movs	r0, #128	; 0x80
 8000fee:	08e4      	lsrs	r4, r4, #3
 8000ff0:	0300      	lsls	r0, r0, #12
 8000ff2:	4204      	tst	r4, r0
 8000ff4:	d0e7      	beq.n	8000fc6 <__aeabi_dadd+0x54e>
 8000ff6:	08cb      	lsrs	r3, r1, #3
 8000ff8:	4203      	tst	r3, r0
 8000ffa:	d1e4      	bne.n	8000fc6 <__aeabi_dadd+0x54e>
 8000ffc:	08d2      	lsrs	r2, r2, #3
 8000ffe:	0749      	lsls	r1, r1, #29
 8001000:	4311      	orrs	r1, r2
 8001002:	000f      	movs	r7, r1
 8001004:	001c      	movs	r4, r3
 8001006:	e7de      	b.n	8000fc6 <__aeabi_dadd+0x54e>
 8001008:	2700      	movs	r7, #0
 800100a:	2400      	movs	r4, #0
 800100c:	e5d5      	b.n	8000bba <__aeabi_dadd+0x142>
 800100e:	2100      	movs	r1, #0
 8001010:	e76b      	b.n	8000eea <__aeabi_dadd+0x472>
 8001012:	2500      	movs	r5, #0
 8001014:	2700      	movs	r7, #0
 8001016:	e5f3      	b.n	8000c00 <__aeabi_dadd+0x188>
 8001018:	464e      	mov	r6, r9
 800101a:	0025      	movs	r5, r4
 800101c:	3e20      	subs	r6, #32
 800101e:	40f5      	lsrs	r5, r6
 8001020:	464b      	mov	r3, r9
 8001022:	002e      	movs	r6, r5
 8001024:	2b20      	cmp	r3, #32
 8001026:	d02d      	beq.n	8001084 <__aeabi_dadd+0x60c>
 8001028:	2540      	movs	r5, #64	; 0x40
 800102a:	1aed      	subs	r5, r5, r3
 800102c:	40ac      	lsls	r4, r5
 800102e:	4327      	orrs	r7, r4
 8001030:	1e7c      	subs	r4, r7, #1
 8001032:	41a7      	sbcs	r7, r4
 8001034:	2400      	movs	r4, #0
 8001036:	4337      	orrs	r7, r6
 8001038:	e6c9      	b.n	8000dce <__aeabi_dadd+0x356>
 800103a:	2480      	movs	r4, #128	; 0x80
 800103c:	2500      	movs	r5, #0
 800103e:	0324      	lsls	r4, r4, #12
 8001040:	4e13      	ldr	r6, [pc, #76]	; (8001090 <__aeabi_dadd+0x618>)
 8001042:	2700      	movs	r7, #0
 8001044:	e5dc      	b.n	8000c00 <__aeabi_dadd+0x188>
 8001046:	4327      	orrs	r7, r4
 8001048:	1e7c      	subs	r4, r7, #1
 800104a:	41a7      	sbcs	r7, r4
 800104c:	2400      	movs	r4, #0
 800104e:	e779      	b.n	8000f44 <__aeabi_dadd+0x4cc>
 8001050:	000c      	movs	r4, r1
 8001052:	0017      	movs	r7, r2
 8001054:	4e0e      	ldr	r6, [pc, #56]	; (8001090 <__aeabi_dadd+0x618>)
 8001056:	e593      	b.n	8000b80 <__aeabi_dadd+0x108>
 8001058:	000c      	movs	r4, r1
 800105a:	0017      	movs	r7, r2
 800105c:	e590      	b.n	8000b80 <__aeabi_dadd+0x108>
 800105e:	4656      	mov	r6, sl
 8001060:	0023      	movs	r3, r4
 8001062:	3e20      	subs	r6, #32
 8001064:	40f3      	lsrs	r3, r6
 8001066:	4699      	mov	r9, r3
 8001068:	4653      	mov	r3, sl
 800106a:	2b20      	cmp	r3, #32
 800106c:	d00e      	beq.n	800108c <__aeabi_dadd+0x614>
 800106e:	2340      	movs	r3, #64	; 0x40
 8001070:	4656      	mov	r6, sl
 8001072:	1b9b      	subs	r3, r3, r6
 8001074:	409c      	lsls	r4, r3
 8001076:	4327      	orrs	r7, r4
 8001078:	1e7c      	subs	r4, r7, #1
 800107a:	41a7      	sbcs	r7, r4
 800107c:	464b      	mov	r3, r9
 800107e:	2400      	movs	r4, #0
 8001080:	431f      	orrs	r7, r3
 8001082:	e75f      	b.n	8000f44 <__aeabi_dadd+0x4cc>
 8001084:	2400      	movs	r4, #0
 8001086:	e7d2      	b.n	800102e <__aeabi_dadd+0x5b6>
 8001088:	0017      	movs	r7, r2
 800108a:	e5b2      	b.n	8000bf2 <__aeabi_dadd+0x17a>
 800108c:	2400      	movs	r4, #0
 800108e:	e7f2      	b.n	8001076 <__aeabi_dadd+0x5fe>
 8001090:	000007ff 	.word	0x000007ff
 8001094:	ff7fffff 	.word	0xff7fffff

08001098 <__aeabi_ddiv>:
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	4657      	mov	r7, sl
 800109c:	4645      	mov	r5, r8
 800109e:	46de      	mov	lr, fp
 80010a0:	464e      	mov	r6, r9
 80010a2:	b5e0      	push	{r5, r6, r7, lr}
 80010a4:	004c      	lsls	r4, r1, #1
 80010a6:	030e      	lsls	r6, r1, #12
 80010a8:	b087      	sub	sp, #28
 80010aa:	4683      	mov	fp, r0
 80010ac:	4692      	mov	sl, r2
 80010ae:	001d      	movs	r5, r3
 80010b0:	4680      	mov	r8, r0
 80010b2:	0b36      	lsrs	r6, r6, #12
 80010b4:	0d64      	lsrs	r4, r4, #21
 80010b6:	0fcf      	lsrs	r7, r1, #31
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d04f      	beq.n	800115c <__aeabi_ddiv+0xc4>
 80010bc:	4b6f      	ldr	r3, [pc, #444]	; (800127c <__aeabi_ddiv+0x1e4>)
 80010be:	429c      	cmp	r4, r3
 80010c0:	d035      	beq.n	800112e <__aeabi_ddiv+0x96>
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	0f42      	lsrs	r2, r0, #29
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	00f6      	lsls	r6, r6, #3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	4333      	orrs	r3, r6
 80010ce:	4699      	mov	r9, r3
 80010d0:	00c3      	lsls	r3, r0, #3
 80010d2:	4698      	mov	r8, r3
 80010d4:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <__aeabi_ddiv+0x1e8>)
 80010d6:	2600      	movs	r6, #0
 80010d8:	469c      	mov	ip, r3
 80010da:	2300      	movs	r3, #0
 80010dc:	4464      	add	r4, ip
 80010de:	9303      	str	r3, [sp, #12]
 80010e0:	032b      	lsls	r3, r5, #12
 80010e2:	0b1b      	lsrs	r3, r3, #12
 80010e4:	469b      	mov	fp, r3
 80010e6:	006b      	lsls	r3, r5, #1
 80010e8:	0fed      	lsrs	r5, r5, #31
 80010ea:	4650      	mov	r0, sl
 80010ec:	0d5b      	lsrs	r3, r3, #21
 80010ee:	9501      	str	r5, [sp, #4]
 80010f0:	d05e      	beq.n	80011b0 <__aeabi_ddiv+0x118>
 80010f2:	4a62      	ldr	r2, [pc, #392]	; (800127c <__aeabi_ddiv+0x1e4>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d053      	beq.n	80011a0 <__aeabi_ddiv+0x108>
 80010f8:	465a      	mov	r2, fp
 80010fa:	00d1      	lsls	r1, r2, #3
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0f40      	lsrs	r0, r0, #29
 8001100:	0412      	lsls	r2, r2, #16
 8001102:	4302      	orrs	r2, r0
 8001104:	430a      	orrs	r2, r1
 8001106:	4693      	mov	fp, r2
 8001108:	4652      	mov	r2, sl
 800110a:	00d1      	lsls	r1, r2, #3
 800110c:	4a5c      	ldr	r2, [pc, #368]	; (8001280 <__aeabi_ddiv+0x1e8>)
 800110e:	4694      	mov	ip, r2
 8001110:	2200      	movs	r2, #0
 8001112:	4463      	add	r3, ip
 8001114:	0038      	movs	r0, r7
 8001116:	4068      	eors	r0, r5
 8001118:	4684      	mov	ip, r0
 800111a:	9002      	str	r0, [sp, #8]
 800111c:	1ae4      	subs	r4, r4, r3
 800111e:	4316      	orrs	r6, r2
 8001120:	2e0f      	cmp	r6, #15
 8001122:	d900      	bls.n	8001126 <__aeabi_ddiv+0x8e>
 8001124:	e0b4      	b.n	8001290 <__aeabi_ddiv+0x1f8>
 8001126:	4b57      	ldr	r3, [pc, #348]	; (8001284 <__aeabi_ddiv+0x1ec>)
 8001128:	00b6      	lsls	r6, r6, #2
 800112a:	599b      	ldr	r3, [r3, r6]
 800112c:	469f      	mov	pc, r3
 800112e:	0003      	movs	r3, r0
 8001130:	4333      	orrs	r3, r6
 8001132:	4699      	mov	r9, r3
 8001134:	d16c      	bne.n	8001210 <__aeabi_ddiv+0x178>
 8001136:	2300      	movs	r3, #0
 8001138:	4698      	mov	r8, r3
 800113a:	3302      	adds	r3, #2
 800113c:	2608      	movs	r6, #8
 800113e:	9303      	str	r3, [sp, #12]
 8001140:	e7ce      	b.n	80010e0 <__aeabi_ddiv+0x48>
 8001142:	46cb      	mov	fp, r9
 8001144:	4641      	mov	r1, r8
 8001146:	9a03      	ldr	r2, [sp, #12]
 8001148:	9701      	str	r7, [sp, #4]
 800114a:	2a02      	cmp	r2, #2
 800114c:	d165      	bne.n	800121a <__aeabi_ddiv+0x182>
 800114e:	9b01      	ldr	r3, [sp, #4]
 8001150:	4c4a      	ldr	r4, [pc, #296]	; (800127c <__aeabi_ddiv+0x1e4>)
 8001152:	469c      	mov	ip, r3
 8001154:	2300      	movs	r3, #0
 8001156:	2200      	movs	r2, #0
 8001158:	4698      	mov	r8, r3
 800115a:	e06b      	b.n	8001234 <__aeabi_ddiv+0x19c>
 800115c:	0003      	movs	r3, r0
 800115e:	4333      	orrs	r3, r6
 8001160:	4699      	mov	r9, r3
 8001162:	d04e      	beq.n	8001202 <__aeabi_ddiv+0x16a>
 8001164:	2e00      	cmp	r6, #0
 8001166:	d100      	bne.n	800116a <__aeabi_ddiv+0xd2>
 8001168:	e1bc      	b.n	80014e4 <__aeabi_ddiv+0x44c>
 800116a:	0030      	movs	r0, r6
 800116c:	f001 fa3a 	bl	80025e4 <__clzsi2>
 8001170:	0003      	movs	r3, r0
 8001172:	3b0b      	subs	r3, #11
 8001174:	2b1c      	cmp	r3, #28
 8001176:	dd00      	ble.n	800117a <__aeabi_ddiv+0xe2>
 8001178:	e1ac      	b.n	80014d4 <__aeabi_ddiv+0x43c>
 800117a:	221d      	movs	r2, #29
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	465a      	mov	r2, fp
 8001180:	0001      	movs	r1, r0
 8001182:	40da      	lsrs	r2, r3
 8001184:	3908      	subs	r1, #8
 8001186:	408e      	lsls	r6, r1
 8001188:	0013      	movs	r3, r2
 800118a:	4333      	orrs	r3, r6
 800118c:	4699      	mov	r9, r3
 800118e:	465b      	mov	r3, fp
 8001190:	408b      	lsls	r3, r1
 8001192:	4698      	mov	r8, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4c3c      	ldr	r4, [pc, #240]	; (8001288 <__aeabi_ddiv+0x1f0>)
 8001198:	2600      	movs	r6, #0
 800119a:	1a24      	subs	r4, r4, r0
 800119c:	9303      	str	r3, [sp, #12]
 800119e:	e79f      	b.n	80010e0 <__aeabi_ddiv+0x48>
 80011a0:	4651      	mov	r1, sl
 80011a2:	465a      	mov	r2, fp
 80011a4:	4311      	orrs	r1, r2
 80011a6:	d129      	bne.n	80011fc <__aeabi_ddiv+0x164>
 80011a8:	2200      	movs	r2, #0
 80011aa:	4693      	mov	fp, r2
 80011ac:	3202      	adds	r2, #2
 80011ae:	e7b1      	b.n	8001114 <__aeabi_ddiv+0x7c>
 80011b0:	4659      	mov	r1, fp
 80011b2:	4301      	orrs	r1, r0
 80011b4:	d01e      	beq.n	80011f4 <__aeabi_ddiv+0x15c>
 80011b6:	465b      	mov	r3, fp
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_ddiv+0x126>
 80011bc:	e19e      	b.n	80014fc <__aeabi_ddiv+0x464>
 80011be:	4658      	mov	r0, fp
 80011c0:	f001 fa10 	bl	80025e4 <__clzsi2>
 80011c4:	0003      	movs	r3, r0
 80011c6:	3b0b      	subs	r3, #11
 80011c8:	2b1c      	cmp	r3, #28
 80011ca:	dd00      	ble.n	80011ce <__aeabi_ddiv+0x136>
 80011cc:	e18f      	b.n	80014ee <__aeabi_ddiv+0x456>
 80011ce:	0002      	movs	r2, r0
 80011d0:	4659      	mov	r1, fp
 80011d2:	3a08      	subs	r2, #8
 80011d4:	4091      	lsls	r1, r2
 80011d6:	468b      	mov	fp, r1
 80011d8:	211d      	movs	r1, #29
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	4651      	mov	r1, sl
 80011de:	40d9      	lsrs	r1, r3
 80011e0:	000b      	movs	r3, r1
 80011e2:	4659      	mov	r1, fp
 80011e4:	430b      	orrs	r3, r1
 80011e6:	4651      	mov	r1, sl
 80011e8:	469b      	mov	fp, r3
 80011ea:	4091      	lsls	r1, r2
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <__aeabi_ddiv+0x1f0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	1a1b      	subs	r3, r3, r0
 80011f2:	e78f      	b.n	8001114 <__aeabi_ddiv+0x7c>
 80011f4:	2300      	movs	r3, #0
 80011f6:	2201      	movs	r2, #1
 80011f8:	469b      	mov	fp, r3
 80011fa:	e78b      	b.n	8001114 <__aeabi_ddiv+0x7c>
 80011fc:	4651      	mov	r1, sl
 80011fe:	2203      	movs	r2, #3
 8001200:	e788      	b.n	8001114 <__aeabi_ddiv+0x7c>
 8001202:	2300      	movs	r3, #0
 8001204:	4698      	mov	r8, r3
 8001206:	3301      	adds	r3, #1
 8001208:	2604      	movs	r6, #4
 800120a:	2400      	movs	r4, #0
 800120c:	9303      	str	r3, [sp, #12]
 800120e:	e767      	b.n	80010e0 <__aeabi_ddiv+0x48>
 8001210:	2303      	movs	r3, #3
 8001212:	46b1      	mov	r9, r6
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	260c      	movs	r6, #12
 8001218:	e762      	b.n	80010e0 <__aeabi_ddiv+0x48>
 800121a:	2a03      	cmp	r2, #3
 800121c:	d100      	bne.n	8001220 <__aeabi_ddiv+0x188>
 800121e:	e25c      	b.n	80016da <__aeabi_ddiv+0x642>
 8001220:	9b01      	ldr	r3, [sp, #4]
 8001222:	2a01      	cmp	r2, #1
 8001224:	d000      	beq.n	8001228 <__aeabi_ddiv+0x190>
 8001226:	e1e4      	b.n	80015f2 <__aeabi_ddiv+0x55a>
 8001228:	4013      	ands	r3, r2
 800122a:	469c      	mov	ip, r3
 800122c:	2300      	movs	r3, #0
 800122e:	2400      	movs	r4, #0
 8001230:	2200      	movs	r2, #0
 8001232:	4698      	mov	r8, r3
 8001234:	2100      	movs	r1, #0
 8001236:	0312      	lsls	r2, r2, #12
 8001238:	0b13      	lsrs	r3, r2, #12
 800123a:	0d0a      	lsrs	r2, r1, #20
 800123c:	0512      	lsls	r2, r2, #20
 800123e:	431a      	orrs	r2, r3
 8001240:	0523      	lsls	r3, r4, #20
 8001242:	4c12      	ldr	r4, [pc, #72]	; (800128c <__aeabi_ddiv+0x1f4>)
 8001244:	4640      	mov	r0, r8
 8001246:	4022      	ands	r2, r4
 8001248:	4313      	orrs	r3, r2
 800124a:	4662      	mov	r2, ip
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	07d2      	lsls	r2, r2, #31
 8001250:	085b      	lsrs	r3, r3, #1
 8001252:	4313      	orrs	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	b007      	add	sp, #28
 8001258:	bc3c      	pop	{r2, r3, r4, r5}
 800125a:	4690      	mov	r8, r2
 800125c:	4699      	mov	r9, r3
 800125e:	46a2      	mov	sl, r4
 8001260:	46ab      	mov	fp, r5
 8001262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001264:	2300      	movs	r3, #0
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	469c      	mov	ip, r3
 800126a:	0312      	lsls	r2, r2, #12
 800126c:	4698      	mov	r8, r3
 800126e:	4c03      	ldr	r4, [pc, #12]	; (800127c <__aeabi_ddiv+0x1e4>)
 8001270:	e7e0      	b.n	8001234 <__aeabi_ddiv+0x19c>
 8001272:	2300      	movs	r3, #0
 8001274:	4c01      	ldr	r4, [pc, #4]	; (800127c <__aeabi_ddiv+0x1e4>)
 8001276:	2200      	movs	r2, #0
 8001278:	4698      	mov	r8, r3
 800127a:	e7db      	b.n	8001234 <__aeabi_ddiv+0x19c>
 800127c:	000007ff 	.word	0x000007ff
 8001280:	fffffc01 	.word	0xfffffc01
 8001284:	08004c00 	.word	0x08004c00
 8001288:	fffffc0d 	.word	0xfffffc0d
 800128c:	800fffff 	.word	0x800fffff
 8001290:	45d9      	cmp	r9, fp
 8001292:	d900      	bls.n	8001296 <__aeabi_ddiv+0x1fe>
 8001294:	e139      	b.n	800150a <__aeabi_ddiv+0x472>
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x202>
 8001298:	e134      	b.n	8001504 <__aeabi_ddiv+0x46c>
 800129a:	2300      	movs	r3, #0
 800129c:	4646      	mov	r6, r8
 800129e:	464d      	mov	r5, r9
 80012a0:	469a      	mov	sl, r3
 80012a2:	3c01      	subs	r4, #1
 80012a4:	465b      	mov	r3, fp
 80012a6:	0e0a      	lsrs	r2, r1, #24
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	431a      	orrs	r2, r3
 80012ac:	020b      	lsls	r3, r1, #8
 80012ae:	0c17      	lsrs	r7, r2, #16
 80012b0:	9303      	str	r3, [sp, #12]
 80012b2:	0413      	lsls	r3, r2, #16
 80012b4:	0c1b      	lsrs	r3, r3, #16
 80012b6:	0039      	movs	r1, r7
 80012b8:	0028      	movs	r0, r5
 80012ba:	4690      	mov	r8, r2
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f7fe ff2d 	bl	800011c <__udivsi3>
 80012c2:	0002      	movs	r2, r0
 80012c4:	9b01      	ldr	r3, [sp, #4]
 80012c6:	4683      	mov	fp, r0
 80012c8:	435a      	muls	r2, r3
 80012ca:	0028      	movs	r0, r5
 80012cc:	0039      	movs	r1, r7
 80012ce:	4691      	mov	r9, r2
 80012d0:	f7fe ffaa 	bl	8000228 <__aeabi_uidivmod>
 80012d4:	0c35      	lsrs	r5, r6, #16
 80012d6:	0409      	lsls	r1, r1, #16
 80012d8:	430d      	orrs	r5, r1
 80012da:	45a9      	cmp	r9, r5
 80012dc:	d90d      	bls.n	80012fa <__aeabi_ddiv+0x262>
 80012de:	465b      	mov	r3, fp
 80012e0:	4445      	add	r5, r8
 80012e2:	3b01      	subs	r3, #1
 80012e4:	45a8      	cmp	r8, r5
 80012e6:	d900      	bls.n	80012ea <__aeabi_ddiv+0x252>
 80012e8:	e13a      	b.n	8001560 <__aeabi_ddiv+0x4c8>
 80012ea:	45a9      	cmp	r9, r5
 80012ec:	d800      	bhi.n	80012f0 <__aeabi_ddiv+0x258>
 80012ee:	e137      	b.n	8001560 <__aeabi_ddiv+0x4c8>
 80012f0:	2302      	movs	r3, #2
 80012f2:	425b      	negs	r3, r3
 80012f4:	469c      	mov	ip, r3
 80012f6:	4445      	add	r5, r8
 80012f8:	44e3      	add	fp, ip
 80012fa:	464b      	mov	r3, r9
 80012fc:	1aeb      	subs	r3, r5, r3
 80012fe:	0039      	movs	r1, r7
 8001300:	0018      	movs	r0, r3
 8001302:	9304      	str	r3, [sp, #16]
 8001304:	f7fe ff0a 	bl	800011c <__udivsi3>
 8001308:	9b01      	ldr	r3, [sp, #4]
 800130a:	0005      	movs	r5, r0
 800130c:	4343      	muls	r3, r0
 800130e:	0039      	movs	r1, r7
 8001310:	9804      	ldr	r0, [sp, #16]
 8001312:	4699      	mov	r9, r3
 8001314:	f7fe ff88 	bl	8000228 <__aeabi_uidivmod>
 8001318:	0433      	lsls	r3, r6, #16
 800131a:	0409      	lsls	r1, r1, #16
 800131c:	0c1b      	lsrs	r3, r3, #16
 800131e:	430b      	orrs	r3, r1
 8001320:	4599      	cmp	r9, r3
 8001322:	d909      	bls.n	8001338 <__aeabi_ddiv+0x2a0>
 8001324:	4443      	add	r3, r8
 8001326:	1e6a      	subs	r2, r5, #1
 8001328:	4598      	cmp	r8, r3
 800132a:	d900      	bls.n	800132e <__aeabi_ddiv+0x296>
 800132c:	e11a      	b.n	8001564 <__aeabi_ddiv+0x4cc>
 800132e:	4599      	cmp	r9, r3
 8001330:	d800      	bhi.n	8001334 <__aeabi_ddiv+0x29c>
 8001332:	e117      	b.n	8001564 <__aeabi_ddiv+0x4cc>
 8001334:	3d02      	subs	r5, #2
 8001336:	4443      	add	r3, r8
 8001338:	464a      	mov	r2, r9
 800133a:	1a9b      	subs	r3, r3, r2
 800133c:	465a      	mov	r2, fp
 800133e:	0412      	lsls	r2, r2, #16
 8001340:	432a      	orrs	r2, r5
 8001342:	9903      	ldr	r1, [sp, #12]
 8001344:	4693      	mov	fp, r2
 8001346:	0c10      	lsrs	r0, r2, #16
 8001348:	0c0a      	lsrs	r2, r1, #16
 800134a:	4691      	mov	r9, r2
 800134c:	0409      	lsls	r1, r1, #16
 800134e:	465a      	mov	r2, fp
 8001350:	0c09      	lsrs	r1, r1, #16
 8001352:	464e      	mov	r6, r9
 8001354:	000d      	movs	r5, r1
 8001356:	0412      	lsls	r2, r2, #16
 8001358:	0c12      	lsrs	r2, r2, #16
 800135a:	4345      	muls	r5, r0
 800135c:	9105      	str	r1, [sp, #20]
 800135e:	4351      	muls	r1, r2
 8001360:	4372      	muls	r2, r6
 8001362:	4370      	muls	r0, r6
 8001364:	1952      	adds	r2, r2, r5
 8001366:	0c0e      	lsrs	r6, r1, #16
 8001368:	18b2      	adds	r2, r6, r2
 800136a:	4295      	cmp	r5, r2
 800136c:	d903      	bls.n	8001376 <__aeabi_ddiv+0x2de>
 800136e:	2580      	movs	r5, #128	; 0x80
 8001370:	026d      	lsls	r5, r5, #9
 8001372:	46ac      	mov	ip, r5
 8001374:	4460      	add	r0, ip
 8001376:	0c15      	lsrs	r5, r2, #16
 8001378:	0409      	lsls	r1, r1, #16
 800137a:	0412      	lsls	r2, r2, #16
 800137c:	0c09      	lsrs	r1, r1, #16
 800137e:	1828      	adds	r0, r5, r0
 8001380:	1852      	adds	r2, r2, r1
 8001382:	4283      	cmp	r3, r0
 8001384:	d200      	bcs.n	8001388 <__aeabi_ddiv+0x2f0>
 8001386:	e0ce      	b.n	8001526 <__aeabi_ddiv+0x48e>
 8001388:	d100      	bne.n	800138c <__aeabi_ddiv+0x2f4>
 800138a:	e0c8      	b.n	800151e <__aeabi_ddiv+0x486>
 800138c:	1a1d      	subs	r5, r3, r0
 800138e:	4653      	mov	r3, sl
 8001390:	1a9e      	subs	r6, r3, r2
 8001392:	45b2      	cmp	sl, r6
 8001394:	4192      	sbcs	r2, r2
 8001396:	4252      	negs	r2, r2
 8001398:	1aab      	subs	r3, r5, r2
 800139a:	469a      	mov	sl, r3
 800139c:	4598      	cmp	r8, r3
 800139e:	d100      	bne.n	80013a2 <__aeabi_ddiv+0x30a>
 80013a0:	e117      	b.n	80015d2 <__aeabi_ddiv+0x53a>
 80013a2:	0039      	movs	r1, r7
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7fe feb9 	bl	800011c <__udivsi3>
 80013aa:	9b01      	ldr	r3, [sp, #4]
 80013ac:	0005      	movs	r5, r0
 80013ae:	4343      	muls	r3, r0
 80013b0:	0039      	movs	r1, r7
 80013b2:	4650      	mov	r0, sl
 80013b4:	9304      	str	r3, [sp, #16]
 80013b6:	f7fe ff37 	bl	8000228 <__aeabi_uidivmod>
 80013ba:	9804      	ldr	r0, [sp, #16]
 80013bc:	040b      	lsls	r3, r1, #16
 80013be:	0c31      	lsrs	r1, r6, #16
 80013c0:	4319      	orrs	r1, r3
 80013c2:	4288      	cmp	r0, r1
 80013c4:	d909      	bls.n	80013da <__aeabi_ddiv+0x342>
 80013c6:	4441      	add	r1, r8
 80013c8:	1e6b      	subs	r3, r5, #1
 80013ca:	4588      	cmp	r8, r1
 80013cc:	d900      	bls.n	80013d0 <__aeabi_ddiv+0x338>
 80013ce:	e107      	b.n	80015e0 <__aeabi_ddiv+0x548>
 80013d0:	4288      	cmp	r0, r1
 80013d2:	d800      	bhi.n	80013d6 <__aeabi_ddiv+0x33e>
 80013d4:	e104      	b.n	80015e0 <__aeabi_ddiv+0x548>
 80013d6:	3d02      	subs	r5, #2
 80013d8:	4441      	add	r1, r8
 80013da:	9b04      	ldr	r3, [sp, #16]
 80013dc:	1acb      	subs	r3, r1, r3
 80013de:	0018      	movs	r0, r3
 80013e0:	0039      	movs	r1, r7
 80013e2:	9304      	str	r3, [sp, #16]
 80013e4:	f7fe fe9a 	bl	800011c <__udivsi3>
 80013e8:	9b01      	ldr	r3, [sp, #4]
 80013ea:	4682      	mov	sl, r0
 80013ec:	4343      	muls	r3, r0
 80013ee:	0039      	movs	r1, r7
 80013f0:	9804      	ldr	r0, [sp, #16]
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	f7fe ff18 	bl	8000228 <__aeabi_uidivmod>
 80013f8:	9801      	ldr	r0, [sp, #4]
 80013fa:	040b      	lsls	r3, r1, #16
 80013fc:	0431      	lsls	r1, r6, #16
 80013fe:	0c09      	lsrs	r1, r1, #16
 8001400:	4319      	orrs	r1, r3
 8001402:	4288      	cmp	r0, r1
 8001404:	d90d      	bls.n	8001422 <__aeabi_ddiv+0x38a>
 8001406:	4653      	mov	r3, sl
 8001408:	4441      	add	r1, r8
 800140a:	3b01      	subs	r3, #1
 800140c:	4588      	cmp	r8, r1
 800140e:	d900      	bls.n	8001412 <__aeabi_ddiv+0x37a>
 8001410:	e0e8      	b.n	80015e4 <__aeabi_ddiv+0x54c>
 8001412:	4288      	cmp	r0, r1
 8001414:	d800      	bhi.n	8001418 <__aeabi_ddiv+0x380>
 8001416:	e0e5      	b.n	80015e4 <__aeabi_ddiv+0x54c>
 8001418:	2302      	movs	r3, #2
 800141a:	425b      	negs	r3, r3
 800141c:	469c      	mov	ip, r3
 800141e:	4441      	add	r1, r8
 8001420:	44e2      	add	sl, ip
 8001422:	9b01      	ldr	r3, [sp, #4]
 8001424:	042d      	lsls	r5, r5, #16
 8001426:	1ace      	subs	r6, r1, r3
 8001428:	4651      	mov	r1, sl
 800142a:	4329      	orrs	r1, r5
 800142c:	9d05      	ldr	r5, [sp, #20]
 800142e:	464f      	mov	r7, r9
 8001430:	002a      	movs	r2, r5
 8001432:	040b      	lsls	r3, r1, #16
 8001434:	0c08      	lsrs	r0, r1, #16
 8001436:	0c1b      	lsrs	r3, r3, #16
 8001438:	435a      	muls	r2, r3
 800143a:	4345      	muls	r5, r0
 800143c:	437b      	muls	r3, r7
 800143e:	4378      	muls	r0, r7
 8001440:	195b      	adds	r3, r3, r5
 8001442:	0c17      	lsrs	r7, r2, #16
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	429d      	cmp	r5, r3
 8001448:	d903      	bls.n	8001452 <__aeabi_ddiv+0x3ba>
 800144a:	2580      	movs	r5, #128	; 0x80
 800144c:	026d      	lsls	r5, r5, #9
 800144e:	46ac      	mov	ip, r5
 8001450:	4460      	add	r0, ip
 8001452:	0c1d      	lsrs	r5, r3, #16
 8001454:	0412      	lsls	r2, r2, #16
 8001456:	041b      	lsls	r3, r3, #16
 8001458:	0c12      	lsrs	r2, r2, #16
 800145a:	1828      	adds	r0, r5, r0
 800145c:	189b      	adds	r3, r3, r2
 800145e:	4286      	cmp	r6, r0
 8001460:	d200      	bcs.n	8001464 <__aeabi_ddiv+0x3cc>
 8001462:	e093      	b.n	800158c <__aeabi_ddiv+0x4f4>
 8001464:	d100      	bne.n	8001468 <__aeabi_ddiv+0x3d0>
 8001466:	e08e      	b.n	8001586 <__aeabi_ddiv+0x4ee>
 8001468:	2301      	movs	r3, #1
 800146a:	4319      	orrs	r1, r3
 800146c:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <__aeabi_ddiv+0x658>)
 800146e:	18e3      	adds	r3, r4, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	dc00      	bgt.n	8001476 <__aeabi_ddiv+0x3de>
 8001474:	e099      	b.n	80015aa <__aeabi_ddiv+0x512>
 8001476:	074a      	lsls	r2, r1, #29
 8001478:	d000      	beq.n	800147c <__aeabi_ddiv+0x3e4>
 800147a:	e09e      	b.n	80015ba <__aeabi_ddiv+0x522>
 800147c:	465a      	mov	r2, fp
 800147e:	01d2      	lsls	r2, r2, #7
 8001480:	d506      	bpl.n	8001490 <__aeabi_ddiv+0x3f8>
 8001482:	465a      	mov	r2, fp
 8001484:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <__aeabi_ddiv+0x65c>)
 8001486:	401a      	ands	r2, r3
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	4693      	mov	fp, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	18e3      	adds	r3, r4, r3
 8001490:	4a99      	ldr	r2, [pc, #612]	; (80016f8 <__aeabi_ddiv+0x660>)
 8001492:	4293      	cmp	r3, r2
 8001494:	dd68      	ble.n	8001568 <__aeabi_ddiv+0x4d0>
 8001496:	2301      	movs	r3, #1
 8001498:	9a02      	ldr	r2, [sp, #8]
 800149a:	4c98      	ldr	r4, [pc, #608]	; (80016fc <__aeabi_ddiv+0x664>)
 800149c:	401a      	ands	r2, r3
 800149e:	2300      	movs	r3, #0
 80014a0:	4694      	mov	ip, r2
 80014a2:	4698      	mov	r8, r3
 80014a4:	2200      	movs	r2, #0
 80014a6:	e6c5      	b.n	8001234 <__aeabi_ddiv+0x19c>
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	464b      	mov	r3, r9
 80014ac:	0312      	lsls	r2, r2, #12
 80014ae:	4213      	tst	r3, r2
 80014b0:	d00a      	beq.n	80014c8 <__aeabi_ddiv+0x430>
 80014b2:	465b      	mov	r3, fp
 80014b4:	4213      	tst	r3, r2
 80014b6:	d106      	bne.n	80014c6 <__aeabi_ddiv+0x42e>
 80014b8:	431a      	orrs	r2, r3
 80014ba:	0312      	lsls	r2, r2, #12
 80014bc:	0b12      	lsrs	r2, r2, #12
 80014be:	46ac      	mov	ip, r5
 80014c0:	4688      	mov	r8, r1
 80014c2:	4c8e      	ldr	r4, [pc, #568]	; (80016fc <__aeabi_ddiv+0x664>)
 80014c4:	e6b6      	b.n	8001234 <__aeabi_ddiv+0x19c>
 80014c6:	464b      	mov	r3, r9
 80014c8:	431a      	orrs	r2, r3
 80014ca:	0312      	lsls	r2, r2, #12
 80014cc:	0b12      	lsrs	r2, r2, #12
 80014ce:	46bc      	mov	ip, r7
 80014d0:	4c8a      	ldr	r4, [pc, #552]	; (80016fc <__aeabi_ddiv+0x664>)
 80014d2:	e6af      	b.n	8001234 <__aeabi_ddiv+0x19c>
 80014d4:	0003      	movs	r3, r0
 80014d6:	465a      	mov	r2, fp
 80014d8:	3b28      	subs	r3, #40	; 0x28
 80014da:	409a      	lsls	r2, r3
 80014dc:	2300      	movs	r3, #0
 80014de:	4691      	mov	r9, r2
 80014e0:	4698      	mov	r8, r3
 80014e2:	e657      	b.n	8001194 <__aeabi_ddiv+0xfc>
 80014e4:	4658      	mov	r0, fp
 80014e6:	f001 f87d 	bl	80025e4 <__clzsi2>
 80014ea:	3020      	adds	r0, #32
 80014ec:	e640      	b.n	8001170 <__aeabi_ddiv+0xd8>
 80014ee:	0003      	movs	r3, r0
 80014f0:	4652      	mov	r2, sl
 80014f2:	3b28      	subs	r3, #40	; 0x28
 80014f4:	409a      	lsls	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	4693      	mov	fp, r2
 80014fa:	e677      	b.n	80011ec <__aeabi_ddiv+0x154>
 80014fc:	f001 f872 	bl	80025e4 <__clzsi2>
 8001500:	3020      	adds	r0, #32
 8001502:	e65f      	b.n	80011c4 <__aeabi_ddiv+0x12c>
 8001504:	4588      	cmp	r8, r1
 8001506:	d200      	bcs.n	800150a <__aeabi_ddiv+0x472>
 8001508:	e6c7      	b.n	800129a <__aeabi_ddiv+0x202>
 800150a:	464b      	mov	r3, r9
 800150c:	07de      	lsls	r6, r3, #31
 800150e:	085d      	lsrs	r5, r3, #1
 8001510:	4643      	mov	r3, r8
 8001512:	085b      	lsrs	r3, r3, #1
 8001514:	431e      	orrs	r6, r3
 8001516:	4643      	mov	r3, r8
 8001518:	07db      	lsls	r3, r3, #31
 800151a:	469a      	mov	sl, r3
 800151c:	e6c2      	b.n	80012a4 <__aeabi_ddiv+0x20c>
 800151e:	2500      	movs	r5, #0
 8001520:	4592      	cmp	sl, r2
 8001522:	d300      	bcc.n	8001526 <__aeabi_ddiv+0x48e>
 8001524:	e733      	b.n	800138e <__aeabi_ddiv+0x2f6>
 8001526:	9e03      	ldr	r6, [sp, #12]
 8001528:	4659      	mov	r1, fp
 800152a:	46b4      	mov	ip, r6
 800152c:	44e2      	add	sl, ip
 800152e:	45b2      	cmp	sl, r6
 8001530:	41ad      	sbcs	r5, r5
 8001532:	426d      	negs	r5, r5
 8001534:	4445      	add	r5, r8
 8001536:	18eb      	adds	r3, r5, r3
 8001538:	3901      	subs	r1, #1
 800153a:	4598      	cmp	r8, r3
 800153c:	d207      	bcs.n	800154e <__aeabi_ddiv+0x4b6>
 800153e:	4298      	cmp	r0, r3
 8001540:	d900      	bls.n	8001544 <__aeabi_ddiv+0x4ac>
 8001542:	e07f      	b.n	8001644 <__aeabi_ddiv+0x5ac>
 8001544:	d100      	bne.n	8001548 <__aeabi_ddiv+0x4b0>
 8001546:	e0bc      	b.n	80016c2 <__aeabi_ddiv+0x62a>
 8001548:	1a1d      	subs	r5, r3, r0
 800154a:	468b      	mov	fp, r1
 800154c:	e71f      	b.n	800138e <__aeabi_ddiv+0x2f6>
 800154e:	4598      	cmp	r8, r3
 8001550:	d1fa      	bne.n	8001548 <__aeabi_ddiv+0x4b0>
 8001552:	9d03      	ldr	r5, [sp, #12]
 8001554:	4555      	cmp	r5, sl
 8001556:	d9f2      	bls.n	800153e <__aeabi_ddiv+0x4a6>
 8001558:	4643      	mov	r3, r8
 800155a:	468b      	mov	fp, r1
 800155c:	1a1d      	subs	r5, r3, r0
 800155e:	e716      	b.n	800138e <__aeabi_ddiv+0x2f6>
 8001560:	469b      	mov	fp, r3
 8001562:	e6ca      	b.n	80012fa <__aeabi_ddiv+0x262>
 8001564:	0015      	movs	r5, r2
 8001566:	e6e7      	b.n	8001338 <__aeabi_ddiv+0x2a0>
 8001568:	465a      	mov	r2, fp
 800156a:	08c9      	lsrs	r1, r1, #3
 800156c:	0752      	lsls	r2, r2, #29
 800156e:	430a      	orrs	r2, r1
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4690      	mov	r8, r2
 8001574:	0d5c      	lsrs	r4, r3, #21
 8001576:	465a      	mov	r2, fp
 8001578:	2301      	movs	r3, #1
 800157a:	9902      	ldr	r1, [sp, #8]
 800157c:	0252      	lsls	r2, r2, #9
 800157e:	4019      	ands	r1, r3
 8001580:	0b12      	lsrs	r2, r2, #12
 8001582:	468c      	mov	ip, r1
 8001584:	e656      	b.n	8001234 <__aeabi_ddiv+0x19c>
 8001586:	2b00      	cmp	r3, #0
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x4f4>
 800158a:	e76f      	b.n	800146c <__aeabi_ddiv+0x3d4>
 800158c:	4446      	add	r6, r8
 800158e:	1e4a      	subs	r2, r1, #1
 8001590:	45b0      	cmp	r8, r6
 8001592:	d929      	bls.n	80015e8 <__aeabi_ddiv+0x550>
 8001594:	0011      	movs	r1, r2
 8001596:	4286      	cmp	r6, r0
 8001598:	d000      	beq.n	800159c <__aeabi_ddiv+0x504>
 800159a:	e765      	b.n	8001468 <__aeabi_ddiv+0x3d0>
 800159c:	9a03      	ldr	r2, [sp, #12]
 800159e:	4293      	cmp	r3, r2
 80015a0:	d000      	beq.n	80015a4 <__aeabi_ddiv+0x50c>
 80015a2:	e761      	b.n	8001468 <__aeabi_ddiv+0x3d0>
 80015a4:	e762      	b.n	800146c <__aeabi_ddiv+0x3d4>
 80015a6:	2101      	movs	r1, #1
 80015a8:	4249      	negs	r1, r1
 80015aa:	2001      	movs	r0, #1
 80015ac:	1ac2      	subs	r2, r0, r3
 80015ae:	2a38      	cmp	r2, #56	; 0x38
 80015b0:	dd21      	ble.n	80015f6 <__aeabi_ddiv+0x55e>
 80015b2:	9b02      	ldr	r3, [sp, #8]
 80015b4:	4003      	ands	r3, r0
 80015b6:	469c      	mov	ip, r3
 80015b8:	e638      	b.n	800122c <__aeabi_ddiv+0x194>
 80015ba:	220f      	movs	r2, #15
 80015bc:	400a      	ands	r2, r1
 80015be:	2a04      	cmp	r2, #4
 80015c0:	d100      	bne.n	80015c4 <__aeabi_ddiv+0x52c>
 80015c2:	e75b      	b.n	800147c <__aeabi_ddiv+0x3e4>
 80015c4:	000a      	movs	r2, r1
 80015c6:	1d11      	adds	r1, r2, #4
 80015c8:	4291      	cmp	r1, r2
 80015ca:	4192      	sbcs	r2, r2
 80015cc:	4252      	negs	r2, r2
 80015ce:	4493      	add	fp, r2
 80015d0:	e754      	b.n	800147c <__aeabi_ddiv+0x3e4>
 80015d2:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <__aeabi_ddiv+0x658>)
 80015d4:	18e3      	adds	r3, r4, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dde5      	ble.n	80015a6 <__aeabi_ddiv+0x50e>
 80015da:	2201      	movs	r2, #1
 80015dc:	4252      	negs	r2, r2
 80015de:	e7f2      	b.n	80015c6 <__aeabi_ddiv+0x52e>
 80015e0:	001d      	movs	r5, r3
 80015e2:	e6fa      	b.n	80013da <__aeabi_ddiv+0x342>
 80015e4:	469a      	mov	sl, r3
 80015e6:	e71c      	b.n	8001422 <__aeabi_ddiv+0x38a>
 80015e8:	42b0      	cmp	r0, r6
 80015ea:	d839      	bhi.n	8001660 <__aeabi_ddiv+0x5c8>
 80015ec:	d06e      	beq.n	80016cc <__aeabi_ddiv+0x634>
 80015ee:	0011      	movs	r1, r2
 80015f0:	e73a      	b.n	8001468 <__aeabi_ddiv+0x3d0>
 80015f2:	9302      	str	r3, [sp, #8]
 80015f4:	e73a      	b.n	800146c <__aeabi_ddiv+0x3d4>
 80015f6:	2a1f      	cmp	r2, #31
 80015f8:	dc3c      	bgt.n	8001674 <__aeabi_ddiv+0x5dc>
 80015fa:	2320      	movs	r3, #32
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	000c      	movs	r4, r1
 8001600:	4658      	mov	r0, fp
 8001602:	4099      	lsls	r1, r3
 8001604:	4098      	lsls	r0, r3
 8001606:	1e4b      	subs	r3, r1, #1
 8001608:	4199      	sbcs	r1, r3
 800160a:	465b      	mov	r3, fp
 800160c:	40d4      	lsrs	r4, r2
 800160e:	40d3      	lsrs	r3, r2
 8001610:	4320      	orrs	r0, r4
 8001612:	4308      	orrs	r0, r1
 8001614:	001a      	movs	r2, r3
 8001616:	0743      	lsls	r3, r0, #29
 8001618:	d009      	beq.n	800162e <__aeabi_ddiv+0x596>
 800161a:	230f      	movs	r3, #15
 800161c:	4003      	ands	r3, r0
 800161e:	2b04      	cmp	r3, #4
 8001620:	d005      	beq.n	800162e <__aeabi_ddiv+0x596>
 8001622:	0001      	movs	r1, r0
 8001624:	1d08      	adds	r0, r1, #4
 8001626:	4288      	cmp	r0, r1
 8001628:	419b      	sbcs	r3, r3
 800162a:	425b      	negs	r3, r3
 800162c:	18d2      	adds	r2, r2, r3
 800162e:	0213      	lsls	r3, r2, #8
 8001630:	d53a      	bpl.n	80016a8 <__aeabi_ddiv+0x610>
 8001632:	2301      	movs	r3, #1
 8001634:	9a02      	ldr	r2, [sp, #8]
 8001636:	2401      	movs	r4, #1
 8001638:	401a      	ands	r2, r3
 800163a:	2300      	movs	r3, #0
 800163c:	4694      	mov	ip, r2
 800163e:	4698      	mov	r8, r3
 8001640:	2200      	movs	r2, #0
 8001642:	e5f7      	b.n	8001234 <__aeabi_ddiv+0x19c>
 8001644:	2102      	movs	r1, #2
 8001646:	4249      	negs	r1, r1
 8001648:	468c      	mov	ip, r1
 800164a:	9d03      	ldr	r5, [sp, #12]
 800164c:	44e3      	add	fp, ip
 800164e:	46ac      	mov	ip, r5
 8001650:	44e2      	add	sl, ip
 8001652:	45aa      	cmp	sl, r5
 8001654:	41ad      	sbcs	r5, r5
 8001656:	426d      	negs	r5, r5
 8001658:	4445      	add	r5, r8
 800165a:	18ed      	adds	r5, r5, r3
 800165c:	1a2d      	subs	r5, r5, r0
 800165e:	e696      	b.n	800138e <__aeabi_ddiv+0x2f6>
 8001660:	1e8a      	subs	r2, r1, #2
 8001662:	9903      	ldr	r1, [sp, #12]
 8001664:	004d      	lsls	r5, r1, #1
 8001666:	428d      	cmp	r5, r1
 8001668:	4189      	sbcs	r1, r1
 800166a:	4249      	negs	r1, r1
 800166c:	4441      	add	r1, r8
 800166e:	1876      	adds	r6, r6, r1
 8001670:	9503      	str	r5, [sp, #12]
 8001672:	e78f      	b.n	8001594 <__aeabi_ddiv+0x4fc>
 8001674:	201f      	movs	r0, #31
 8001676:	4240      	negs	r0, r0
 8001678:	1ac3      	subs	r3, r0, r3
 800167a:	4658      	mov	r0, fp
 800167c:	40d8      	lsrs	r0, r3
 800167e:	0003      	movs	r3, r0
 8001680:	2a20      	cmp	r2, #32
 8001682:	d028      	beq.n	80016d6 <__aeabi_ddiv+0x63e>
 8001684:	2040      	movs	r0, #64	; 0x40
 8001686:	465d      	mov	r5, fp
 8001688:	1a82      	subs	r2, r0, r2
 800168a:	4095      	lsls	r5, r2
 800168c:	4329      	orrs	r1, r5
 800168e:	1e4a      	subs	r2, r1, #1
 8001690:	4191      	sbcs	r1, r2
 8001692:	4319      	orrs	r1, r3
 8001694:	2307      	movs	r3, #7
 8001696:	2200      	movs	r2, #0
 8001698:	400b      	ands	r3, r1
 800169a:	d009      	beq.n	80016b0 <__aeabi_ddiv+0x618>
 800169c:	230f      	movs	r3, #15
 800169e:	2200      	movs	r2, #0
 80016a0:	400b      	ands	r3, r1
 80016a2:	0008      	movs	r0, r1
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d1bd      	bne.n	8001624 <__aeabi_ddiv+0x58c>
 80016a8:	0001      	movs	r1, r0
 80016aa:	0753      	lsls	r3, r2, #29
 80016ac:	0252      	lsls	r2, r2, #9
 80016ae:	0b12      	lsrs	r2, r2, #12
 80016b0:	08c9      	lsrs	r1, r1, #3
 80016b2:	4319      	orrs	r1, r3
 80016b4:	2301      	movs	r3, #1
 80016b6:	4688      	mov	r8, r1
 80016b8:	9902      	ldr	r1, [sp, #8]
 80016ba:	2400      	movs	r4, #0
 80016bc:	4019      	ands	r1, r3
 80016be:	468c      	mov	ip, r1
 80016c0:	e5b8      	b.n	8001234 <__aeabi_ddiv+0x19c>
 80016c2:	4552      	cmp	r2, sl
 80016c4:	d8be      	bhi.n	8001644 <__aeabi_ddiv+0x5ac>
 80016c6:	468b      	mov	fp, r1
 80016c8:	2500      	movs	r5, #0
 80016ca:	e660      	b.n	800138e <__aeabi_ddiv+0x2f6>
 80016cc:	9d03      	ldr	r5, [sp, #12]
 80016ce:	429d      	cmp	r5, r3
 80016d0:	d3c6      	bcc.n	8001660 <__aeabi_ddiv+0x5c8>
 80016d2:	0011      	movs	r1, r2
 80016d4:	e762      	b.n	800159c <__aeabi_ddiv+0x504>
 80016d6:	2500      	movs	r5, #0
 80016d8:	e7d8      	b.n	800168c <__aeabi_ddiv+0x5f4>
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	465b      	mov	r3, fp
 80016de:	0312      	lsls	r2, r2, #12
 80016e0:	431a      	orrs	r2, r3
 80016e2:	9b01      	ldr	r3, [sp, #4]
 80016e4:	0312      	lsls	r2, r2, #12
 80016e6:	0b12      	lsrs	r2, r2, #12
 80016e8:	469c      	mov	ip, r3
 80016ea:	4688      	mov	r8, r1
 80016ec:	4c03      	ldr	r4, [pc, #12]	; (80016fc <__aeabi_ddiv+0x664>)
 80016ee:	e5a1      	b.n	8001234 <__aeabi_ddiv+0x19c>
 80016f0:	000003ff 	.word	0x000003ff
 80016f4:	feffffff 	.word	0xfeffffff
 80016f8:	000007fe 	.word	0x000007fe
 80016fc:	000007ff 	.word	0x000007ff

08001700 <__eqdf2>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	464f      	mov	r7, r9
 8001704:	4646      	mov	r6, r8
 8001706:	46d6      	mov	lr, sl
 8001708:	005c      	lsls	r4, r3, #1
 800170a:	b5c0      	push	{r6, r7, lr}
 800170c:	031f      	lsls	r7, r3, #12
 800170e:	0fdb      	lsrs	r3, r3, #31
 8001710:	469a      	mov	sl, r3
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <__eqdf2+0x70>)
 8001714:	030e      	lsls	r6, r1, #12
 8001716:	004d      	lsls	r5, r1, #1
 8001718:	4684      	mov	ip, r0
 800171a:	4680      	mov	r8, r0
 800171c:	0b36      	lsrs	r6, r6, #12
 800171e:	0d6d      	lsrs	r5, r5, #21
 8001720:	0fc9      	lsrs	r1, r1, #31
 8001722:	4691      	mov	r9, r2
 8001724:	0b3f      	lsrs	r7, r7, #12
 8001726:	0d64      	lsrs	r4, r4, #21
 8001728:	2001      	movs	r0, #1
 800172a:	429d      	cmp	r5, r3
 800172c:	d008      	beq.n	8001740 <__eqdf2+0x40>
 800172e:	429c      	cmp	r4, r3
 8001730:	d001      	beq.n	8001736 <__eqdf2+0x36>
 8001732:	42a5      	cmp	r5, r4
 8001734:	d00b      	beq.n	800174e <__eqdf2+0x4e>
 8001736:	bc1c      	pop	{r2, r3, r4}
 8001738:	4690      	mov	r8, r2
 800173a:	4699      	mov	r9, r3
 800173c:	46a2      	mov	sl, r4
 800173e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001740:	4663      	mov	r3, ip
 8001742:	4333      	orrs	r3, r6
 8001744:	d1f7      	bne.n	8001736 <__eqdf2+0x36>
 8001746:	42ac      	cmp	r4, r5
 8001748:	d1f5      	bne.n	8001736 <__eqdf2+0x36>
 800174a:	433a      	orrs	r2, r7
 800174c:	d1f3      	bne.n	8001736 <__eqdf2+0x36>
 800174e:	2001      	movs	r0, #1
 8001750:	42be      	cmp	r6, r7
 8001752:	d1f0      	bne.n	8001736 <__eqdf2+0x36>
 8001754:	45c8      	cmp	r8, r9
 8001756:	d1ee      	bne.n	8001736 <__eqdf2+0x36>
 8001758:	4551      	cmp	r1, sl
 800175a:	d007      	beq.n	800176c <__eqdf2+0x6c>
 800175c:	2d00      	cmp	r5, #0
 800175e:	d1ea      	bne.n	8001736 <__eqdf2+0x36>
 8001760:	4663      	mov	r3, ip
 8001762:	431e      	orrs	r6, r3
 8001764:	0030      	movs	r0, r6
 8001766:	1e46      	subs	r6, r0, #1
 8001768:	41b0      	sbcs	r0, r6
 800176a:	e7e4      	b.n	8001736 <__eqdf2+0x36>
 800176c:	2000      	movs	r0, #0
 800176e:	e7e2      	b.n	8001736 <__eqdf2+0x36>
 8001770:	000007ff 	.word	0x000007ff

08001774 <__gedf2>:
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	4645      	mov	r5, r8
 8001778:	46de      	mov	lr, fp
 800177a:	4657      	mov	r7, sl
 800177c:	464e      	mov	r6, r9
 800177e:	b5e0      	push	{r5, r6, r7, lr}
 8001780:	031f      	lsls	r7, r3, #12
 8001782:	0b3d      	lsrs	r5, r7, #12
 8001784:	4f2c      	ldr	r7, [pc, #176]	; (8001838 <__gedf2+0xc4>)
 8001786:	030e      	lsls	r6, r1, #12
 8001788:	004c      	lsls	r4, r1, #1
 800178a:	46ab      	mov	fp, r5
 800178c:	005d      	lsls	r5, r3, #1
 800178e:	4684      	mov	ip, r0
 8001790:	0b36      	lsrs	r6, r6, #12
 8001792:	0d64      	lsrs	r4, r4, #21
 8001794:	0fc9      	lsrs	r1, r1, #31
 8001796:	4690      	mov	r8, r2
 8001798:	0d6d      	lsrs	r5, r5, #21
 800179a:	0fdb      	lsrs	r3, r3, #31
 800179c:	42bc      	cmp	r4, r7
 800179e:	d02a      	beq.n	80017f6 <__gedf2+0x82>
 80017a0:	4f25      	ldr	r7, [pc, #148]	; (8001838 <__gedf2+0xc4>)
 80017a2:	42bd      	cmp	r5, r7
 80017a4:	d02d      	beq.n	8001802 <__gedf2+0x8e>
 80017a6:	2c00      	cmp	r4, #0
 80017a8:	d10f      	bne.n	80017ca <__gedf2+0x56>
 80017aa:	4330      	orrs	r0, r6
 80017ac:	0007      	movs	r7, r0
 80017ae:	4681      	mov	r9, r0
 80017b0:	4278      	negs	r0, r7
 80017b2:	4178      	adcs	r0, r7
 80017b4:	b2c0      	uxtb	r0, r0
 80017b6:	2d00      	cmp	r5, #0
 80017b8:	d117      	bne.n	80017ea <__gedf2+0x76>
 80017ba:	465f      	mov	r7, fp
 80017bc:	433a      	orrs	r2, r7
 80017be:	d114      	bne.n	80017ea <__gedf2+0x76>
 80017c0:	464b      	mov	r3, r9
 80017c2:	2000      	movs	r0, #0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <__gedf2+0x6a>
 80017c8:	e006      	b.n	80017d8 <__gedf2+0x64>
 80017ca:	2d00      	cmp	r5, #0
 80017cc:	d102      	bne.n	80017d4 <__gedf2+0x60>
 80017ce:	4658      	mov	r0, fp
 80017d0:	4302      	orrs	r2, r0
 80017d2:	d001      	beq.n	80017d8 <__gedf2+0x64>
 80017d4:	4299      	cmp	r1, r3
 80017d6:	d018      	beq.n	800180a <__gedf2+0x96>
 80017d8:	4248      	negs	r0, r1
 80017da:	2101      	movs	r1, #1
 80017dc:	4308      	orrs	r0, r1
 80017de:	bc3c      	pop	{r2, r3, r4, r5}
 80017e0:	4690      	mov	r8, r2
 80017e2:	4699      	mov	r9, r3
 80017e4:	46a2      	mov	sl, r4
 80017e6:	46ab      	mov	fp, r5
 80017e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ea:	2800      	cmp	r0, #0
 80017ec:	d0f2      	beq.n	80017d4 <__gedf2+0x60>
 80017ee:	2001      	movs	r0, #1
 80017f0:	3b01      	subs	r3, #1
 80017f2:	4318      	orrs	r0, r3
 80017f4:	e7f3      	b.n	80017de <__gedf2+0x6a>
 80017f6:	0037      	movs	r7, r6
 80017f8:	4307      	orrs	r7, r0
 80017fa:	d0d1      	beq.n	80017a0 <__gedf2+0x2c>
 80017fc:	2002      	movs	r0, #2
 80017fe:	4240      	negs	r0, r0
 8001800:	e7ed      	b.n	80017de <__gedf2+0x6a>
 8001802:	465f      	mov	r7, fp
 8001804:	4317      	orrs	r7, r2
 8001806:	d0ce      	beq.n	80017a6 <__gedf2+0x32>
 8001808:	e7f8      	b.n	80017fc <__gedf2+0x88>
 800180a:	42ac      	cmp	r4, r5
 800180c:	dce4      	bgt.n	80017d8 <__gedf2+0x64>
 800180e:	da03      	bge.n	8001818 <__gedf2+0xa4>
 8001810:	1e48      	subs	r0, r1, #1
 8001812:	2101      	movs	r1, #1
 8001814:	4308      	orrs	r0, r1
 8001816:	e7e2      	b.n	80017de <__gedf2+0x6a>
 8001818:	455e      	cmp	r6, fp
 800181a:	d8dd      	bhi.n	80017d8 <__gedf2+0x64>
 800181c:	d006      	beq.n	800182c <__gedf2+0xb8>
 800181e:	2000      	movs	r0, #0
 8001820:	455e      	cmp	r6, fp
 8001822:	d2dc      	bcs.n	80017de <__gedf2+0x6a>
 8001824:	2301      	movs	r3, #1
 8001826:	1e48      	subs	r0, r1, #1
 8001828:	4318      	orrs	r0, r3
 800182a:	e7d8      	b.n	80017de <__gedf2+0x6a>
 800182c:	45c4      	cmp	ip, r8
 800182e:	d8d3      	bhi.n	80017d8 <__gedf2+0x64>
 8001830:	2000      	movs	r0, #0
 8001832:	45c4      	cmp	ip, r8
 8001834:	d3f6      	bcc.n	8001824 <__gedf2+0xb0>
 8001836:	e7d2      	b.n	80017de <__gedf2+0x6a>
 8001838:	000007ff 	.word	0x000007ff

0800183c <__ledf2>:
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	464e      	mov	r6, r9
 8001840:	4645      	mov	r5, r8
 8001842:	46de      	mov	lr, fp
 8001844:	4657      	mov	r7, sl
 8001846:	005c      	lsls	r4, r3, #1
 8001848:	b5e0      	push	{r5, r6, r7, lr}
 800184a:	031f      	lsls	r7, r3, #12
 800184c:	0fdb      	lsrs	r3, r3, #31
 800184e:	4699      	mov	r9, r3
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <__ledf2+0xc0>)
 8001852:	030e      	lsls	r6, r1, #12
 8001854:	004d      	lsls	r5, r1, #1
 8001856:	0fc9      	lsrs	r1, r1, #31
 8001858:	4684      	mov	ip, r0
 800185a:	0b36      	lsrs	r6, r6, #12
 800185c:	0d6d      	lsrs	r5, r5, #21
 800185e:	468b      	mov	fp, r1
 8001860:	4690      	mov	r8, r2
 8001862:	0b3f      	lsrs	r7, r7, #12
 8001864:	0d64      	lsrs	r4, r4, #21
 8001866:	429d      	cmp	r5, r3
 8001868:	d020      	beq.n	80018ac <__ledf2+0x70>
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <__ledf2+0xc0>)
 800186c:	429c      	cmp	r4, r3
 800186e:	d022      	beq.n	80018b6 <__ledf2+0x7a>
 8001870:	2d00      	cmp	r5, #0
 8001872:	d112      	bne.n	800189a <__ledf2+0x5e>
 8001874:	4330      	orrs	r0, r6
 8001876:	4243      	negs	r3, r0
 8001878:	4143      	adcs	r3, r0
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2c00      	cmp	r4, #0
 800187e:	d01f      	beq.n	80018c0 <__ledf2+0x84>
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00c      	beq.n	800189e <__ledf2+0x62>
 8001884:	464b      	mov	r3, r9
 8001886:	2001      	movs	r0, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	4303      	orrs	r3, r0
 800188c:	0018      	movs	r0, r3
 800188e:	bc3c      	pop	{r2, r3, r4, r5}
 8001890:	4690      	mov	r8, r2
 8001892:	4699      	mov	r9, r3
 8001894:	46a2      	mov	sl, r4
 8001896:	46ab      	mov	fp, r5
 8001898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189a:	2c00      	cmp	r4, #0
 800189c:	d016      	beq.n	80018cc <__ledf2+0x90>
 800189e:	45cb      	cmp	fp, r9
 80018a0:	d017      	beq.n	80018d2 <__ledf2+0x96>
 80018a2:	465b      	mov	r3, fp
 80018a4:	4259      	negs	r1, r3
 80018a6:	2301      	movs	r3, #1
 80018a8:	430b      	orrs	r3, r1
 80018aa:	e7ef      	b.n	800188c <__ledf2+0x50>
 80018ac:	0031      	movs	r1, r6
 80018ae:	2302      	movs	r3, #2
 80018b0:	4301      	orrs	r1, r0
 80018b2:	d1eb      	bne.n	800188c <__ledf2+0x50>
 80018b4:	e7d9      	b.n	800186a <__ledf2+0x2e>
 80018b6:	0039      	movs	r1, r7
 80018b8:	2302      	movs	r3, #2
 80018ba:	4311      	orrs	r1, r2
 80018bc:	d1e6      	bne.n	800188c <__ledf2+0x50>
 80018be:	e7d7      	b.n	8001870 <__ledf2+0x34>
 80018c0:	433a      	orrs	r2, r7
 80018c2:	d1dd      	bne.n	8001880 <__ledf2+0x44>
 80018c4:	2300      	movs	r3, #0
 80018c6:	2800      	cmp	r0, #0
 80018c8:	d0e0      	beq.n	800188c <__ledf2+0x50>
 80018ca:	e7ea      	b.n	80018a2 <__ledf2+0x66>
 80018cc:	433a      	orrs	r2, r7
 80018ce:	d1e6      	bne.n	800189e <__ledf2+0x62>
 80018d0:	e7e7      	b.n	80018a2 <__ledf2+0x66>
 80018d2:	42a5      	cmp	r5, r4
 80018d4:	dce5      	bgt.n	80018a2 <__ledf2+0x66>
 80018d6:	db05      	blt.n	80018e4 <__ledf2+0xa8>
 80018d8:	42be      	cmp	r6, r7
 80018da:	d8e2      	bhi.n	80018a2 <__ledf2+0x66>
 80018dc:	d007      	beq.n	80018ee <__ledf2+0xb2>
 80018de:	2300      	movs	r3, #0
 80018e0:	42be      	cmp	r6, r7
 80018e2:	d2d3      	bcs.n	800188c <__ledf2+0x50>
 80018e4:	4659      	mov	r1, fp
 80018e6:	2301      	movs	r3, #1
 80018e8:	3901      	subs	r1, #1
 80018ea:	430b      	orrs	r3, r1
 80018ec:	e7ce      	b.n	800188c <__ledf2+0x50>
 80018ee:	45c4      	cmp	ip, r8
 80018f0:	d8d7      	bhi.n	80018a2 <__ledf2+0x66>
 80018f2:	2300      	movs	r3, #0
 80018f4:	45c4      	cmp	ip, r8
 80018f6:	d3f5      	bcc.n	80018e4 <__ledf2+0xa8>
 80018f8:	e7c8      	b.n	800188c <__ledf2+0x50>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	000007ff 	.word	0x000007ff

08001900 <__aeabi_dmul>:
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	4657      	mov	r7, sl
 8001904:	4645      	mov	r5, r8
 8001906:	46de      	mov	lr, fp
 8001908:	464e      	mov	r6, r9
 800190a:	b5e0      	push	{r5, r6, r7, lr}
 800190c:	030c      	lsls	r4, r1, #12
 800190e:	4698      	mov	r8, r3
 8001910:	004e      	lsls	r6, r1, #1
 8001912:	0b23      	lsrs	r3, r4, #12
 8001914:	b087      	sub	sp, #28
 8001916:	0007      	movs	r7, r0
 8001918:	4692      	mov	sl, r2
 800191a:	469b      	mov	fp, r3
 800191c:	0d76      	lsrs	r6, r6, #21
 800191e:	0fcd      	lsrs	r5, r1, #31
 8001920:	2e00      	cmp	r6, #0
 8001922:	d06b      	beq.n	80019fc <__aeabi_dmul+0xfc>
 8001924:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <__aeabi_dmul+0x1dc>)
 8001926:	429e      	cmp	r6, r3
 8001928:	d035      	beq.n	8001996 <__aeabi_dmul+0x96>
 800192a:	2480      	movs	r4, #128	; 0x80
 800192c:	465b      	mov	r3, fp
 800192e:	0f42      	lsrs	r2, r0, #29
 8001930:	0424      	lsls	r4, r4, #16
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4314      	orrs	r4, r2
 8001936:	431c      	orrs	r4, r3
 8001938:	00c3      	lsls	r3, r0, #3
 800193a:	4699      	mov	r9, r3
 800193c:	4b68      	ldr	r3, [pc, #416]	; (8001ae0 <__aeabi_dmul+0x1e0>)
 800193e:	46a3      	mov	fp, r4
 8001940:	469c      	mov	ip, r3
 8001942:	2300      	movs	r3, #0
 8001944:	2700      	movs	r7, #0
 8001946:	4466      	add	r6, ip
 8001948:	9302      	str	r3, [sp, #8]
 800194a:	4643      	mov	r3, r8
 800194c:	031c      	lsls	r4, r3, #12
 800194e:	005a      	lsls	r2, r3, #1
 8001950:	0fdb      	lsrs	r3, r3, #31
 8001952:	4650      	mov	r0, sl
 8001954:	0b24      	lsrs	r4, r4, #12
 8001956:	0d52      	lsrs	r2, r2, #21
 8001958:	4698      	mov	r8, r3
 800195a:	d100      	bne.n	800195e <__aeabi_dmul+0x5e>
 800195c:	e076      	b.n	8001a4c <__aeabi_dmul+0x14c>
 800195e:	4b5f      	ldr	r3, [pc, #380]	; (8001adc <__aeabi_dmul+0x1dc>)
 8001960:	429a      	cmp	r2, r3
 8001962:	d06d      	beq.n	8001a40 <__aeabi_dmul+0x140>
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	0f41      	lsrs	r1, r0, #29
 8001968:	041b      	lsls	r3, r3, #16
 800196a:	430b      	orrs	r3, r1
 800196c:	495c      	ldr	r1, [pc, #368]	; (8001ae0 <__aeabi_dmul+0x1e0>)
 800196e:	00e4      	lsls	r4, r4, #3
 8001970:	468c      	mov	ip, r1
 8001972:	431c      	orrs	r4, r3
 8001974:	00c3      	lsls	r3, r0, #3
 8001976:	2000      	movs	r0, #0
 8001978:	4462      	add	r2, ip
 800197a:	4641      	mov	r1, r8
 800197c:	18b6      	adds	r6, r6, r2
 800197e:	4069      	eors	r1, r5
 8001980:	1c72      	adds	r2, r6, #1
 8001982:	9101      	str	r1, [sp, #4]
 8001984:	4694      	mov	ip, r2
 8001986:	4307      	orrs	r7, r0
 8001988:	2f0f      	cmp	r7, #15
 800198a:	d900      	bls.n	800198e <__aeabi_dmul+0x8e>
 800198c:	e0b0      	b.n	8001af0 <__aeabi_dmul+0x1f0>
 800198e:	4a55      	ldr	r2, [pc, #340]	; (8001ae4 <__aeabi_dmul+0x1e4>)
 8001990:	00bf      	lsls	r7, r7, #2
 8001992:	59d2      	ldr	r2, [r2, r7]
 8001994:	4697      	mov	pc, r2
 8001996:	465b      	mov	r3, fp
 8001998:	4303      	orrs	r3, r0
 800199a:	4699      	mov	r9, r3
 800199c:	d000      	beq.n	80019a0 <__aeabi_dmul+0xa0>
 800199e:	e087      	b.n	8001ab0 <__aeabi_dmul+0x1b0>
 80019a0:	2300      	movs	r3, #0
 80019a2:	469b      	mov	fp, r3
 80019a4:	3302      	adds	r3, #2
 80019a6:	2708      	movs	r7, #8
 80019a8:	9302      	str	r3, [sp, #8]
 80019aa:	e7ce      	b.n	800194a <__aeabi_dmul+0x4a>
 80019ac:	4642      	mov	r2, r8
 80019ae:	9201      	str	r2, [sp, #4]
 80019b0:	2802      	cmp	r0, #2
 80019b2:	d067      	beq.n	8001a84 <__aeabi_dmul+0x184>
 80019b4:	2803      	cmp	r0, #3
 80019b6:	d100      	bne.n	80019ba <__aeabi_dmul+0xba>
 80019b8:	e20e      	b.n	8001dd8 <__aeabi_dmul+0x4d8>
 80019ba:	2801      	cmp	r0, #1
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dmul+0xc0>
 80019be:	e162      	b.n	8001c86 <__aeabi_dmul+0x386>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2400      	movs	r4, #0
 80019c4:	2200      	movs	r2, #0
 80019c6:	4699      	mov	r9, r3
 80019c8:	9901      	ldr	r1, [sp, #4]
 80019ca:	4001      	ands	r1, r0
 80019cc:	b2cd      	uxtb	r5, r1
 80019ce:	2100      	movs	r1, #0
 80019d0:	0312      	lsls	r2, r2, #12
 80019d2:	0d0b      	lsrs	r3, r1, #20
 80019d4:	0b12      	lsrs	r2, r2, #12
 80019d6:	051b      	lsls	r3, r3, #20
 80019d8:	4313      	orrs	r3, r2
 80019da:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <__aeabi_dmul+0x1e8>)
 80019dc:	0524      	lsls	r4, r4, #20
 80019de:	4013      	ands	r3, r2
 80019e0:	431c      	orrs	r4, r3
 80019e2:	0064      	lsls	r4, r4, #1
 80019e4:	07ed      	lsls	r5, r5, #31
 80019e6:	0864      	lsrs	r4, r4, #1
 80019e8:	432c      	orrs	r4, r5
 80019ea:	4648      	mov	r0, r9
 80019ec:	0021      	movs	r1, r4
 80019ee:	b007      	add	sp, #28
 80019f0:	bc3c      	pop	{r2, r3, r4, r5}
 80019f2:	4690      	mov	r8, r2
 80019f4:	4699      	mov	r9, r3
 80019f6:	46a2      	mov	sl, r4
 80019f8:	46ab      	mov	fp, r5
 80019fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019fc:	4303      	orrs	r3, r0
 80019fe:	4699      	mov	r9, r3
 8001a00:	d04f      	beq.n	8001aa2 <__aeabi_dmul+0x1a2>
 8001a02:	465b      	mov	r3, fp
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dmul+0x10a>
 8001a08:	e189      	b.n	8001d1e <__aeabi_dmul+0x41e>
 8001a0a:	4658      	mov	r0, fp
 8001a0c:	f000 fdea 	bl	80025e4 <__clzsi2>
 8001a10:	0003      	movs	r3, r0
 8001a12:	3b0b      	subs	r3, #11
 8001a14:	2b1c      	cmp	r3, #28
 8001a16:	dd00      	ble.n	8001a1a <__aeabi_dmul+0x11a>
 8001a18:	e17a      	b.n	8001d10 <__aeabi_dmul+0x410>
 8001a1a:	221d      	movs	r2, #29
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	003a      	movs	r2, r7
 8001a20:	0001      	movs	r1, r0
 8001a22:	465c      	mov	r4, fp
 8001a24:	40da      	lsrs	r2, r3
 8001a26:	3908      	subs	r1, #8
 8001a28:	408c      	lsls	r4, r1
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	408f      	lsls	r7, r1
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	469b      	mov	fp, r3
 8001a32:	46b9      	mov	r9, r7
 8001a34:	2300      	movs	r3, #0
 8001a36:	4e2d      	ldr	r6, [pc, #180]	; (8001aec <__aeabi_dmul+0x1ec>)
 8001a38:	2700      	movs	r7, #0
 8001a3a:	1a36      	subs	r6, r6, r0
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	e784      	b.n	800194a <__aeabi_dmul+0x4a>
 8001a40:	4653      	mov	r3, sl
 8001a42:	4323      	orrs	r3, r4
 8001a44:	d12a      	bne.n	8001a9c <__aeabi_dmul+0x19c>
 8001a46:	2400      	movs	r4, #0
 8001a48:	2002      	movs	r0, #2
 8001a4a:	e796      	b.n	800197a <__aeabi_dmul+0x7a>
 8001a4c:	4653      	mov	r3, sl
 8001a4e:	4323      	orrs	r3, r4
 8001a50:	d020      	beq.n	8001a94 <__aeabi_dmul+0x194>
 8001a52:	2c00      	cmp	r4, #0
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dmul+0x158>
 8001a56:	e157      	b.n	8001d08 <__aeabi_dmul+0x408>
 8001a58:	0020      	movs	r0, r4
 8001a5a:	f000 fdc3 	bl	80025e4 <__clzsi2>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	3b0b      	subs	r3, #11
 8001a62:	2b1c      	cmp	r3, #28
 8001a64:	dd00      	ble.n	8001a68 <__aeabi_dmul+0x168>
 8001a66:	e149      	b.n	8001cfc <__aeabi_dmul+0x3fc>
 8001a68:	211d      	movs	r1, #29
 8001a6a:	1acb      	subs	r3, r1, r3
 8001a6c:	4651      	mov	r1, sl
 8001a6e:	0002      	movs	r2, r0
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	4653      	mov	r3, sl
 8001a74:	3a08      	subs	r2, #8
 8001a76:	4094      	lsls	r4, r2
 8001a78:	4093      	lsls	r3, r2
 8001a7a:	430c      	orrs	r4, r1
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <__aeabi_dmul+0x1ec>)
 8001a7e:	1a12      	subs	r2, r2, r0
 8001a80:	2000      	movs	r0, #0
 8001a82:	e77a      	b.n	800197a <__aeabi_dmul+0x7a>
 8001a84:	2501      	movs	r5, #1
 8001a86:	9b01      	ldr	r3, [sp, #4]
 8001a88:	4c14      	ldr	r4, [pc, #80]	; (8001adc <__aeabi_dmul+0x1dc>)
 8001a8a:	401d      	ands	r5, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	4699      	mov	r9, r3
 8001a92:	e79c      	b.n	80019ce <__aeabi_dmul+0xce>
 8001a94:	2400      	movs	r4, #0
 8001a96:	2200      	movs	r2, #0
 8001a98:	2001      	movs	r0, #1
 8001a9a:	e76e      	b.n	800197a <__aeabi_dmul+0x7a>
 8001a9c:	4653      	mov	r3, sl
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	e76b      	b.n	800197a <__aeabi_dmul+0x7a>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	469b      	mov	fp, r3
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	2704      	movs	r7, #4
 8001aaa:	2600      	movs	r6, #0
 8001aac:	9302      	str	r3, [sp, #8]
 8001aae:	e74c      	b.n	800194a <__aeabi_dmul+0x4a>
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	4681      	mov	r9, r0
 8001ab4:	270c      	movs	r7, #12
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	e747      	b.n	800194a <__aeabi_dmul+0x4a>
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	2300      	movs	r3, #0
 8001abe:	2500      	movs	r5, #0
 8001ac0:	0312      	lsls	r2, r2, #12
 8001ac2:	4699      	mov	r9, r3
 8001ac4:	4c05      	ldr	r4, [pc, #20]	; (8001adc <__aeabi_dmul+0x1dc>)
 8001ac6:	e782      	b.n	80019ce <__aeabi_dmul+0xce>
 8001ac8:	465c      	mov	r4, fp
 8001aca:	464b      	mov	r3, r9
 8001acc:	9802      	ldr	r0, [sp, #8]
 8001ace:	e76f      	b.n	80019b0 <__aeabi_dmul+0xb0>
 8001ad0:	465c      	mov	r4, fp
 8001ad2:	464b      	mov	r3, r9
 8001ad4:	9501      	str	r5, [sp, #4]
 8001ad6:	9802      	ldr	r0, [sp, #8]
 8001ad8:	e76a      	b.n	80019b0 <__aeabi_dmul+0xb0>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	000007ff 	.word	0x000007ff
 8001ae0:	fffffc01 	.word	0xfffffc01
 8001ae4:	08004c40 	.word	0x08004c40
 8001ae8:	800fffff 	.word	0x800fffff
 8001aec:	fffffc0d 	.word	0xfffffc0d
 8001af0:	464a      	mov	r2, r9
 8001af2:	4649      	mov	r1, r9
 8001af4:	0c17      	lsrs	r7, r2, #16
 8001af6:	0c1a      	lsrs	r2, r3, #16
 8001af8:	041b      	lsls	r3, r3, #16
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	0408      	lsls	r0, r1, #16
 8001afe:	0019      	movs	r1, r3
 8001b00:	0c00      	lsrs	r0, r0, #16
 8001b02:	4341      	muls	r1, r0
 8001b04:	0015      	movs	r5, r2
 8001b06:	4688      	mov	r8, r1
 8001b08:	0019      	movs	r1, r3
 8001b0a:	437d      	muls	r5, r7
 8001b0c:	4379      	muls	r1, r7
 8001b0e:	9503      	str	r5, [sp, #12]
 8001b10:	4689      	mov	r9, r1
 8001b12:	0029      	movs	r1, r5
 8001b14:	0015      	movs	r5, r2
 8001b16:	4345      	muls	r5, r0
 8001b18:	444d      	add	r5, r9
 8001b1a:	9502      	str	r5, [sp, #8]
 8001b1c:	4645      	mov	r5, r8
 8001b1e:	0c2d      	lsrs	r5, r5, #16
 8001b20:	46aa      	mov	sl, r5
 8001b22:	9d02      	ldr	r5, [sp, #8]
 8001b24:	4455      	add	r5, sl
 8001b26:	45a9      	cmp	r9, r5
 8001b28:	d906      	bls.n	8001b38 <__aeabi_dmul+0x238>
 8001b2a:	468a      	mov	sl, r1
 8001b2c:	2180      	movs	r1, #128	; 0x80
 8001b2e:	0249      	lsls	r1, r1, #9
 8001b30:	4689      	mov	r9, r1
 8001b32:	44ca      	add	sl, r9
 8001b34:	4651      	mov	r1, sl
 8001b36:	9103      	str	r1, [sp, #12]
 8001b38:	0c29      	lsrs	r1, r5, #16
 8001b3a:	9104      	str	r1, [sp, #16]
 8001b3c:	4641      	mov	r1, r8
 8001b3e:	0409      	lsls	r1, r1, #16
 8001b40:	042d      	lsls	r5, r5, #16
 8001b42:	0c09      	lsrs	r1, r1, #16
 8001b44:	4688      	mov	r8, r1
 8001b46:	0029      	movs	r1, r5
 8001b48:	0c25      	lsrs	r5, r4, #16
 8001b4a:	0424      	lsls	r4, r4, #16
 8001b4c:	4441      	add	r1, r8
 8001b4e:	0c24      	lsrs	r4, r4, #16
 8001b50:	9105      	str	r1, [sp, #20]
 8001b52:	0021      	movs	r1, r4
 8001b54:	4341      	muls	r1, r0
 8001b56:	4688      	mov	r8, r1
 8001b58:	0021      	movs	r1, r4
 8001b5a:	4379      	muls	r1, r7
 8001b5c:	468a      	mov	sl, r1
 8001b5e:	4368      	muls	r0, r5
 8001b60:	4641      	mov	r1, r8
 8001b62:	4450      	add	r0, sl
 8001b64:	4681      	mov	r9, r0
 8001b66:	0c08      	lsrs	r0, r1, #16
 8001b68:	4448      	add	r0, r9
 8001b6a:	436f      	muls	r7, r5
 8001b6c:	4582      	cmp	sl, r0
 8001b6e:	d903      	bls.n	8001b78 <__aeabi_dmul+0x278>
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	0249      	lsls	r1, r1, #9
 8001b74:	4689      	mov	r9, r1
 8001b76:	444f      	add	r7, r9
 8001b78:	0c01      	lsrs	r1, r0, #16
 8001b7a:	4689      	mov	r9, r1
 8001b7c:	0039      	movs	r1, r7
 8001b7e:	4449      	add	r1, r9
 8001b80:	9102      	str	r1, [sp, #8]
 8001b82:	4641      	mov	r1, r8
 8001b84:	040f      	lsls	r7, r1, #16
 8001b86:	9904      	ldr	r1, [sp, #16]
 8001b88:	0c3f      	lsrs	r7, r7, #16
 8001b8a:	4688      	mov	r8, r1
 8001b8c:	0400      	lsls	r0, r0, #16
 8001b8e:	19c0      	adds	r0, r0, r7
 8001b90:	4480      	add	r8, r0
 8001b92:	4641      	mov	r1, r8
 8001b94:	9104      	str	r1, [sp, #16]
 8001b96:	4659      	mov	r1, fp
 8001b98:	0c0f      	lsrs	r7, r1, #16
 8001b9a:	0409      	lsls	r1, r1, #16
 8001b9c:	0c09      	lsrs	r1, r1, #16
 8001b9e:	4688      	mov	r8, r1
 8001ba0:	4359      	muls	r1, r3
 8001ba2:	468a      	mov	sl, r1
 8001ba4:	0039      	movs	r1, r7
 8001ba6:	4351      	muls	r1, r2
 8001ba8:	4689      	mov	r9, r1
 8001baa:	4641      	mov	r1, r8
 8001bac:	434a      	muls	r2, r1
 8001bae:	4651      	mov	r1, sl
 8001bb0:	0c09      	lsrs	r1, r1, #16
 8001bb2:	468b      	mov	fp, r1
 8001bb4:	437b      	muls	r3, r7
 8001bb6:	18d2      	adds	r2, r2, r3
 8001bb8:	445a      	add	r2, fp
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d903      	bls.n	8001bc6 <__aeabi_dmul+0x2c6>
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	025b      	lsls	r3, r3, #9
 8001bc2:	469b      	mov	fp, r3
 8001bc4:	44d9      	add	r9, fp
 8001bc6:	4651      	mov	r1, sl
 8001bc8:	0409      	lsls	r1, r1, #16
 8001bca:	0c09      	lsrs	r1, r1, #16
 8001bcc:	468a      	mov	sl, r1
 8001bce:	4641      	mov	r1, r8
 8001bd0:	4361      	muls	r1, r4
 8001bd2:	437c      	muls	r4, r7
 8001bd4:	0c13      	lsrs	r3, r2, #16
 8001bd6:	0412      	lsls	r2, r2, #16
 8001bd8:	444b      	add	r3, r9
 8001bda:	4452      	add	r2, sl
 8001bdc:	46a1      	mov	r9, r4
 8001bde:	468a      	mov	sl, r1
 8001be0:	003c      	movs	r4, r7
 8001be2:	4641      	mov	r1, r8
 8001be4:	436c      	muls	r4, r5
 8001be6:	434d      	muls	r5, r1
 8001be8:	4651      	mov	r1, sl
 8001bea:	444d      	add	r5, r9
 8001bec:	0c0f      	lsrs	r7, r1, #16
 8001bee:	197d      	adds	r5, r7, r5
 8001bf0:	45a9      	cmp	r9, r5
 8001bf2:	d903      	bls.n	8001bfc <__aeabi_dmul+0x2fc>
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	0249      	lsls	r1, r1, #9
 8001bf8:	4688      	mov	r8, r1
 8001bfa:	4444      	add	r4, r8
 8001bfc:	9f04      	ldr	r7, [sp, #16]
 8001bfe:	9903      	ldr	r1, [sp, #12]
 8001c00:	46b8      	mov	r8, r7
 8001c02:	4441      	add	r1, r8
 8001c04:	468b      	mov	fp, r1
 8001c06:	4583      	cmp	fp, r0
 8001c08:	4180      	sbcs	r0, r0
 8001c0a:	4241      	negs	r1, r0
 8001c0c:	4688      	mov	r8, r1
 8001c0e:	4651      	mov	r1, sl
 8001c10:	0408      	lsls	r0, r1, #16
 8001c12:	042f      	lsls	r7, r5, #16
 8001c14:	0c00      	lsrs	r0, r0, #16
 8001c16:	183f      	adds	r7, r7, r0
 8001c18:	4658      	mov	r0, fp
 8001c1a:	9902      	ldr	r1, [sp, #8]
 8001c1c:	1810      	adds	r0, r2, r0
 8001c1e:	4689      	mov	r9, r1
 8001c20:	4290      	cmp	r0, r2
 8001c22:	4192      	sbcs	r2, r2
 8001c24:	444f      	add	r7, r9
 8001c26:	46ba      	mov	sl, r7
 8001c28:	4252      	negs	r2, r2
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	4693      	mov	fp, r2
 8001c2e:	44c2      	add	sl, r8
 8001c30:	44d1      	add	r9, sl
 8001c32:	44cb      	add	fp, r9
 8001c34:	428f      	cmp	r7, r1
 8001c36:	41bf      	sbcs	r7, r7
 8001c38:	45c2      	cmp	sl, r8
 8001c3a:	4189      	sbcs	r1, r1
 8001c3c:	4599      	cmp	r9, r3
 8001c3e:	419b      	sbcs	r3, r3
 8001c40:	4593      	cmp	fp, r2
 8001c42:	4192      	sbcs	r2, r2
 8001c44:	427f      	negs	r7, r7
 8001c46:	4249      	negs	r1, r1
 8001c48:	0c2d      	lsrs	r5, r5, #16
 8001c4a:	4252      	negs	r2, r2
 8001c4c:	430f      	orrs	r7, r1
 8001c4e:	425b      	negs	r3, r3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	197f      	adds	r7, r7, r5
 8001c54:	18ff      	adds	r7, r7, r3
 8001c56:	465b      	mov	r3, fp
 8001c58:	193c      	adds	r4, r7, r4
 8001c5a:	0ddb      	lsrs	r3, r3, #23
 8001c5c:	9a05      	ldr	r2, [sp, #20]
 8001c5e:	0264      	lsls	r4, r4, #9
 8001c60:	431c      	orrs	r4, r3
 8001c62:	0243      	lsls	r3, r0, #9
 8001c64:	4313      	orrs	r3, r2
 8001c66:	1e5d      	subs	r5, r3, #1
 8001c68:	41ab      	sbcs	r3, r5
 8001c6a:	465a      	mov	r2, fp
 8001c6c:	0dc0      	lsrs	r0, r0, #23
 8001c6e:	4303      	orrs	r3, r0
 8001c70:	0252      	lsls	r2, r2, #9
 8001c72:	4313      	orrs	r3, r2
 8001c74:	01e2      	lsls	r2, r4, #7
 8001c76:	d556      	bpl.n	8001d26 <__aeabi_dmul+0x426>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	085a      	lsrs	r2, r3, #1
 8001c7c:	4003      	ands	r3, r0
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	07e2      	lsls	r2, r4, #31
 8001c82:	4313      	orrs	r3, r2
 8001c84:	0864      	lsrs	r4, r4, #1
 8001c86:	485a      	ldr	r0, [pc, #360]	; (8001df0 <__aeabi_dmul+0x4f0>)
 8001c88:	4460      	add	r0, ip
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	dd4d      	ble.n	8001d2a <__aeabi_dmul+0x42a>
 8001c8e:	075a      	lsls	r2, r3, #29
 8001c90:	d009      	beq.n	8001ca6 <__aeabi_dmul+0x3a6>
 8001c92:	220f      	movs	r2, #15
 8001c94:	401a      	ands	r2, r3
 8001c96:	2a04      	cmp	r2, #4
 8001c98:	d005      	beq.n	8001ca6 <__aeabi_dmul+0x3a6>
 8001c9a:	1d1a      	adds	r2, r3, #4
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	419b      	sbcs	r3, r3
 8001ca0:	425b      	negs	r3, r3
 8001ca2:	18e4      	adds	r4, r4, r3
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	01e2      	lsls	r2, r4, #7
 8001ca8:	d504      	bpl.n	8001cb4 <__aeabi_dmul+0x3b4>
 8001caa:	2080      	movs	r0, #128	; 0x80
 8001cac:	4a51      	ldr	r2, [pc, #324]	; (8001df4 <__aeabi_dmul+0x4f4>)
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	4014      	ands	r4, r2
 8001cb2:	4460      	add	r0, ip
 8001cb4:	4a50      	ldr	r2, [pc, #320]	; (8001df8 <__aeabi_dmul+0x4f8>)
 8001cb6:	4290      	cmp	r0, r2
 8001cb8:	dd00      	ble.n	8001cbc <__aeabi_dmul+0x3bc>
 8001cba:	e6e3      	b.n	8001a84 <__aeabi_dmul+0x184>
 8001cbc:	2501      	movs	r5, #1
 8001cbe:	08db      	lsrs	r3, r3, #3
 8001cc0:	0762      	lsls	r2, r4, #29
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	0264      	lsls	r4, r4, #9
 8001cc6:	9b01      	ldr	r3, [sp, #4]
 8001cc8:	4691      	mov	r9, r2
 8001cca:	0b22      	lsrs	r2, r4, #12
 8001ccc:	0544      	lsls	r4, r0, #21
 8001cce:	0d64      	lsrs	r4, r4, #21
 8001cd0:	401d      	ands	r5, r3
 8001cd2:	e67c      	b.n	80019ce <__aeabi_dmul+0xce>
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	4659      	mov	r1, fp
 8001cd8:	0312      	lsls	r2, r2, #12
 8001cda:	4211      	tst	r1, r2
 8001cdc:	d008      	beq.n	8001cf0 <__aeabi_dmul+0x3f0>
 8001cde:	4214      	tst	r4, r2
 8001ce0:	d106      	bne.n	8001cf0 <__aeabi_dmul+0x3f0>
 8001ce2:	4322      	orrs	r2, r4
 8001ce4:	0312      	lsls	r2, r2, #12
 8001ce6:	0b12      	lsrs	r2, r2, #12
 8001ce8:	4645      	mov	r5, r8
 8001cea:	4699      	mov	r9, r3
 8001cec:	4c43      	ldr	r4, [pc, #268]	; (8001dfc <__aeabi_dmul+0x4fc>)
 8001cee:	e66e      	b.n	80019ce <__aeabi_dmul+0xce>
 8001cf0:	465b      	mov	r3, fp
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	0312      	lsls	r2, r2, #12
 8001cf6:	0b12      	lsrs	r2, r2, #12
 8001cf8:	4c40      	ldr	r4, [pc, #256]	; (8001dfc <__aeabi_dmul+0x4fc>)
 8001cfa:	e668      	b.n	80019ce <__aeabi_dmul+0xce>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	4654      	mov	r4, sl
 8001d00:	3b28      	subs	r3, #40	; 0x28
 8001d02:	409c      	lsls	r4, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	e6b9      	b.n	8001a7c <__aeabi_dmul+0x17c>
 8001d08:	f000 fc6c 	bl	80025e4 <__clzsi2>
 8001d0c:	3020      	adds	r0, #32
 8001d0e:	e6a6      	b.n	8001a5e <__aeabi_dmul+0x15e>
 8001d10:	0003      	movs	r3, r0
 8001d12:	3b28      	subs	r3, #40	; 0x28
 8001d14:	409f      	lsls	r7, r3
 8001d16:	2300      	movs	r3, #0
 8001d18:	46bb      	mov	fp, r7
 8001d1a:	4699      	mov	r9, r3
 8001d1c:	e68a      	b.n	8001a34 <__aeabi_dmul+0x134>
 8001d1e:	f000 fc61 	bl	80025e4 <__clzsi2>
 8001d22:	3020      	adds	r0, #32
 8001d24:	e674      	b.n	8001a10 <__aeabi_dmul+0x110>
 8001d26:	46b4      	mov	ip, r6
 8001d28:	e7ad      	b.n	8001c86 <__aeabi_dmul+0x386>
 8001d2a:	2501      	movs	r5, #1
 8001d2c:	1a2a      	subs	r2, r5, r0
 8001d2e:	2a38      	cmp	r2, #56	; 0x38
 8001d30:	dd06      	ble.n	8001d40 <__aeabi_dmul+0x440>
 8001d32:	9b01      	ldr	r3, [sp, #4]
 8001d34:	2400      	movs	r4, #0
 8001d36:	401d      	ands	r5, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4699      	mov	r9, r3
 8001d3e:	e646      	b.n	80019ce <__aeabi_dmul+0xce>
 8001d40:	2a1f      	cmp	r2, #31
 8001d42:	dc21      	bgt.n	8001d88 <__aeabi_dmul+0x488>
 8001d44:	2520      	movs	r5, #32
 8001d46:	0020      	movs	r0, r4
 8001d48:	1aad      	subs	r5, r5, r2
 8001d4a:	001e      	movs	r6, r3
 8001d4c:	40ab      	lsls	r3, r5
 8001d4e:	40a8      	lsls	r0, r5
 8001d50:	40d6      	lsrs	r6, r2
 8001d52:	1e5d      	subs	r5, r3, #1
 8001d54:	41ab      	sbcs	r3, r5
 8001d56:	4330      	orrs	r0, r6
 8001d58:	4318      	orrs	r0, r3
 8001d5a:	40d4      	lsrs	r4, r2
 8001d5c:	0743      	lsls	r3, r0, #29
 8001d5e:	d009      	beq.n	8001d74 <__aeabi_dmul+0x474>
 8001d60:	230f      	movs	r3, #15
 8001d62:	4003      	ands	r3, r0
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d005      	beq.n	8001d74 <__aeabi_dmul+0x474>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	1d18      	adds	r0, r3, #4
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	419b      	sbcs	r3, r3
 8001d70:	425b      	negs	r3, r3
 8001d72:	18e4      	adds	r4, r4, r3
 8001d74:	0223      	lsls	r3, r4, #8
 8001d76:	d521      	bpl.n	8001dbc <__aeabi_dmul+0x4bc>
 8001d78:	2501      	movs	r5, #1
 8001d7a:	9b01      	ldr	r3, [sp, #4]
 8001d7c:	2401      	movs	r4, #1
 8001d7e:	401d      	ands	r5, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	2200      	movs	r2, #0
 8001d84:	4699      	mov	r9, r3
 8001d86:	e622      	b.n	80019ce <__aeabi_dmul+0xce>
 8001d88:	251f      	movs	r5, #31
 8001d8a:	0021      	movs	r1, r4
 8001d8c:	426d      	negs	r5, r5
 8001d8e:	1a28      	subs	r0, r5, r0
 8001d90:	40c1      	lsrs	r1, r0
 8001d92:	0008      	movs	r0, r1
 8001d94:	2a20      	cmp	r2, #32
 8001d96:	d01d      	beq.n	8001dd4 <__aeabi_dmul+0x4d4>
 8001d98:	355f      	adds	r5, #95	; 0x5f
 8001d9a:	1aaa      	subs	r2, r5, r2
 8001d9c:	4094      	lsls	r4, r2
 8001d9e:	4323      	orrs	r3, r4
 8001da0:	1e5c      	subs	r4, r3, #1
 8001da2:	41a3      	sbcs	r3, r4
 8001da4:	2507      	movs	r5, #7
 8001da6:	4303      	orrs	r3, r0
 8001da8:	401d      	ands	r5, r3
 8001daa:	2200      	movs	r2, #0
 8001dac:	2d00      	cmp	r5, #0
 8001dae:	d009      	beq.n	8001dc4 <__aeabi_dmul+0x4c4>
 8001db0:	220f      	movs	r2, #15
 8001db2:	2400      	movs	r4, #0
 8001db4:	401a      	ands	r2, r3
 8001db6:	0018      	movs	r0, r3
 8001db8:	2a04      	cmp	r2, #4
 8001dba:	d1d6      	bne.n	8001d6a <__aeabi_dmul+0x46a>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	0765      	lsls	r5, r4, #29
 8001dc0:	0264      	lsls	r4, r4, #9
 8001dc2:	0b22      	lsrs	r2, r4, #12
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	432b      	orrs	r3, r5
 8001dc8:	2501      	movs	r5, #1
 8001dca:	4699      	mov	r9, r3
 8001dcc:	9b01      	ldr	r3, [sp, #4]
 8001dce:	2400      	movs	r4, #0
 8001dd0:	401d      	ands	r5, r3
 8001dd2:	e5fc      	b.n	80019ce <__aeabi_dmul+0xce>
 8001dd4:	2400      	movs	r4, #0
 8001dd6:	e7e2      	b.n	8001d9e <__aeabi_dmul+0x49e>
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	2501      	movs	r5, #1
 8001ddc:	0312      	lsls	r2, r2, #12
 8001dde:	4322      	orrs	r2, r4
 8001de0:	9901      	ldr	r1, [sp, #4]
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	0b12      	lsrs	r2, r2, #12
 8001de6:	400d      	ands	r5, r1
 8001de8:	4699      	mov	r9, r3
 8001dea:	4c04      	ldr	r4, [pc, #16]	; (8001dfc <__aeabi_dmul+0x4fc>)
 8001dec:	e5ef      	b.n	80019ce <__aeabi_dmul+0xce>
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	000003ff 	.word	0x000003ff
 8001df4:	feffffff 	.word	0xfeffffff
 8001df8:	000007fe 	.word	0x000007fe
 8001dfc:	000007ff 	.word	0x000007ff

08001e00 <__aeabi_dsub>:
 8001e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e02:	4646      	mov	r6, r8
 8001e04:	46d6      	mov	lr, sl
 8001e06:	464f      	mov	r7, r9
 8001e08:	030c      	lsls	r4, r1, #12
 8001e0a:	b5c0      	push	{r6, r7, lr}
 8001e0c:	0fcd      	lsrs	r5, r1, #31
 8001e0e:	004e      	lsls	r6, r1, #1
 8001e10:	0a61      	lsrs	r1, r4, #9
 8001e12:	0f44      	lsrs	r4, r0, #29
 8001e14:	430c      	orrs	r4, r1
 8001e16:	00c1      	lsls	r1, r0, #3
 8001e18:	0058      	lsls	r0, r3, #1
 8001e1a:	0d40      	lsrs	r0, r0, #21
 8001e1c:	4684      	mov	ip, r0
 8001e1e:	468a      	mov	sl, r1
 8001e20:	000f      	movs	r7, r1
 8001e22:	0319      	lsls	r1, r3, #12
 8001e24:	0f50      	lsrs	r0, r2, #29
 8001e26:	0a49      	lsrs	r1, r1, #9
 8001e28:	4301      	orrs	r1, r0
 8001e2a:	48c6      	ldr	r0, [pc, #792]	; (8002144 <__aeabi_dsub+0x344>)
 8001e2c:	0d76      	lsrs	r6, r6, #21
 8001e2e:	46a8      	mov	r8, r5
 8001e30:	0fdb      	lsrs	r3, r3, #31
 8001e32:	00d2      	lsls	r2, r2, #3
 8001e34:	4584      	cmp	ip, r0
 8001e36:	d100      	bne.n	8001e3a <__aeabi_dsub+0x3a>
 8001e38:	e0d8      	b.n	8001fec <__aeabi_dsub+0x1ec>
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	4043      	eors	r3, r0
 8001e3e:	42ab      	cmp	r3, r5
 8001e40:	d100      	bne.n	8001e44 <__aeabi_dsub+0x44>
 8001e42:	e0a6      	b.n	8001f92 <__aeabi_dsub+0x192>
 8001e44:	4660      	mov	r0, ip
 8001e46:	1a35      	subs	r5, r6, r0
 8001e48:	2d00      	cmp	r5, #0
 8001e4a:	dc00      	bgt.n	8001e4e <__aeabi_dsub+0x4e>
 8001e4c:	e105      	b.n	800205a <__aeabi_dsub+0x25a>
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	d110      	bne.n	8001e74 <__aeabi_dsub+0x74>
 8001e52:	000b      	movs	r3, r1
 8001e54:	4313      	orrs	r3, r2
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dsub+0x5a>
 8001e58:	e0d7      	b.n	800200a <__aeabi_dsub+0x20a>
 8001e5a:	1e6b      	subs	r3, r5, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d000      	beq.n	8001e62 <__aeabi_dsub+0x62>
 8001e60:	e14b      	b.n	80020fa <__aeabi_dsub+0x2fa>
 8001e62:	4653      	mov	r3, sl
 8001e64:	1a9f      	subs	r7, r3, r2
 8001e66:	45ba      	cmp	sl, r7
 8001e68:	4180      	sbcs	r0, r0
 8001e6a:	1a64      	subs	r4, r4, r1
 8001e6c:	4240      	negs	r0, r0
 8001e6e:	1a24      	subs	r4, r4, r0
 8001e70:	2601      	movs	r6, #1
 8001e72:	e01e      	b.n	8001eb2 <__aeabi_dsub+0xb2>
 8001e74:	4bb3      	ldr	r3, [pc, #716]	; (8002144 <__aeabi_dsub+0x344>)
 8001e76:	429e      	cmp	r6, r3
 8001e78:	d048      	beq.n	8001f0c <__aeabi_dsub+0x10c>
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	041b      	lsls	r3, r3, #16
 8001e7e:	4319      	orrs	r1, r3
 8001e80:	2d38      	cmp	r5, #56	; 0x38
 8001e82:	dd00      	ble.n	8001e86 <__aeabi_dsub+0x86>
 8001e84:	e119      	b.n	80020ba <__aeabi_dsub+0x2ba>
 8001e86:	2d1f      	cmp	r5, #31
 8001e88:	dd00      	ble.n	8001e8c <__aeabi_dsub+0x8c>
 8001e8a:	e14c      	b.n	8002126 <__aeabi_dsub+0x326>
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	000f      	movs	r7, r1
 8001e90:	1b5b      	subs	r3, r3, r5
 8001e92:	0010      	movs	r0, r2
 8001e94:	409a      	lsls	r2, r3
 8001e96:	409f      	lsls	r7, r3
 8001e98:	40e8      	lsrs	r0, r5
 8001e9a:	1e53      	subs	r3, r2, #1
 8001e9c:	419a      	sbcs	r2, r3
 8001e9e:	40e9      	lsrs	r1, r5
 8001ea0:	4307      	orrs	r7, r0
 8001ea2:	4317      	orrs	r7, r2
 8001ea4:	4653      	mov	r3, sl
 8001ea6:	1bdf      	subs	r7, r3, r7
 8001ea8:	1a61      	subs	r1, r4, r1
 8001eaa:	45ba      	cmp	sl, r7
 8001eac:	41a4      	sbcs	r4, r4
 8001eae:	4264      	negs	r4, r4
 8001eb0:	1b0c      	subs	r4, r1, r4
 8001eb2:	0223      	lsls	r3, r4, #8
 8001eb4:	d400      	bmi.n	8001eb8 <__aeabi_dsub+0xb8>
 8001eb6:	e0c5      	b.n	8002044 <__aeabi_dsub+0x244>
 8001eb8:	0264      	lsls	r4, r4, #9
 8001eba:	0a65      	lsrs	r5, r4, #9
 8001ebc:	2d00      	cmp	r5, #0
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0xc2>
 8001ec0:	e0f6      	b.n	80020b0 <__aeabi_dsub+0x2b0>
 8001ec2:	0028      	movs	r0, r5
 8001ec4:	f000 fb8e 	bl	80025e4 <__clzsi2>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	2b1f      	cmp	r3, #31
 8001ece:	dd00      	ble.n	8001ed2 <__aeabi_dsub+0xd2>
 8001ed0:	e0e9      	b.n	80020a6 <__aeabi_dsub+0x2a6>
 8001ed2:	2220      	movs	r2, #32
 8001ed4:	003c      	movs	r4, r7
 8001ed6:	1ad2      	subs	r2, r2, r3
 8001ed8:	409d      	lsls	r5, r3
 8001eda:	40d4      	lsrs	r4, r2
 8001edc:	409f      	lsls	r7, r3
 8001ede:	4325      	orrs	r5, r4
 8001ee0:	429e      	cmp	r6, r3
 8001ee2:	dd00      	ble.n	8001ee6 <__aeabi_dsub+0xe6>
 8001ee4:	e0db      	b.n	800209e <__aeabi_dsub+0x29e>
 8001ee6:	1b9e      	subs	r6, r3, r6
 8001ee8:	1c73      	adds	r3, r6, #1
 8001eea:	2b1f      	cmp	r3, #31
 8001eec:	dd00      	ble.n	8001ef0 <__aeabi_dsub+0xf0>
 8001eee:	e10a      	b.n	8002106 <__aeabi_dsub+0x306>
 8001ef0:	2220      	movs	r2, #32
 8001ef2:	0038      	movs	r0, r7
 8001ef4:	1ad2      	subs	r2, r2, r3
 8001ef6:	0029      	movs	r1, r5
 8001ef8:	4097      	lsls	r7, r2
 8001efa:	002c      	movs	r4, r5
 8001efc:	4091      	lsls	r1, r2
 8001efe:	40d8      	lsrs	r0, r3
 8001f00:	1e7a      	subs	r2, r7, #1
 8001f02:	4197      	sbcs	r7, r2
 8001f04:	40dc      	lsrs	r4, r3
 8001f06:	2600      	movs	r6, #0
 8001f08:	4301      	orrs	r1, r0
 8001f0a:	430f      	orrs	r7, r1
 8001f0c:	077b      	lsls	r3, r7, #29
 8001f0e:	d009      	beq.n	8001f24 <__aeabi_dsub+0x124>
 8001f10:	230f      	movs	r3, #15
 8001f12:	403b      	ands	r3, r7
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d005      	beq.n	8001f24 <__aeabi_dsub+0x124>
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	42bb      	cmp	r3, r7
 8001f1c:	41bf      	sbcs	r7, r7
 8001f1e:	427f      	negs	r7, r7
 8001f20:	19e4      	adds	r4, r4, r7
 8001f22:	001f      	movs	r7, r3
 8001f24:	0223      	lsls	r3, r4, #8
 8001f26:	d525      	bpl.n	8001f74 <__aeabi_dsub+0x174>
 8001f28:	4b86      	ldr	r3, [pc, #536]	; (8002144 <__aeabi_dsub+0x344>)
 8001f2a:	3601      	adds	r6, #1
 8001f2c:	429e      	cmp	r6, r3
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x132>
 8001f30:	e0af      	b.n	8002092 <__aeabi_dsub+0x292>
 8001f32:	4b85      	ldr	r3, [pc, #532]	; (8002148 <__aeabi_dsub+0x348>)
 8001f34:	2501      	movs	r5, #1
 8001f36:	401c      	ands	r4, r3
 8001f38:	4643      	mov	r3, r8
 8001f3a:	0762      	lsls	r2, r4, #29
 8001f3c:	08ff      	lsrs	r7, r7, #3
 8001f3e:	0264      	lsls	r4, r4, #9
 8001f40:	0576      	lsls	r6, r6, #21
 8001f42:	4317      	orrs	r7, r2
 8001f44:	0b24      	lsrs	r4, r4, #12
 8001f46:	0d76      	lsrs	r6, r6, #21
 8001f48:	401d      	ands	r5, r3
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	0324      	lsls	r4, r4, #12
 8001f4e:	0b23      	lsrs	r3, r4, #12
 8001f50:	0d0c      	lsrs	r4, r1, #20
 8001f52:	4a7e      	ldr	r2, [pc, #504]	; (800214c <__aeabi_dsub+0x34c>)
 8001f54:	0524      	lsls	r4, r4, #20
 8001f56:	431c      	orrs	r4, r3
 8001f58:	4014      	ands	r4, r2
 8001f5a:	0533      	lsls	r3, r6, #20
 8001f5c:	4323      	orrs	r3, r4
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	07ed      	lsls	r5, r5, #31
 8001f62:	085b      	lsrs	r3, r3, #1
 8001f64:	432b      	orrs	r3, r5
 8001f66:	0038      	movs	r0, r7
 8001f68:	0019      	movs	r1, r3
 8001f6a:	bc1c      	pop	{r2, r3, r4}
 8001f6c:	4690      	mov	r8, r2
 8001f6e:	4699      	mov	r9, r3
 8001f70:	46a2      	mov	sl, r4
 8001f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f74:	2501      	movs	r5, #1
 8001f76:	4643      	mov	r3, r8
 8001f78:	0762      	lsls	r2, r4, #29
 8001f7a:	08ff      	lsrs	r7, r7, #3
 8001f7c:	4317      	orrs	r7, r2
 8001f7e:	08e4      	lsrs	r4, r4, #3
 8001f80:	401d      	ands	r5, r3
 8001f82:	4b70      	ldr	r3, [pc, #448]	; (8002144 <__aeabi_dsub+0x344>)
 8001f84:	429e      	cmp	r6, r3
 8001f86:	d036      	beq.n	8001ff6 <__aeabi_dsub+0x1f6>
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0576      	lsls	r6, r6, #21
 8001f8c:	0b24      	lsrs	r4, r4, #12
 8001f8e:	0d76      	lsrs	r6, r6, #21
 8001f90:	e7db      	b.n	8001f4a <__aeabi_dsub+0x14a>
 8001f92:	4663      	mov	r3, ip
 8001f94:	1af3      	subs	r3, r6, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	dc00      	bgt.n	8001f9c <__aeabi_dsub+0x19c>
 8001f9a:	e094      	b.n	80020c6 <__aeabi_dsub+0x2c6>
 8001f9c:	4660      	mov	r0, ip
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d035      	beq.n	800200e <__aeabi_dsub+0x20e>
 8001fa2:	4868      	ldr	r0, [pc, #416]	; (8002144 <__aeabi_dsub+0x344>)
 8001fa4:	4286      	cmp	r6, r0
 8001fa6:	d0b1      	beq.n	8001f0c <__aeabi_dsub+0x10c>
 8001fa8:	2780      	movs	r7, #128	; 0x80
 8001faa:	043f      	lsls	r7, r7, #16
 8001fac:	4339      	orrs	r1, r7
 8001fae:	2b38      	cmp	r3, #56	; 0x38
 8001fb0:	dc00      	bgt.n	8001fb4 <__aeabi_dsub+0x1b4>
 8001fb2:	e0fd      	b.n	80021b0 <__aeabi_dsub+0x3b0>
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	0017      	movs	r7, r2
 8001fb8:	2100      	movs	r1, #0
 8001fba:	1e7a      	subs	r2, r7, #1
 8001fbc:	4197      	sbcs	r7, r2
 8001fbe:	4457      	add	r7, sl
 8001fc0:	4557      	cmp	r7, sl
 8001fc2:	4180      	sbcs	r0, r0
 8001fc4:	1909      	adds	r1, r1, r4
 8001fc6:	4244      	negs	r4, r0
 8001fc8:	190c      	adds	r4, r1, r4
 8001fca:	0223      	lsls	r3, r4, #8
 8001fcc:	d53a      	bpl.n	8002044 <__aeabi_dsub+0x244>
 8001fce:	4b5d      	ldr	r3, [pc, #372]	; (8002144 <__aeabi_dsub+0x344>)
 8001fd0:	3601      	adds	r6, #1
 8001fd2:	429e      	cmp	r6, r3
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x1d8>
 8001fd6:	e14b      	b.n	8002270 <__aeabi_dsub+0x470>
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4b5b      	ldr	r3, [pc, #364]	; (8002148 <__aeabi_dsub+0x348>)
 8001fdc:	401c      	ands	r4, r3
 8001fde:	087b      	lsrs	r3, r7, #1
 8001fe0:	4017      	ands	r7, r2
 8001fe2:	431f      	orrs	r7, r3
 8001fe4:	07e2      	lsls	r2, r4, #31
 8001fe6:	4317      	orrs	r7, r2
 8001fe8:	0864      	lsrs	r4, r4, #1
 8001fea:	e78f      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8001fec:	0008      	movs	r0, r1
 8001fee:	4310      	orrs	r0, r2
 8001ff0:	d000      	beq.n	8001ff4 <__aeabi_dsub+0x1f4>
 8001ff2:	e724      	b.n	8001e3e <__aeabi_dsub+0x3e>
 8001ff4:	e721      	b.n	8001e3a <__aeabi_dsub+0x3a>
 8001ff6:	0023      	movs	r3, r4
 8001ff8:	433b      	orrs	r3, r7
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x1fe>
 8001ffc:	e1b9      	b.n	8002372 <__aeabi_dsub+0x572>
 8001ffe:	2280      	movs	r2, #128	; 0x80
 8002000:	0312      	lsls	r2, r2, #12
 8002002:	4314      	orrs	r4, r2
 8002004:	0324      	lsls	r4, r4, #12
 8002006:	0b24      	lsrs	r4, r4, #12
 8002008:	e79f      	b.n	8001f4a <__aeabi_dsub+0x14a>
 800200a:	002e      	movs	r6, r5
 800200c:	e77e      	b.n	8001f0c <__aeabi_dsub+0x10c>
 800200e:	0008      	movs	r0, r1
 8002010:	4310      	orrs	r0, r2
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x216>
 8002014:	e0ca      	b.n	80021ac <__aeabi_dsub+0x3ac>
 8002016:	1e58      	subs	r0, r3, #1
 8002018:	4684      	mov	ip, r0
 800201a:	2800      	cmp	r0, #0
 800201c:	d000      	beq.n	8002020 <__aeabi_dsub+0x220>
 800201e:	e0e7      	b.n	80021f0 <__aeabi_dsub+0x3f0>
 8002020:	4452      	add	r2, sl
 8002022:	4552      	cmp	r2, sl
 8002024:	4180      	sbcs	r0, r0
 8002026:	1864      	adds	r4, r4, r1
 8002028:	4240      	negs	r0, r0
 800202a:	1824      	adds	r4, r4, r0
 800202c:	0017      	movs	r7, r2
 800202e:	2601      	movs	r6, #1
 8002030:	0223      	lsls	r3, r4, #8
 8002032:	d507      	bpl.n	8002044 <__aeabi_dsub+0x244>
 8002034:	2602      	movs	r6, #2
 8002036:	e7cf      	b.n	8001fd8 <__aeabi_dsub+0x1d8>
 8002038:	4664      	mov	r4, ip
 800203a:	432c      	orrs	r4, r5
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x240>
 800203e:	e1b3      	b.n	80023a8 <__aeabi_dsub+0x5a8>
 8002040:	002c      	movs	r4, r5
 8002042:	4667      	mov	r7, ip
 8002044:	077b      	lsls	r3, r7, #29
 8002046:	d000      	beq.n	800204a <__aeabi_dsub+0x24a>
 8002048:	e762      	b.n	8001f10 <__aeabi_dsub+0x110>
 800204a:	0763      	lsls	r3, r4, #29
 800204c:	08ff      	lsrs	r7, r7, #3
 800204e:	431f      	orrs	r7, r3
 8002050:	2501      	movs	r5, #1
 8002052:	4643      	mov	r3, r8
 8002054:	08e4      	lsrs	r4, r4, #3
 8002056:	401d      	ands	r5, r3
 8002058:	e793      	b.n	8001f82 <__aeabi_dsub+0x182>
 800205a:	2d00      	cmp	r5, #0
 800205c:	d178      	bne.n	8002150 <__aeabi_dsub+0x350>
 800205e:	1c75      	adds	r5, r6, #1
 8002060:	056d      	lsls	r5, r5, #21
 8002062:	0d6d      	lsrs	r5, r5, #21
 8002064:	2d01      	cmp	r5, #1
 8002066:	dc00      	bgt.n	800206a <__aeabi_dsub+0x26a>
 8002068:	e0f2      	b.n	8002250 <__aeabi_dsub+0x450>
 800206a:	4650      	mov	r0, sl
 800206c:	1a80      	subs	r0, r0, r2
 800206e:	4582      	cmp	sl, r0
 8002070:	41bf      	sbcs	r7, r7
 8002072:	1a65      	subs	r5, r4, r1
 8002074:	427f      	negs	r7, r7
 8002076:	1bed      	subs	r5, r5, r7
 8002078:	4684      	mov	ip, r0
 800207a:	0228      	lsls	r0, r5, #8
 800207c:	d400      	bmi.n	8002080 <__aeabi_dsub+0x280>
 800207e:	e08c      	b.n	800219a <__aeabi_dsub+0x39a>
 8002080:	4650      	mov	r0, sl
 8002082:	1a17      	subs	r7, r2, r0
 8002084:	42ba      	cmp	r2, r7
 8002086:	4192      	sbcs	r2, r2
 8002088:	1b0c      	subs	r4, r1, r4
 800208a:	4255      	negs	r5, r2
 800208c:	1b65      	subs	r5, r4, r5
 800208e:	4698      	mov	r8, r3
 8002090:	e714      	b.n	8001ebc <__aeabi_dsub+0xbc>
 8002092:	2501      	movs	r5, #1
 8002094:	4643      	mov	r3, r8
 8002096:	2400      	movs	r4, #0
 8002098:	401d      	ands	r5, r3
 800209a:	2700      	movs	r7, #0
 800209c:	e755      	b.n	8001f4a <__aeabi_dsub+0x14a>
 800209e:	4c2a      	ldr	r4, [pc, #168]	; (8002148 <__aeabi_dsub+0x348>)
 80020a0:	1af6      	subs	r6, r6, r3
 80020a2:	402c      	ands	r4, r5
 80020a4:	e732      	b.n	8001f0c <__aeabi_dsub+0x10c>
 80020a6:	003d      	movs	r5, r7
 80020a8:	3828      	subs	r0, #40	; 0x28
 80020aa:	4085      	lsls	r5, r0
 80020ac:	2700      	movs	r7, #0
 80020ae:	e717      	b.n	8001ee0 <__aeabi_dsub+0xe0>
 80020b0:	0038      	movs	r0, r7
 80020b2:	f000 fa97 	bl	80025e4 <__clzsi2>
 80020b6:	3020      	adds	r0, #32
 80020b8:	e706      	b.n	8001ec8 <__aeabi_dsub+0xc8>
 80020ba:	430a      	orrs	r2, r1
 80020bc:	0017      	movs	r7, r2
 80020be:	2100      	movs	r1, #0
 80020c0:	1e7a      	subs	r2, r7, #1
 80020c2:	4197      	sbcs	r7, r2
 80020c4:	e6ee      	b.n	8001ea4 <__aeabi_dsub+0xa4>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d000      	beq.n	80020cc <__aeabi_dsub+0x2cc>
 80020ca:	e0e5      	b.n	8002298 <__aeabi_dsub+0x498>
 80020cc:	1c73      	adds	r3, r6, #1
 80020ce:	469c      	mov	ip, r3
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	0d5b      	lsrs	r3, r3, #21
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	dc00      	bgt.n	80020da <__aeabi_dsub+0x2da>
 80020d8:	e09f      	b.n	800221a <__aeabi_dsub+0x41a>
 80020da:	4b1a      	ldr	r3, [pc, #104]	; (8002144 <__aeabi_dsub+0x344>)
 80020dc:	459c      	cmp	ip, r3
 80020de:	d100      	bne.n	80020e2 <__aeabi_dsub+0x2e2>
 80020e0:	e0c5      	b.n	800226e <__aeabi_dsub+0x46e>
 80020e2:	4452      	add	r2, sl
 80020e4:	4552      	cmp	r2, sl
 80020e6:	4180      	sbcs	r0, r0
 80020e8:	1864      	adds	r4, r4, r1
 80020ea:	4240      	negs	r0, r0
 80020ec:	1824      	adds	r4, r4, r0
 80020ee:	07e7      	lsls	r7, r4, #31
 80020f0:	0852      	lsrs	r2, r2, #1
 80020f2:	4317      	orrs	r7, r2
 80020f4:	0864      	lsrs	r4, r4, #1
 80020f6:	4666      	mov	r6, ip
 80020f8:	e708      	b.n	8001f0c <__aeabi_dsub+0x10c>
 80020fa:	4812      	ldr	r0, [pc, #72]	; (8002144 <__aeabi_dsub+0x344>)
 80020fc:	4285      	cmp	r5, r0
 80020fe:	d100      	bne.n	8002102 <__aeabi_dsub+0x302>
 8002100:	e085      	b.n	800220e <__aeabi_dsub+0x40e>
 8002102:	001d      	movs	r5, r3
 8002104:	e6bc      	b.n	8001e80 <__aeabi_dsub+0x80>
 8002106:	0029      	movs	r1, r5
 8002108:	3e1f      	subs	r6, #31
 800210a:	40f1      	lsrs	r1, r6
 800210c:	2b20      	cmp	r3, #32
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x312>
 8002110:	e07f      	b.n	8002212 <__aeabi_dsub+0x412>
 8002112:	2240      	movs	r2, #64	; 0x40
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	409d      	lsls	r5, r3
 8002118:	432f      	orrs	r7, r5
 800211a:	1e7d      	subs	r5, r7, #1
 800211c:	41af      	sbcs	r7, r5
 800211e:	2400      	movs	r4, #0
 8002120:	430f      	orrs	r7, r1
 8002122:	2600      	movs	r6, #0
 8002124:	e78e      	b.n	8002044 <__aeabi_dsub+0x244>
 8002126:	002b      	movs	r3, r5
 8002128:	000f      	movs	r7, r1
 800212a:	3b20      	subs	r3, #32
 800212c:	40df      	lsrs	r7, r3
 800212e:	2d20      	cmp	r5, #32
 8002130:	d071      	beq.n	8002216 <__aeabi_dsub+0x416>
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	1b5d      	subs	r5, r3, r5
 8002136:	40a9      	lsls	r1, r5
 8002138:	430a      	orrs	r2, r1
 800213a:	1e51      	subs	r1, r2, #1
 800213c:	418a      	sbcs	r2, r1
 800213e:	2100      	movs	r1, #0
 8002140:	4317      	orrs	r7, r2
 8002142:	e6af      	b.n	8001ea4 <__aeabi_dsub+0xa4>
 8002144:	000007ff 	.word	0x000007ff
 8002148:	ff7fffff 	.word	0xff7fffff
 800214c:	800fffff 	.word	0x800fffff
 8002150:	2e00      	cmp	r6, #0
 8002152:	d03e      	beq.n	80021d2 <__aeabi_dsub+0x3d2>
 8002154:	4eb3      	ldr	r6, [pc, #716]	; (8002424 <__aeabi_dsub+0x624>)
 8002156:	45b4      	cmp	ip, r6
 8002158:	d045      	beq.n	80021e6 <__aeabi_dsub+0x3e6>
 800215a:	2680      	movs	r6, #128	; 0x80
 800215c:	0436      	lsls	r6, r6, #16
 800215e:	426d      	negs	r5, r5
 8002160:	4334      	orrs	r4, r6
 8002162:	2d38      	cmp	r5, #56	; 0x38
 8002164:	dd00      	ble.n	8002168 <__aeabi_dsub+0x368>
 8002166:	e0a8      	b.n	80022ba <__aeabi_dsub+0x4ba>
 8002168:	2d1f      	cmp	r5, #31
 800216a:	dd00      	ble.n	800216e <__aeabi_dsub+0x36e>
 800216c:	e11f      	b.n	80023ae <__aeabi_dsub+0x5ae>
 800216e:	2620      	movs	r6, #32
 8002170:	0027      	movs	r7, r4
 8002172:	4650      	mov	r0, sl
 8002174:	1b76      	subs	r6, r6, r5
 8002176:	40b7      	lsls	r7, r6
 8002178:	40e8      	lsrs	r0, r5
 800217a:	4307      	orrs	r7, r0
 800217c:	4650      	mov	r0, sl
 800217e:	40b0      	lsls	r0, r6
 8002180:	1e46      	subs	r6, r0, #1
 8002182:	41b0      	sbcs	r0, r6
 8002184:	40ec      	lsrs	r4, r5
 8002186:	4338      	orrs	r0, r7
 8002188:	1a17      	subs	r7, r2, r0
 800218a:	42ba      	cmp	r2, r7
 800218c:	4192      	sbcs	r2, r2
 800218e:	1b0c      	subs	r4, r1, r4
 8002190:	4252      	negs	r2, r2
 8002192:	1aa4      	subs	r4, r4, r2
 8002194:	4666      	mov	r6, ip
 8002196:	4698      	mov	r8, r3
 8002198:	e68b      	b.n	8001eb2 <__aeabi_dsub+0xb2>
 800219a:	4664      	mov	r4, ip
 800219c:	4667      	mov	r7, ip
 800219e:	432c      	orrs	r4, r5
 80021a0:	d000      	beq.n	80021a4 <__aeabi_dsub+0x3a4>
 80021a2:	e68b      	b.n	8001ebc <__aeabi_dsub+0xbc>
 80021a4:	2500      	movs	r5, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	2700      	movs	r7, #0
 80021aa:	e6ea      	b.n	8001f82 <__aeabi_dsub+0x182>
 80021ac:	001e      	movs	r6, r3
 80021ae:	e6ad      	b.n	8001f0c <__aeabi_dsub+0x10c>
 80021b0:	2b1f      	cmp	r3, #31
 80021b2:	dc60      	bgt.n	8002276 <__aeabi_dsub+0x476>
 80021b4:	2720      	movs	r7, #32
 80021b6:	1af8      	subs	r0, r7, r3
 80021b8:	000f      	movs	r7, r1
 80021ba:	4684      	mov	ip, r0
 80021bc:	4087      	lsls	r7, r0
 80021be:	0010      	movs	r0, r2
 80021c0:	40d8      	lsrs	r0, r3
 80021c2:	4307      	orrs	r7, r0
 80021c4:	4660      	mov	r0, ip
 80021c6:	4082      	lsls	r2, r0
 80021c8:	1e50      	subs	r0, r2, #1
 80021ca:	4182      	sbcs	r2, r0
 80021cc:	40d9      	lsrs	r1, r3
 80021ce:	4317      	orrs	r7, r2
 80021d0:	e6f5      	b.n	8001fbe <__aeabi_dsub+0x1be>
 80021d2:	0026      	movs	r6, r4
 80021d4:	4650      	mov	r0, sl
 80021d6:	4306      	orrs	r6, r0
 80021d8:	d005      	beq.n	80021e6 <__aeabi_dsub+0x3e6>
 80021da:	43ed      	mvns	r5, r5
 80021dc:	2d00      	cmp	r5, #0
 80021de:	d0d3      	beq.n	8002188 <__aeabi_dsub+0x388>
 80021e0:	4e90      	ldr	r6, [pc, #576]	; (8002424 <__aeabi_dsub+0x624>)
 80021e2:	45b4      	cmp	ip, r6
 80021e4:	d1bd      	bne.n	8002162 <__aeabi_dsub+0x362>
 80021e6:	000c      	movs	r4, r1
 80021e8:	0017      	movs	r7, r2
 80021ea:	4666      	mov	r6, ip
 80021ec:	4698      	mov	r8, r3
 80021ee:	e68d      	b.n	8001f0c <__aeabi_dsub+0x10c>
 80021f0:	488c      	ldr	r0, [pc, #560]	; (8002424 <__aeabi_dsub+0x624>)
 80021f2:	4283      	cmp	r3, r0
 80021f4:	d00b      	beq.n	800220e <__aeabi_dsub+0x40e>
 80021f6:	4663      	mov	r3, ip
 80021f8:	e6d9      	b.n	8001fae <__aeabi_dsub+0x1ae>
 80021fa:	2d00      	cmp	r5, #0
 80021fc:	d000      	beq.n	8002200 <__aeabi_dsub+0x400>
 80021fe:	e096      	b.n	800232e <__aeabi_dsub+0x52e>
 8002200:	0008      	movs	r0, r1
 8002202:	4310      	orrs	r0, r2
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x408>
 8002206:	e0e2      	b.n	80023ce <__aeabi_dsub+0x5ce>
 8002208:	000c      	movs	r4, r1
 800220a:	0017      	movs	r7, r2
 800220c:	4698      	mov	r8, r3
 800220e:	4e85      	ldr	r6, [pc, #532]	; (8002424 <__aeabi_dsub+0x624>)
 8002210:	e67c      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8002212:	2500      	movs	r5, #0
 8002214:	e780      	b.n	8002118 <__aeabi_dsub+0x318>
 8002216:	2100      	movs	r1, #0
 8002218:	e78e      	b.n	8002138 <__aeabi_dsub+0x338>
 800221a:	0023      	movs	r3, r4
 800221c:	4650      	mov	r0, sl
 800221e:	4303      	orrs	r3, r0
 8002220:	2e00      	cmp	r6, #0
 8002222:	d000      	beq.n	8002226 <__aeabi_dsub+0x426>
 8002224:	e0a8      	b.n	8002378 <__aeabi_dsub+0x578>
 8002226:	2b00      	cmp	r3, #0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x42c>
 800222a:	e0de      	b.n	80023ea <__aeabi_dsub+0x5ea>
 800222c:	000b      	movs	r3, r1
 800222e:	4313      	orrs	r3, r2
 8002230:	d100      	bne.n	8002234 <__aeabi_dsub+0x434>
 8002232:	e66b      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8002234:	4452      	add	r2, sl
 8002236:	4552      	cmp	r2, sl
 8002238:	4180      	sbcs	r0, r0
 800223a:	1864      	adds	r4, r4, r1
 800223c:	4240      	negs	r0, r0
 800223e:	1824      	adds	r4, r4, r0
 8002240:	0017      	movs	r7, r2
 8002242:	0223      	lsls	r3, r4, #8
 8002244:	d400      	bmi.n	8002248 <__aeabi_dsub+0x448>
 8002246:	e6fd      	b.n	8002044 <__aeabi_dsub+0x244>
 8002248:	4b77      	ldr	r3, [pc, #476]	; (8002428 <__aeabi_dsub+0x628>)
 800224a:	4666      	mov	r6, ip
 800224c:	401c      	ands	r4, r3
 800224e:	e65d      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8002250:	0025      	movs	r5, r4
 8002252:	4650      	mov	r0, sl
 8002254:	4305      	orrs	r5, r0
 8002256:	2e00      	cmp	r6, #0
 8002258:	d1cf      	bne.n	80021fa <__aeabi_dsub+0x3fa>
 800225a:	2d00      	cmp	r5, #0
 800225c:	d14f      	bne.n	80022fe <__aeabi_dsub+0x4fe>
 800225e:	000c      	movs	r4, r1
 8002260:	4314      	orrs	r4, r2
 8002262:	d100      	bne.n	8002266 <__aeabi_dsub+0x466>
 8002264:	e0a0      	b.n	80023a8 <__aeabi_dsub+0x5a8>
 8002266:	000c      	movs	r4, r1
 8002268:	0017      	movs	r7, r2
 800226a:	4698      	mov	r8, r3
 800226c:	e64e      	b.n	8001f0c <__aeabi_dsub+0x10c>
 800226e:	4666      	mov	r6, ip
 8002270:	2400      	movs	r4, #0
 8002272:	2700      	movs	r7, #0
 8002274:	e685      	b.n	8001f82 <__aeabi_dsub+0x182>
 8002276:	001f      	movs	r7, r3
 8002278:	0008      	movs	r0, r1
 800227a:	3f20      	subs	r7, #32
 800227c:	40f8      	lsrs	r0, r7
 800227e:	0007      	movs	r7, r0
 8002280:	2b20      	cmp	r3, #32
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x486>
 8002284:	e08e      	b.n	80023a4 <__aeabi_dsub+0x5a4>
 8002286:	2040      	movs	r0, #64	; 0x40
 8002288:	1ac3      	subs	r3, r0, r3
 800228a:	4099      	lsls	r1, r3
 800228c:	430a      	orrs	r2, r1
 800228e:	1e51      	subs	r1, r2, #1
 8002290:	418a      	sbcs	r2, r1
 8002292:	2100      	movs	r1, #0
 8002294:	4317      	orrs	r7, r2
 8002296:	e692      	b.n	8001fbe <__aeabi_dsub+0x1be>
 8002298:	2e00      	cmp	r6, #0
 800229a:	d114      	bne.n	80022c6 <__aeabi_dsub+0x4c6>
 800229c:	0026      	movs	r6, r4
 800229e:	4650      	mov	r0, sl
 80022a0:	4306      	orrs	r6, r0
 80022a2:	d062      	beq.n	800236a <__aeabi_dsub+0x56a>
 80022a4:	43db      	mvns	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d15c      	bne.n	8002364 <__aeabi_dsub+0x564>
 80022aa:	1887      	adds	r7, r0, r2
 80022ac:	4297      	cmp	r7, r2
 80022ae:	4192      	sbcs	r2, r2
 80022b0:	1864      	adds	r4, r4, r1
 80022b2:	4252      	negs	r2, r2
 80022b4:	18a4      	adds	r4, r4, r2
 80022b6:	4666      	mov	r6, ip
 80022b8:	e687      	b.n	8001fca <__aeabi_dsub+0x1ca>
 80022ba:	4650      	mov	r0, sl
 80022bc:	4320      	orrs	r0, r4
 80022be:	1e44      	subs	r4, r0, #1
 80022c0:	41a0      	sbcs	r0, r4
 80022c2:	2400      	movs	r4, #0
 80022c4:	e760      	b.n	8002188 <__aeabi_dsub+0x388>
 80022c6:	4e57      	ldr	r6, [pc, #348]	; (8002424 <__aeabi_dsub+0x624>)
 80022c8:	45b4      	cmp	ip, r6
 80022ca:	d04e      	beq.n	800236a <__aeabi_dsub+0x56a>
 80022cc:	2680      	movs	r6, #128	; 0x80
 80022ce:	0436      	lsls	r6, r6, #16
 80022d0:	425b      	negs	r3, r3
 80022d2:	4334      	orrs	r4, r6
 80022d4:	2b38      	cmp	r3, #56	; 0x38
 80022d6:	dd00      	ble.n	80022da <__aeabi_dsub+0x4da>
 80022d8:	e07f      	b.n	80023da <__aeabi_dsub+0x5da>
 80022da:	2b1f      	cmp	r3, #31
 80022dc:	dd00      	ble.n	80022e0 <__aeabi_dsub+0x4e0>
 80022de:	e08b      	b.n	80023f8 <__aeabi_dsub+0x5f8>
 80022e0:	2620      	movs	r6, #32
 80022e2:	0027      	movs	r7, r4
 80022e4:	4650      	mov	r0, sl
 80022e6:	1af6      	subs	r6, r6, r3
 80022e8:	40b7      	lsls	r7, r6
 80022ea:	40d8      	lsrs	r0, r3
 80022ec:	4307      	orrs	r7, r0
 80022ee:	4650      	mov	r0, sl
 80022f0:	40b0      	lsls	r0, r6
 80022f2:	1e46      	subs	r6, r0, #1
 80022f4:	41b0      	sbcs	r0, r6
 80022f6:	4307      	orrs	r7, r0
 80022f8:	40dc      	lsrs	r4, r3
 80022fa:	18bf      	adds	r7, r7, r2
 80022fc:	e7d6      	b.n	80022ac <__aeabi_dsub+0x4ac>
 80022fe:	000d      	movs	r5, r1
 8002300:	4315      	orrs	r5, r2
 8002302:	d100      	bne.n	8002306 <__aeabi_dsub+0x506>
 8002304:	e602      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8002306:	4650      	mov	r0, sl
 8002308:	1a80      	subs	r0, r0, r2
 800230a:	4582      	cmp	sl, r0
 800230c:	41bf      	sbcs	r7, r7
 800230e:	1a65      	subs	r5, r4, r1
 8002310:	427f      	negs	r7, r7
 8002312:	1bed      	subs	r5, r5, r7
 8002314:	4684      	mov	ip, r0
 8002316:	0228      	lsls	r0, r5, #8
 8002318:	d400      	bmi.n	800231c <__aeabi_dsub+0x51c>
 800231a:	e68d      	b.n	8002038 <__aeabi_dsub+0x238>
 800231c:	4650      	mov	r0, sl
 800231e:	1a17      	subs	r7, r2, r0
 8002320:	42ba      	cmp	r2, r7
 8002322:	4192      	sbcs	r2, r2
 8002324:	1b0c      	subs	r4, r1, r4
 8002326:	4252      	negs	r2, r2
 8002328:	1aa4      	subs	r4, r4, r2
 800232a:	4698      	mov	r8, r3
 800232c:	e5ee      	b.n	8001f0c <__aeabi_dsub+0x10c>
 800232e:	000d      	movs	r5, r1
 8002330:	4315      	orrs	r5, r2
 8002332:	d100      	bne.n	8002336 <__aeabi_dsub+0x536>
 8002334:	e76b      	b.n	800220e <__aeabi_dsub+0x40e>
 8002336:	4650      	mov	r0, sl
 8002338:	0767      	lsls	r7, r4, #29
 800233a:	08c0      	lsrs	r0, r0, #3
 800233c:	4307      	orrs	r7, r0
 800233e:	2080      	movs	r0, #128	; 0x80
 8002340:	08e4      	lsrs	r4, r4, #3
 8002342:	0300      	lsls	r0, r0, #12
 8002344:	4204      	tst	r4, r0
 8002346:	d007      	beq.n	8002358 <__aeabi_dsub+0x558>
 8002348:	08cd      	lsrs	r5, r1, #3
 800234a:	4205      	tst	r5, r0
 800234c:	d104      	bne.n	8002358 <__aeabi_dsub+0x558>
 800234e:	002c      	movs	r4, r5
 8002350:	4698      	mov	r8, r3
 8002352:	08d7      	lsrs	r7, r2, #3
 8002354:	0749      	lsls	r1, r1, #29
 8002356:	430f      	orrs	r7, r1
 8002358:	0f7b      	lsrs	r3, r7, #29
 800235a:	00e4      	lsls	r4, r4, #3
 800235c:	431c      	orrs	r4, r3
 800235e:	00ff      	lsls	r7, r7, #3
 8002360:	4e30      	ldr	r6, [pc, #192]	; (8002424 <__aeabi_dsub+0x624>)
 8002362:	e5d3      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8002364:	4e2f      	ldr	r6, [pc, #188]	; (8002424 <__aeabi_dsub+0x624>)
 8002366:	45b4      	cmp	ip, r6
 8002368:	d1b4      	bne.n	80022d4 <__aeabi_dsub+0x4d4>
 800236a:	000c      	movs	r4, r1
 800236c:	0017      	movs	r7, r2
 800236e:	4666      	mov	r6, ip
 8002370:	e5cc      	b.n	8001f0c <__aeabi_dsub+0x10c>
 8002372:	2700      	movs	r7, #0
 8002374:	2400      	movs	r4, #0
 8002376:	e5e8      	b.n	8001f4a <__aeabi_dsub+0x14a>
 8002378:	2b00      	cmp	r3, #0
 800237a:	d039      	beq.n	80023f0 <__aeabi_dsub+0x5f0>
 800237c:	000b      	movs	r3, r1
 800237e:	4313      	orrs	r3, r2
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x584>
 8002382:	e744      	b.n	800220e <__aeabi_dsub+0x40e>
 8002384:	08c0      	lsrs	r0, r0, #3
 8002386:	0767      	lsls	r7, r4, #29
 8002388:	4307      	orrs	r7, r0
 800238a:	2080      	movs	r0, #128	; 0x80
 800238c:	08e4      	lsrs	r4, r4, #3
 800238e:	0300      	lsls	r0, r0, #12
 8002390:	4204      	tst	r4, r0
 8002392:	d0e1      	beq.n	8002358 <__aeabi_dsub+0x558>
 8002394:	08cb      	lsrs	r3, r1, #3
 8002396:	4203      	tst	r3, r0
 8002398:	d1de      	bne.n	8002358 <__aeabi_dsub+0x558>
 800239a:	08d7      	lsrs	r7, r2, #3
 800239c:	0749      	lsls	r1, r1, #29
 800239e:	430f      	orrs	r7, r1
 80023a0:	001c      	movs	r4, r3
 80023a2:	e7d9      	b.n	8002358 <__aeabi_dsub+0x558>
 80023a4:	2100      	movs	r1, #0
 80023a6:	e771      	b.n	800228c <__aeabi_dsub+0x48c>
 80023a8:	2500      	movs	r5, #0
 80023aa:	2700      	movs	r7, #0
 80023ac:	e5e9      	b.n	8001f82 <__aeabi_dsub+0x182>
 80023ae:	002e      	movs	r6, r5
 80023b0:	0027      	movs	r7, r4
 80023b2:	3e20      	subs	r6, #32
 80023b4:	40f7      	lsrs	r7, r6
 80023b6:	2d20      	cmp	r5, #32
 80023b8:	d02f      	beq.n	800241a <__aeabi_dsub+0x61a>
 80023ba:	2640      	movs	r6, #64	; 0x40
 80023bc:	1b75      	subs	r5, r6, r5
 80023be:	40ac      	lsls	r4, r5
 80023c0:	4650      	mov	r0, sl
 80023c2:	4320      	orrs	r0, r4
 80023c4:	1e44      	subs	r4, r0, #1
 80023c6:	41a0      	sbcs	r0, r4
 80023c8:	2400      	movs	r4, #0
 80023ca:	4338      	orrs	r0, r7
 80023cc:	e6dc      	b.n	8002188 <__aeabi_dsub+0x388>
 80023ce:	2480      	movs	r4, #128	; 0x80
 80023d0:	2500      	movs	r5, #0
 80023d2:	0324      	lsls	r4, r4, #12
 80023d4:	4e13      	ldr	r6, [pc, #76]	; (8002424 <__aeabi_dsub+0x624>)
 80023d6:	2700      	movs	r7, #0
 80023d8:	e5d3      	b.n	8001f82 <__aeabi_dsub+0x182>
 80023da:	4650      	mov	r0, sl
 80023dc:	4320      	orrs	r0, r4
 80023de:	0007      	movs	r7, r0
 80023e0:	1e78      	subs	r0, r7, #1
 80023e2:	4187      	sbcs	r7, r0
 80023e4:	2400      	movs	r4, #0
 80023e6:	18bf      	adds	r7, r7, r2
 80023e8:	e760      	b.n	80022ac <__aeabi_dsub+0x4ac>
 80023ea:	000c      	movs	r4, r1
 80023ec:	0017      	movs	r7, r2
 80023ee:	e58d      	b.n	8001f0c <__aeabi_dsub+0x10c>
 80023f0:	000c      	movs	r4, r1
 80023f2:	0017      	movs	r7, r2
 80023f4:	4e0b      	ldr	r6, [pc, #44]	; (8002424 <__aeabi_dsub+0x624>)
 80023f6:	e589      	b.n	8001f0c <__aeabi_dsub+0x10c>
 80023f8:	001e      	movs	r6, r3
 80023fa:	0027      	movs	r7, r4
 80023fc:	3e20      	subs	r6, #32
 80023fe:	40f7      	lsrs	r7, r6
 8002400:	2b20      	cmp	r3, #32
 8002402:	d00c      	beq.n	800241e <__aeabi_dsub+0x61e>
 8002404:	2640      	movs	r6, #64	; 0x40
 8002406:	1af3      	subs	r3, r6, r3
 8002408:	409c      	lsls	r4, r3
 800240a:	4650      	mov	r0, sl
 800240c:	4320      	orrs	r0, r4
 800240e:	1e44      	subs	r4, r0, #1
 8002410:	41a0      	sbcs	r0, r4
 8002412:	4307      	orrs	r7, r0
 8002414:	2400      	movs	r4, #0
 8002416:	18bf      	adds	r7, r7, r2
 8002418:	e748      	b.n	80022ac <__aeabi_dsub+0x4ac>
 800241a:	2400      	movs	r4, #0
 800241c:	e7d0      	b.n	80023c0 <__aeabi_dsub+0x5c0>
 800241e:	2400      	movs	r4, #0
 8002420:	e7f3      	b.n	800240a <__aeabi_dsub+0x60a>
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	000007ff 	.word	0x000007ff
 8002428:	ff7fffff 	.word	0xff7fffff

0800242c <__aeabi_f2d>:
 800242c:	0041      	lsls	r1, r0, #1
 800242e:	0e09      	lsrs	r1, r1, #24
 8002430:	1c4b      	adds	r3, r1, #1
 8002432:	b570      	push	{r4, r5, r6, lr}
 8002434:	b2db      	uxtb	r3, r3
 8002436:	0246      	lsls	r6, r0, #9
 8002438:	0a75      	lsrs	r5, r6, #9
 800243a:	0fc4      	lsrs	r4, r0, #31
 800243c:	2b01      	cmp	r3, #1
 800243e:	dd14      	ble.n	800246a <__aeabi_f2d+0x3e>
 8002440:	23e0      	movs	r3, #224	; 0xe0
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	076d      	lsls	r5, r5, #29
 8002446:	0b36      	lsrs	r6, r6, #12
 8002448:	18cb      	adds	r3, r1, r3
 800244a:	2100      	movs	r1, #0
 800244c:	0d0a      	lsrs	r2, r1, #20
 800244e:	0028      	movs	r0, r5
 8002450:	0512      	lsls	r2, r2, #20
 8002452:	4d1c      	ldr	r5, [pc, #112]	; (80024c4 <__aeabi_f2d+0x98>)
 8002454:	4332      	orrs	r2, r6
 8002456:	055b      	lsls	r3, r3, #21
 8002458:	402a      	ands	r2, r5
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	4313      	orrs	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	07e4      	lsls	r4, r4, #31
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	4323      	orrs	r3, r4
 8002466:	0019      	movs	r1, r3
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	2900      	cmp	r1, #0
 800246c:	d114      	bne.n	8002498 <__aeabi_f2d+0x6c>
 800246e:	2d00      	cmp	r5, #0
 8002470:	d01e      	beq.n	80024b0 <__aeabi_f2d+0x84>
 8002472:	0028      	movs	r0, r5
 8002474:	f000 f8b6 	bl	80025e4 <__clzsi2>
 8002478:	280a      	cmp	r0, #10
 800247a:	dc1c      	bgt.n	80024b6 <__aeabi_f2d+0x8a>
 800247c:	230b      	movs	r3, #11
 800247e:	002a      	movs	r2, r5
 8002480:	1a1b      	subs	r3, r3, r0
 8002482:	40da      	lsrs	r2, r3
 8002484:	0003      	movs	r3, r0
 8002486:	3315      	adds	r3, #21
 8002488:	409d      	lsls	r5, r3
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <__aeabi_f2d+0x9c>)
 800248c:	0312      	lsls	r2, r2, #12
 800248e:	1a1b      	subs	r3, r3, r0
 8002490:	055b      	lsls	r3, r3, #21
 8002492:	0b16      	lsrs	r6, r2, #12
 8002494:	0d5b      	lsrs	r3, r3, #21
 8002496:	e7d8      	b.n	800244a <__aeabi_f2d+0x1e>
 8002498:	2d00      	cmp	r5, #0
 800249a:	d006      	beq.n	80024aa <__aeabi_f2d+0x7e>
 800249c:	0b32      	lsrs	r2, r6, #12
 800249e:	2680      	movs	r6, #128	; 0x80
 80024a0:	0336      	lsls	r6, r6, #12
 80024a2:	076d      	lsls	r5, r5, #29
 80024a4:	4316      	orrs	r6, r2
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <__aeabi_f2d+0xa0>)
 80024a8:	e7cf      	b.n	800244a <__aeabi_f2d+0x1e>
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <__aeabi_f2d+0xa0>)
 80024ac:	2600      	movs	r6, #0
 80024ae:	e7cc      	b.n	800244a <__aeabi_f2d+0x1e>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2600      	movs	r6, #0
 80024b4:	e7c9      	b.n	800244a <__aeabi_f2d+0x1e>
 80024b6:	0003      	movs	r3, r0
 80024b8:	002a      	movs	r2, r5
 80024ba:	3b0b      	subs	r3, #11
 80024bc:	409a      	lsls	r2, r3
 80024be:	2500      	movs	r5, #0
 80024c0:	e7e3      	b.n	800248a <__aeabi_f2d+0x5e>
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	800fffff 	.word	0x800fffff
 80024c8:	00000389 	.word	0x00000389
 80024cc:	000007ff 	.word	0x000007ff

080024d0 <__aeabi_d2f>:
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024d2:	004c      	lsls	r4, r1, #1
 80024d4:	0d64      	lsrs	r4, r4, #21
 80024d6:	030b      	lsls	r3, r1, #12
 80024d8:	1c62      	adds	r2, r4, #1
 80024da:	0f45      	lsrs	r5, r0, #29
 80024dc:	0a5b      	lsrs	r3, r3, #9
 80024de:	0552      	lsls	r2, r2, #21
 80024e0:	432b      	orrs	r3, r5
 80024e2:	0fc9      	lsrs	r1, r1, #31
 80024e4:	00c5      	lsls	r5, r0, #3
 80024e6:	0d52      	lsrs	r2, r2, #21
 80024e8:	2a01      	cmp	r2, #1
 80024ea:	dd28      	ble.n	800253e <__aeabi_d2f+0x6e>
 80024ec:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <__aeabi_d2f+0x108>)
 80024ee:	18a6      	adds	r6, r4, r2
 80024f0:	2efe      	cmp	r6, #254	; 0xfe
 80024f2:	dc1b      	bgt.n	800252c <__aeabi_d2f+0x5c>
 80024f4:	2e00      	cmp	r6, #0
 80024f6:	dd3e      	ble.n	8002576 <__aeabi_d2f+0xa6>
 80024f8:	0180      	lsls	r0, r0, #6
 80024fa:	0002      	movs	r2, r0
 80024fc:	1e50      	subs	r0, r2, #1
 80024fe:	4182      	sbcs	r2, r0
 8002500:	0f6d      	lsrs	r5, r5, #29
 8002502:	432a      	orrs	r2, r5
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4313      	orrs	r3, r2
 8002508:	075a      	lsls	r2, r3, #29
 800250a:	d004      	beq.n	8002516 <__aeabi_d2f+0x46>
 800250c:	220f      	movs	r2, #15
 800250e:	401a      	ands	r2, r3
 8002510:	2a04      	cmp	r2, #4
 8002512:	d000      	beq.n	8002516 <__aeabi_d2f+0x46>
 8002514:	3304      	adds	r3, #4
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	04d2      	lsls	r2, r2, #19
 800251a:	401a      	ands	r2, r3
 800251c:	d05a      	beq.n	80025d4 <__aeabi_d2f+0x104>
 800251e:	3601      	adds	r6, #1
 8002520:	2eff      	cmp	r6, #255	; 0xff
 8002522:	d003      	beq.n	800252c <__aeabi_d2f+0x5c>
 8002524:	019b      	lsls	r3, r3, #6
 8002526:	0a5b      	lsrs	r3, r3, #9
 8002528:	b2f4      	uxtb	r4, r6
 800252a:	e001      	b.n	8002530 <__aeabi_d2f+0x60>
 800252c:	24ff      	movs	r4, #255	; 0xff
 800252e:	2300      	movs	r3, #0
 8002530:	0258      	lsls	r0, r3, #9
 8002532:	05e4      	lsls	r4, r4, #23
 8002534:	0a40      	lsrs	r0, r0, #9
 8002536:	07c9      	lsls	r1, r1, #31
 8002538:	4320      	orrs	r0, r4
 800253a:	4308      	orrs	r0, r1
 800253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253e:	2c00      	cmp	r4, #0
 8002540:	d007      	beq.n	8002552 <__aeabi_d2f+0x82>
 8002542:	431d      	orrs	r5, r3
 8002544:	d0f2      	beq.n	800252c <__aeabi_d2f+0x5c>
 8002546:	2080      	movs	r0, #128	; 0x80
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	0480      	lsls	r0, r0, #18
 800254c:	4303      	orrs	r3, r0
 800254e:	26ff      	movs	r6, #255	; 0xff
 8002550:	e7da      	b.n	8002508 <__aeabi_d2f+0x38>
 8002552:	432b      	orrs	r3, r5
 8002554:	d003      	beq.n	800255e <__aeabi_d2f+0x8e>
 8002556:	2305      	movs	r3, #5
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	2cff      	cmp	r4, #255	; 0xff
 800255c:	d003      	beq.n	8002566 <__aeabi_d2f+0x96>
 800255e:	025b      	lsls	r3, r3, #9
 8002560:	0a5b      	lsrs	r3, r3, #9
 8002562:	b2e4      	uxtb	r4, r4
 8002564:	e7e4      	b.n	8002530 <__aeabi_d2f+0x60>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d032      	beq.n	80025d0 <__aeabi_d2f+0x100>
 800256a:	2080      	movs	r0, #128	; 0x80
 800256c:	03c0      	lsls	r0, r0, #15
 800256e:	4303      	orrs	r3, r0
 8002570:	025b      	lsls	r3, r3, #9
 8002572:	0a5b      	lsrs	r3, r3, #9
 8002574:	e7dc      	b.n	8002530 <__aeabi_d2f+0x60>
 8002576:	0032      	movs	r2, r6
 8002578:	3217      	adds	r2, #23
 800257a:	db14      	blt.n	80025a6 <__aeabi_d2f+0xd6>
 800257c:	2280      	movs	r2, #128	; 0x80
 800257e:	271e      	movs	r7, #30
 8002580:	0412      	lsls	r2, r2, #16
 8002582:	4313      	orrs	r3, r2
 8002584:	1bbf      	subs	r7, r7, r6
 8002586:	2f1f      	cmp	r7, #31
 8002588:	dc0f      	bgt.n	80025aa <__aeabi_d2f+0xda>
 800258a:	4a14      	ldr	r2, [pc, #80]	; (80025dc <__aeabi_d2f+0x10c>)
 800258c:	4694      	mov	ip, r2
 800258e:	4464      	add	r4, ip
 8002590:	002a      	movs	r2, r5
 8002592:	40a5      	lsls	r5, r4
 8002594:	002e      	movs	r6, r5
 8002596:	40a3      	lsls	r3, r4
 8002598:	1e75      	subs	r5, r6, #1
 800259a:	41ae      	sbcs	r6, r5
 800259c:	40fa      	lsrs	r2, r7
 800259e:	4333      	orrs	r3, r6
 80025a0:	4313      	orrs	r3, r2
 80025a2:	2600      	movs	r6, #0
 80025a4:	e7b0      	b.n	8002508 <__aeabi_d2f+0x38>
 80025a6:	2400      	movs	r4, #0
 80025a8:	e7d5      	b.n	8002556 <__aeabi_d2f+0x86>
 80025aa:	2202      	movs	r2, #2
 80025ac:	4252      	negs	r2, r2
 80025ae:	1b96      	subs	r6, r2, r6
 80025b0:	001a      	movs	r2, r3
 80025b2:	40f2      	lsrs	r2, r6
 80025b4:	2f20      	cmp	r7, #32
 80025b6:	d009      	beq.n	80025cc <__aeabi_d2f+0xfc>
 80025b8:	4809      	ldr	r0, [pc, #36]	; (80025e0 <__aeabi_d2f+0x110>)
 80025ba:	4684      	mov	ip, r0
 80025bc:	4464      	add	r4, ip
 80025be:	40a3      	lsls	r3, r4
 80025c0:	432b      	orrs	r3, r5
 80025c2:	1e5d      	subs	r5, r3, #1
 80025c4:	41ab      	sbcs	r3, r5
 80025c6:	2600      	movs	r6, #0
 80025c8:	4313      	orrs	r3, r2
 80025ca:	e79d      	b.n	8002508 <__aeabi_d2f+0x38>
 80025cc:	2300      	movs	r3, #0
 80025ce:	e7f7      	b.n	80025c0 <__aeabi_d2f+0xf0>
 80025d0:	2300      	movs	r3, #0
 80025d2:	e7ad      	b.n	8002530 <__aeabi_d2f+0x60>
 80025d4:	0034      	movs	r4, r6
 80025d6:	e7bf      	b.n	8002558 <__aeabi_d2f+0x88>
 80025d8:	fffffc80 	.word	0xfffffc80
 80025dc:	fffffc82 	.word	0xfffffc82
 80025e0:	fffffca2 	.word	0xfffffca2

080025e4 <__clzsi2>:
 80025e4:	211c      	movs	r1, #28
 80025e6:	2301      	movs	r3, #1
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	4298      	cmp	r0, r3
 80025ec:	d301      	bcc.n	80025f2 <__clzsi2+0xe>
 80025ee:	0c00      	lsrs	r0, r0, #16
 80025f0:	3910      	subs	r1, #16
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	4298      	cmp	r0, r3
 80025f6:	d301      	bcc.n	80025fc <__clzsi2+0x18>
 80025f8:	0a00      	lsrs	r0, r0, #8
 80025fa:	3908      	subs	r1, #8
 80025fc:	091b      	lsrs	r3, r3, #4
 80025fe:	4298      	cmp	r0, r3
 8002600:	d301      	bcc.n	8002606 <__clzsi2+0x22>
 8002602:	0900      	lsrs	r0, r0, #4
 8002604:	3904      	subs	r1, #4
 8002606:	a202      	add	r2, pc, #8	; (adr r2, 8002610 <__clzsi2+0x2c>)
 8002608:	5c10      	ldrb	r0, [r2, r0]
 800260a:	1840      	adds	r0, r0, r1
 800260c:	4770      	bx	lr
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	02020304 	.word	0x02020304
 8002614:	01010101 	.word	0x01010101
	...

08002620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002620:	b510      	push	{r4, lr}
 8002622:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002624:	f000 feea 	bl	80033fc <HAL_RCC_GetHCLKFreq>
 8002628:	21fa      	movs	r1, #250	; 0xfa
 800262a:	0089      	lsls	r1, r1, #2
 800262c:	f7fd fd76 	bl	800011c <__udivsi3>
 8002630:	f000 fac8 	bl	8002bc4 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002634:	2001      	movs	r0, #1
 8002636:	2200      	movs	r2, #0
 8002638:	0021      	movs	r1, r4
 800263a:	4240      	negs	r0, r0
 800263c:	f000 fa88 	bl	8002b50 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8002640:	2000      	movs	r0, #0
 8002642:	bd10      	pop	{r4, pc}

08002644 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002644:	2310      	movs	r3, #16
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_Init+0x1c>)
{
 8002648:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264a:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800264c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800264e:	430b      	orrs	r3, r1
 8002650:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002652:	f7ff ffe5 	bl	8002620 <HAL_InitTick>
  HAL_MspInit();
 8002656:	f002 f811 	bl	800467c <HAL_MspInit>
}
 800265a:	2000      	movs	r0, #0
 800265c:	bd10      	pop	{r4, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <HAL_IncTick+0xc>)
 8002666:	6813      	ldr	r3, [r2, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	4770      	bx	lr
 800266e:	46c0      	nop			; (mov r8, r8)
 8002670:	20000020 	.word	0x20000020

08002674 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <HAL_GetTick+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
}
 8002678:	4770      	bx	lr
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	20000020 	.word	0x20000020

08002680 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8002680:	2300      	movs	r3, #0
{
 8002682:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002684:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8002686:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002688:	6803      	ldr	r3, [r0, #0]
{
 800268a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	400a      	ands	r2, r1
 8002690:	2a01      	cmp	r2, #1
 8002692:	d107      	bne.n	80026a4 <ADC_Enable+0x24>
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	4211      	tst	r1, r2
 8002698:	d001      	beq.n	800269e <ADC_Enable+0x1e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800269a:	2000      	movs	r0, #0
}
 800269c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	0412      	lsls	r2, r2, #16
 80026a2:	d4fa      	bmi.n	800269a <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80026a4:	6899      	ldr	r1, [r3, #8]
 80026a6:	4a19      	ldr	r2, [pc, #100]	; (800270c <ADC_Enable+0x8c>)
 80026a8:	4211      	tst	r1, r2
 80026aa:	d008      	beq.n	80026be <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ac:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80026b2:	4313      	orrs	r3, r2
 80026b4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026b8:	4303      	orrs	r3, r0
 80026ba:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80026bc:	e7ee      	b.n	800269c <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80026be:	2201      	movs	r2, #1
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <ADC_Enable+0x90>)
 80026c8:	4912      	ldr	r1, [pc, #72]	; (8002714 <ADC_Enable+0x94>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f7fd fd26 	bl	800011c <__udivsi3>
 80026d0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80026d2:	9b01      	ldr	r3, [sp, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d115      	bne.n	8002704 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 80026d8:	f7ff ffcc 	bl	8002674 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026dc:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80026de:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80026e0:	6823      	ldr	r3, [r4, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	422b      	tst	r3, r5
 80026e6:	d1d8      	bne.n	800269a <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026e8:	f7ff ffc4 	bl	8002674 <HAL_GetTick>
 80026ec:	1b80      	subs	r0, r0, r6
 80026ee:	2802      	cmp	r0, #2
 80026f0:	d9f6      	bls.n	80026e0 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f2:	2310      	movs	r3, #16
 80026f4:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80026f6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	4313      	orrs	r3, r2
 80026fa:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80026fe:	432b      	orrs	r3, r5
 8002700:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8002702:	e7cb      	b.n	800269c <ADC_Enable+0x1c>
      wait_loop_index--;
 8002704:	9b01      	ldr	r3, [sp, #4]
 8002706:	3b01      	subs	r3, #1
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	e7e2      	b.n	80026d2 <ADC_Enable+0x52>
 800270c:	80000017 	.word	0x80000017
 8002710:	20000000 	.word	0x20000000
 8002714:	000f4240 	.word	0x000f4240

08002718 <HAL_ADC_Init>:
{
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
  if(hadc == NULL)
 800271e:	2c00      	cmp	r4, #0
 8002720:	d072      	beq.n	8002808 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002724:	2b00      	cmp	r3, #0
 8002726:	d106      	bne.n	8002736 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8002728:	0022      	movs	r2, r4
 800272a:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 800272c:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 800272e:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8002730:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8002732:	f001 fbaf 	bl	8003e94 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002736:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002738:	06db      	lsls	r3, r3, #27
 800273a:	d500      	bpl.n	800273e <HAL_ADC_Init+0x26>
 800273c:	e079      	b.n	8002832 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800273e:	2204      	movs	r2, #4
 8002740:	6823      	ldr	r3, [r4, #0]
 8002742:	6898      	ldr	r0, [r3, #8]
 8002744:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002746:	d000      	beq.n	800274a <HAL_ADC_Init+0x32>
 8002748:	e073      	b.n	8002832 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800274a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800274c:	4942      	ldr	r1, [pc, #264]	; (8002858 <HAL_ADC_Init+0x140>)
 800274e:	4011      	ands	r1, r2
 8002750:	2202      	movs	r2, #2
 8002752:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002754:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8002756:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	400a      	ands	r2, r1
 800275c:	2a01      	cmp	r2, #1
 800275e:	d000      	beq.n	8002762 <HAL_ADC_Init+0x4a>
 8002760:	e06d      	b.n	800283e <HAL_ADC_Init+0x126>
 8002762:	6819      	ldr	r1, [r3, #0]
 8002764:	4211      	tst	r1, r2
 8002766:	d102      	bne.n	800276e <HAL_ADC_Init+0x56>
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	0412      	lsls	r2, r2, #16
 800276c:	d567      	bpl.n	800283e <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	493a      	ldr	r1, [pc, #232]	; (800285c <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8002772:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002774:	400a      	ands	r2, r1
 8002776:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002778:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800277a:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800277c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800277e:	69e2      	ldr	r2, [r4, #28]
 8002780:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8002782:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8002784:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002786:	3a01      	subs	r2, #1
 8002788:	1e56      	subs	r6, r2, #1
 800278a:	41b2      	sbcs	r2, r6
 800278c:	0316      	lsls	r6, r2, #12
 800278e:	68e2      	ldr	r2, [r4, #12]
 8002790:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8002792:	6922      	ldr	r2, [r4, #16]
 8002794:	430f      	orrs	r7, r1
 8002796:	2a02      	cmp	r2, #2
 8002798:	d100      	bne.n	800279c <HAL_ADC_Init+0x84>
 800279a:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800279c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800279e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80027a0:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80027a2:	433a      	orrs	r2, r7
 80027a4:	4332      	orrs	r2, r6
 80027a6:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027a8:	2901      	cmp	r1, #1
 80027aa:	d104      	bne.n	80027b6 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80027ac:	2d00      	cmp	r5, #0
 80027ae:	d12c      	bne.n	800280a <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0249      	lsls	r1, r1, #9
 80027b4:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b6:	20c2      	movs	r0, #194	; 0xc2
 80027b8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80027ba:	30ff      	adds	r0, #255	; 0xff
 80027bc:	4281      	cmp	r1, r0
 80027be:	d002      	beq.n	80027c6 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80027c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80027c2:	4301      	orrs	r1, r0
 80027c4:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027c6:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80027c8:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027ca:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80027cc:	4311      	orrs	r1, r2
 80027ce:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80027d2:	4281      	cmp	r1, r0
 80027d4:	d002      	beq.n	80027dc <HAL_ADC_Init+0xc4>
 80027d6:	1e48      	subs	r0, r1, #1
 80027d8:	2806      	cmp	r0, #6
 80027da:	d807      	bhi.n	80027ec <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80027dc:	2507      	movs	r5, #7
 80027de:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80027e0:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80027e2:	43a8      	bics	r0, r5
 80027e4:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80027e6:	6958      	ldr	r0, [r3, #20]
 80027e8:	4301      	orrs	r1, r0
 80027ea:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	491c      	ldr	r1, [pc, #112]	; (8002860 <HAL_ADC_Init+0x148>)
 80027f0:	400b      	ands	r3, r1
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d111      	bne.n	800281a <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80027f6:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80027f8:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80027fa:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80027fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027fe:	4393      	bics	r3, r2
 8002800:	001a      	movs	r2, r3
 8002802:	2301      	movs	r3, #1
 8002804:	4313      	orrs	r3, r2
 8002806:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800280a:	2020      	movs	r0, #32
 800280c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800280e:	4328      	orrs	r0, r5
 8002810:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002812:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002814:	4301      	orrs	r1, r0
 8002816:	64a1      	str	r1, [r4, #72]	; 0x48
 8002818:	e7cd      	b.n	80027b6 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 800281a:	2212      	movs	r2, #18
 800281c:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800281e:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002820:	4393      	bics	r3, r2
 8002822:	001a      	movs	r2, r3
 8002824:	2310      	movs	r3, #16
 8002826:	4313      	orrs	r3, r2
 8002828:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800282c:	4303      	orrs	r3, r0
 800282e:	64a3      	str	r3, [r4, #72]	; 0x48
 8002830:	e7ea      	b.n	8002808 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002832:	2310      	movs	r3, #16
 8002834:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002836:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002838:	4313      	orrs	r3, r2
 800283a:	6463      	str	r3, [r4, #68]	; 0x44
 800283c:	e7e4      	b.n	8002808 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 800283e:	2118      	movs	r1, #24
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	438a      	bics	r2, r1
 8002844:	68a1      	ldr	r1, [r4, #8]
 8002846:	430a      	orrs	r2, r1
 8002848:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800284a:	6919      	ldr	r1, [r3, #16]
 800284c:	6862      	ldr	r2, [r4, #4]
 800284e:	0089      	lsls	r1, r1, #2
 8002850:	0889      	lsrs	r1, r1, #2
 8002852:	4311      	orrs	r1, r2
 8002854:	6119      	str	r1, [r3, #16]
 8002856:	e78a      	b.n	800276e <HAL_ADC_Init+0x56>
 8002858:	fffffefd 	.word	0xfffffefd
 800285c:	fffe0219 	.word	0xfffe0219
 8002860:	833fffe7 	.word	0x833fffe7

08002864 <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002864:	6803      	ldr	r3, [r0, #0]
{
 8002866:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002868:	689b      	ldr	r3, [r3, #8]
{
 800286a:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 800286c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800286e:	075b      	lsls	r3, r3, #29
 8002870:	d420      	bmi.n	80028b4 <HAL_ADC_Start_IT+0x50>
    __HAL_LOCK(hadc);
 8002872:	0025      	movs	r5, r4
 8002874:	3540      	adds	r5, #64	; 0x40
 8002876:	782b      	ldrb	r3, [r5, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d01b      	beq.n	80028b4 <HAL_ADC_Start_IT+0x50>
 800287c:	2301      	movs	r3, #1
 800287e:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002880:	69e3      	ldr	r3, [r4, #28]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d111      	bne.n	80028aa <HAL_ADC_Start_IT+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8002886:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002888:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <HAL_ADC_Start_IT+0x70>)
      switch(hadc->Init.EOCSelection)
 800288a:	6961      	ldr	r1, [r4, #20]
      ADC_STATE_CLR_SET(hadc->State,
 800288c:	401a      	ands	r2, r3
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4313      	orrs	r3, r2
 8002894:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8002896:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002898:	221c      	movs	r2, #28
      ADC_CLEAR_ERRORCODE(hadc);
 800289a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800289c:	702b      	strb	r3, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 80028a2:	2908      	cmp	r1, #8
 80028a4:	d007      	beq.n	80028b6 <HAL_ADC_Start_IT+0x52>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	e00b      	b.n	80028c2 <HAL_ADC_Start_IT+0x5e>
      tmp_hal_status = ADC_Enable(hadc);
 80028aa:	0020      	movs	r0, r4
 80028ac:	f7ff fee8 	bl	8002680 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d0e8      	beq.n	8002886 <HAL_ADC_Start_IT+0x22>
}
 80028b4:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028b6:	2104      	movs	r1, #4
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	438a      	bics	r2, r1
 80028bc:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80028be:	2218      	movs	r2, #24
 80028c0:	6859      	ldr	r1, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80028c2:	430a      	orrs	r2, r1
 80028c4:	605a      	str	r2, [r3, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80028c6:	2204      	movs	r2, #4
 80028c8:	6899      	ldr	r1, [r3, #8]
 80028ca:	2000      	movs	r0, #0
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e7f0      	b.n	80028b4 <HAL_ADC_Start_IT+0x50>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	fffff0fe 	.word	0xfffff0fe

080028d8 <HAL_ADC_LevelOutOfWindowCallback>:
 80028d8:	4770      	bx	lr

080028da <HAL_ADC_ErrorCallback>:
}
 80028da:	4770      	bx	lr

080028dc <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028dc:	2204      	movs	r2, #4
 80028de:	6803      	ldr	r3, [r0, #0]
{
 80028e0:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028e2:	6819      	ldr	r1, [r3, #0]
{
 80028e4:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028e6:	4211      	tst	r1, r2
 80028e8:	d002      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x14>
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	4211      	tst	r1, r2
 80028ee:	d106      	bne.n	80028fe <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80028f0:	2208      	movs	r2, #8
 80028f2:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80028f4:	4211      	tst	r1, r2
 80028f6:	d028      	beq.n	800294a <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80028f8:	6859      	ldr	r1, [r3, #4]
 80028fa:	4211      	tst	r1, r2
 80028fc:	d025      	beq.n	800294a <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002900:	06d2      	lsls	r2, r2, #27
 8002902:	d404      	bmi.n	800290e <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002904:	2280      	movs	r2, #128	; 0x80
 8002906:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002908:	0092      	lsls	r2, r2, #2
 800290a:	430a      	orrs	r2, r1
 800290c:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800290e:	22c0      	movs	r2, #192	; 0xc0
 8002910:	68d9      	ldr	r1, [r3, #12]
 8002912:	0112      	lsls	r2, r2, #4
 8002914:	4211      	tst	r1, r2
 8002916:	d112      	bne.n	800293e <HAL_ADC_IRQHandler+0x62>
 8002918:	6a22      	ldr	r2, [r4, #32]
 800291a:	2a00      	cmp	r2, #0
 800291c:	d10f      	bne.n	800293e <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	0712      	lsls	r2, r2, #28
 8002922:	d50c      	bpl.n	800293e <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	0752      	lsls	r2, r2, #29
 8002928:	d43c      	bmi.n	80029a4 <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800292a:	210c      	movs	r1, #12
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	438a      	bics	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8002932:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002934:	4a20      	ldr	r2, [pc, #128]	; (80029b8 <HAL_ADC_IRQHandler+0xdc>)
 8002936:	401a      	ands	r2, r3
 8002938:	2301      	movs	r3, #1
 800293a:	4313      	orrs	r3, r2
 800293c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 800293e:	0020      	movs	r0, r4
 8002940:	f001 fe06 	bl	8004550 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002944:	220c      	movs	r2, #12
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800294a:	2580      	movs	r5, #128	; 0x80
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	422a      	tst	r2, r5
 8002952:	d00c      	beq.n	800296e <HAL_ADC_IRQHandler+0x92>
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	422b      	tst	r3, r5
 8002958:	d009      	beq.n	800296e <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	4313      	orrs	r3, r2
 8002962:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002964:	0020      	movs	r0, r4
 8002966:	f7ff ffb7 	bl	80028d8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800296e:	2210      	movs	r2, #16
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	4211      	tst	r1, r2
 8002976:	d014      	beq.n	80029a2 <HAL_ADC_IRQHandler+0xc6>
 8002978:	6859      	ldr	r1, [r3, #4]
 800297a:	4211      	tst	r1, r2
 800297c:	d011      	beq.n	80029a2 <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800297e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002980:	2a01      	cmp	r2, #1
 8002982:	d002      	beq.n	800298a <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002984:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002986:	07d2      	lsls	r2, r2, #31
 8002988:	d508      	bpl.n	800299c <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800298a:	2202      	movs	r2, #2
 800298c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 800298e:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002990:	430a      	orrs	r2, r1
 8002992:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002994:	2210      	movs	r2, #16
 8002996:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8002998:	f7ff ff9f 	bl	80028da <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800299c:	2210      	movs	r2, #16
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	601a      	str	r2, [r3, #0]
}
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	2320      	movs	r3, #32
 80029a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029a8:	4313      	orrs	r3, r2
 80029aa:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ac:	2301      	movs	r3, #1
 80029ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80029b0:	4313      	orrs	r3, r2
 80029b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80029b4:	e7c3      	b.n	800293e <HAL_ADC_IRQHandler+0x62>
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	fffffefe 	.word	0xfffffefe

080029bc <HAL_ADC_ConfigChannel>:
{
 80029bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80029be:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80029c0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80029c2:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80029c4:	3440      	adds	r4, #64	; 0x40
 80029c6:	7823      	ldrb	r3, [r4, #0]
{
 80029c8:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80029ca:	2002      	movs	r0, #2
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d02b      	beq.n	8002a28 <HAL_ADC_ConfigChannel+0x6c>
 80029d0:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029d2:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029d4:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029d6:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80029d8:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80029da:	0740      	lsls	r0, r0, #29
 80029dc:	d452      	bmi.n	8002a84 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80029de:	482c      	ldr	r0, [pc, #176]	; (8002a90 <HAL_ADC_ConfigChannel+0xd4>)
 80029e0:	684f      	ldr	r7, [r1, #4]
 80029e2:	680d      	ldr	r5, [r1, #0]
 80029e4:	4287      	cmp	r7, r0
 80029e6:	d03b      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029e8:	40ab      	lsls	r3, r5
 80029ea:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029ec:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029ee:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029f0:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80029f2:	4338      	orrs	r0, r7
 80029f4:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80029f6:	429e      	cmp	r6, r3
 80029f8:	d00f      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x5e>
 80029fa:	3e01      	subs	r6, #1
 80029fc:	2e06      	cmp	r6, #6
 80029fe:	d90c      	bls.n	8002a1a <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002a00:	688b      	ldr	r3, [r1, #8]
 8002a02:	2107      	movs	r1, #7
 8002a04:	6950      	ldr	r0, [r2, #20]
 8002a06:	4008      	ands	r0, r1
 8002a08:	4283      	cmp	r3, r0
 8002a0a:	d006      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a0c:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002a0e:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002a10:	4388      	bics	r0, r1
 8002a12:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002a14:	6950      	ldr	r0, [r2, #20]
 8002a16:	4303      	orrs	r3, r0
 8002a18:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a1a:	002b      	movs	r3, r5
 8002a1c:	3b10      	subs	r3, #16
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d903      	bls.n	8002a2a <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a22:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002a24:	2300      	movs	r3, #0
 8002a26:	7023      	strb	r3, [r4, #0]
}
 8002a28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_ADC_ConfigChannel+0xd8>)
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	2d10      	cmp	r5, #16
 8002a32:	d013      	beq.n	8002a5c <HAL_ADC_ConfigChannel+0xa0>
 8002a34:	03d2      	lsls	r2, r2, #15
 8002a36:	430a      	orrs	r2, r1
 8002a38:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a3a:	2d10      	cmp	r5, #16
 8002a3c:	d1f1      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_ADC_ConfigChannel+0xdc>)
 8002a40:	4916      	ldr	r1, [pc, #88]	; (8002a9c <HAL_ADC_ConfigChannel+0xe0>)
 8002a42:	6818      	ldr	r0, [r3, #0]
 8002a44:	f7fd fb6a 	bl	800011c <__udivsi3>
 8002a48:	230a      	movs	r3, #10
 8002a4a:	4358      	muls	r0, r3
 8002a4c:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8002a4e:	9b01      	ldr	r3, [sp, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0e6      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8002a54:	9b01      	ldr	r3, [sp, #4]
 8002a56:	3b01      	subs	r3, #1
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	e7f8      	b.n	8002a4e <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a5c:	0412      	lsls	r2, r2, #16
 8002a5e:	e7ea      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a60:	40ab      	lsls	r3, r5
 8002a62:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a64:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a66:	002b      	movs	r3, r5
 8002a68:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a6a:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d8d8      	bhi.n	8002a22 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a70:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_ADC_ConfigChannel+0xd8>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2d10      	cmp	r5, #16
 8002a76:	d003      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0xc4>
 8002a78:	4909      	ldr	r1, [pc, #36]	; (8002aa0 <HAL_ADC_ConfigChannel+0xe4>)
 8002a7a:	400a      	ands	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e7d0      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x66>
 8002a80:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <HAL_ADC_ConfigChannel+0xe8>)
 8002a82:	e7fa      	b.n	8002a7a <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	2220      	movs	r2, #32
 8002a86:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002a88:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	646a      	str	r2, [r5, #68]	; 0x44
 8002a8e:	e7c9      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x68>
 8002a90:	00001001 	.word	0x00001001
 8002a94:	40012708 	.word	0x40012708
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	000f4240 	.word	0x000f4240
 8002aa0:	ffbfffff 	.word	0xffbfffff
 8002aa4:	ff7fffff 	.word	0xff7fffff

08002aa8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002aaa:	0006      	movs	r6, r0
 8002aac:	3640      	adds	r6, #64	; 0x40
 8002aae:	7833      	ldrb	r3, [r6, #0]
{
 8002ab0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002ab2:	2002      	movs	r0, #2
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d042      	beq.n	8002b3e <HAL_ADCEx_Calibration_Start+0x96>
 8002ab8:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aba:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8002abc:	7033      	strb	r3, [r6, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	2a01      	cmp	r2, #1
 8002ac6:	d105      	bne.n	8002ad4 <HAL_ADCEx_Calibration_Start+0x2c>
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	4211      	tst	r1, r2
 8002acc:	d138      	bne.n	8002b40 <HAL_ADCEx_Calibration_Start+0x98>
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	0412      	lsls	r2, r2, #16
 8002ad2:	d435      	bmi.n	8002b40 <HAL_ADCEx_Calibration_Start+0x98>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8002ad4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002ad6:	491d      	ldr	r1, [pc, #116]	; (8002b4c <HAL_ADCEx_Calibration_Start+0xa4>)
 8002ad8:	4011      	ands	r1, r2
 8002ada:	2202      	movs	r2, #2
 8002adc:	430a      	orrs	r2, r1
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ade:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8002ae0:	6462      	str	r2, [r4, #68]	; 0x44
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ae2:	68dd      	ldr	r5, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	438a      	bics	r2, r1
 8002ae8:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	0612      	lsls	r2, r2, #24
 8002af0:	430a      	orrs	r2, r1
 8002af2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8002af4:	f7ff fdbe 	bl	8002674 <HAL_GetTick>
 8002af8:	0007      	movs	r7, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	2a00      	cmp	r2, #0
 8002b00:	db0e      	blt.n	8002b20 <HAL_ADCEx_Calibration_Start+0x78>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002b02:	2203      	movs	r2, #3
        return HAL_ERROR;
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002b04:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8002b06:	4015      	ands	r5, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8002b08:	430d      	orrs	r5, r1
 8002b0a:	60dd      	str	r5, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8002b10:	4393      	bics	r3, r2
 8002b12:	001a      	movs	r2, r3
 8002b14:	2301      	movs	r3, #1
 8002b16:	4313      	orrs	r3, r2
 8002b18:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	7033      	strb	r3, [r6, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8002b1e:	e00e      	b.n	8002b3e <HAL_ADCEx_Calibration_Start+0x96>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b20:	f7ff fda8 	bl	8002674 <HAL_GetTick>
 8002b24:	1bc0      	subs	r0, r0, r7
 8002b26:	2802      	cmp	r0, #2
 8002b28:	d9e7      	bls.n	8002afa <HAL_ADCEx_Calibration_Start+0x52>
        ADC_STATE_CLR_SET(hadc->State,
 8002b2a:	2212      	movs	r2, #18
 8002b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8002b2e:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8002b30:	4393      	bics	r3, r2
 8002b32:	001a      	movs	r2, r3
 8002b34:	2310      	movs	r3, #16
 8002b36:	4313      	orrs	r3, r2
 8002b38:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	7033      	strb	r3, [r6, #0]
}
 8002b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b40:	2320      	movs	r3, #32
 8002b42:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8002b44:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b46:	4313      	orrs	r3, r2
 8002b48:	6463      	str	r3, [r4, #68]	; 0x44
 8002b4a:	e7e6      	b.n	8002b1a <HAL_ADCEx_Calibration_Start+0x72>
 8002b4c:	fffffefd 	.word	0xfffffefd

08002b50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b50:	b570      	push	{r4, r5, r6, lr}
 8002b52:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002b54:	2800      	cmp	r0, #0
 8002b56:	da14      	bge.n	8002b82 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b58:	230f      	movs	r3, #15
 8002b5a:	b2c0      	uxtb	r0, r0
 8002b5c:	4003      	ands	r3, r0
 8002b5e:	3b08      	subs	r3, #8
 8002b60:	4a11      	ldr	r2, [pc, #68]	; (8002ba8 <HAL_NVIC_SetPriority+0x58>)
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	189b      	adds	r3, r3, r2
 8002b68:	2203      	movs	r2, #3
 8002b6a:	4010      	ands	r0, r2
 8002b6c:	4090      	lsls	r0, r2
 8002b6e:	32fc      	adds	r2, #252	; 0xfc
 8002b70:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b72:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b74:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b76:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b78:	69dc      	ldr	r4, [r3, #28]
 8002b7a:	43ac      	bics	r4, r5
 8002b7c:	4321      	orrs	r1, r4
 8002b7e:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002b80:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b82:	2503      	movs	r5, #3
 8002b84:	0883      	lsrs	r3, r0, #2
 8002b86:	4028      	ands	r0, r5
 8002b88:	40a8      	lsls	r0, r5
 8002b8a:	35fc      	adds	r5, #252	; 0xfc
 8002b8c:	002e      	movs	r6, r5
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_NVIC_SetPriority+0x5c>)
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	189b      	adds	r3, r3, r2
 8002b94:	22c0      	movs	r2, #192	; 0xc0
 8002b96:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b98:	4029      	ands	r1, r5
 8002b9a:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b9c:	0092      	lsls	r2, r2, #2
 8002b9e:	589c      	ldr	r4, [r3, r2]
 8002ba0:	43b4      	bics	r4, r6
 8002ba2:	4321      	orrs	r1, r4
 8002ba4:	5099      	str	r1, [r3, r2]
 8002ba6:	e7eb      	b.n	8002b80 <HAL_NVIC_SetPriority+0x30>
 8002ba8:	e000ed00 	.word	0xe000ed00
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002bb0:	231f      	movs	r3, #31
 8002bb2:	4018      	ands	r0, r3
 8002bb4:	3b1e      	subs	r3, #30
 8002bb6:	4083      	lsls	r3, r0
 8002bb8:	4a01      	ldr	r2, [pc, #4]	; (8002bc0 <HAL_NVIC_EnableIRQ+0x10>)
 8002bba:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002bbc:	4770      	bx	lr
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	e000e100 	.word	0xe000e100

08002bc4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bc4:	4a09      	ldr	r2, [pc, #36]	; (8002bec <HAL_SYSTICK_Config+0x28>)
 8002bc6:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bc8:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d80d      	bhi.n	8002bea <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bce:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd2:	4808      	ldr	r0, [pc, #32]	; (8002bf4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bd4:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd6:	6a03      	ldr	r3, [r0, #32]
 8002bd8:	0609      	lsls	r1, r1, #24
 8002bda:	021b      	lsls	r3, r3, #8
 8002bdc:	0a1b      	lsrs	r3, r3, #8
 8002bde:	430b      	orrs	r3, r1
 8002be0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be4:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002be6:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002be8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002bea:	4770      	bx	lr
 8002bec:	00ffffff 	.word	0x00ffffff
 8002bf0:	e000e010 	.word	0xe000e010
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 8002bfc:	2001      	movs	r0, #1
  if(NULL == hdma)
 8002bfe:	2c00      	cmp	r4, #0
 8002c00:	d028      	beq.n	8002c54 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c02:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c04:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c06:	1ca5      	adds	r5, r4, #2
 8002c08:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 8002c0a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c0e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c10:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002c12:	6863      	ldr	r3, [r4, #4]
 8002c14:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c16:	68e1      	ldr	r1, [r4, #12]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6921      	ldr	r1, [r4, #16]
 8002c1c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	6961      	ldr	r1, [r4, #20]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	69a1      	ldr	r1, [r4, #24]
 8002c24:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c26:	69e1      	ldr	r1, [r4, #28]
 8002c28:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002c2a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002c2c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_DMA_Init+0x64>)
 8002c30:	2114      	movs	r1, #20
 8002c32:	18c0      	adds	r0, r0, r3
 8002c34:	f7fd fa72 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002c38:	4b09      	ldr	r3, [pc, #36]	; (8002c60 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c3a:	0080      	lsls	r0, r0, #2
 8002c3c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c3e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 8002c40:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002c42:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 8002c44:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002c46:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8002c48:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8002c4a:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 8002c4e:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 8002c50:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 8002c52:	77e0      	strb	r0, [r4, #31]
}  
 8002c54:	bd70      	pop	{r4, r5, r6, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	ffffc00f 	.word	0xffffc00f
 8002c5c:	bffdfff8 	.word	0xbffdfff8
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_DMA_Abort_IT>:
{  
 8002c64:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002c66:	1c84      	adds	r4, r0, #2
 8002c68:	7fe3      	ldrb	r3, [r4, #31]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d004      	beq.n	8002c78 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6e:	2304      	movs	r3, #4
 8002c70:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8002c72:	3b03      	subs	r3, #3
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c78:	210e      	movs	r1, #14
 8002c7a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c7c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	438a      	bics	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c84:	2201      	movs	r2, #1
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	4391      	bics	r1, r2
 8002c8a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002c8c:	0011      	movs	r1, r2
 8002c8e:	40a9      	lsls	r1, r5
 8002c90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002c92:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002c94:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8002c96:	2400      	movs	r4, #0
 8002c98:	1883      	adds	r3, r0, r2
    if(hdma->XferAbortCallback != NULL)
 8002c9a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8002c9c:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002ca0:	42a2      	cmp	r2, r4
 8002ca2:	d0e7      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002ca4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002ca6:	0023      	movs	r3, r4
 8002ca8:	e7e4      	b.n	8002c74 <HAL_DMA_Abort_IT+0x10>

08002caa <HAL_DMA_IRQHandler>:
{
 8002caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002cac:	2704      	movs	r7, #4
 8002cae:	003e      	movs	r6, r7
 8002cb0:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cb2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002cb4:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cb6:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002cb8:	6803      	ldr	r3, [r0, #0]
 8002cba:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002cbc:	422e      	tst	r6, r5
 8002cbe:	d00d      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x32>
 8002cc0:	423c      	tst	r4, r7
 8002cc2:	d00b      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	0689      	lsls	r1, r1, #26
 8002cc8:	d402      	bmi.n	8002cd0 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	43b9      	bics	r1, r7
 8002cce:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cd0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002cd2:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d019      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8002cd8:	4798      	blx	r3
}  
 8002cda:	e017      	b.n	8002d0c <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cdc:	2702      	movs	r7, #2
 8002cde:	003e      	movs	r6, r7
 8002ce0:	408e      	lsls	r6, r1
 8002ce2:	422e      	tst	r6, r5
 8002ce4:	d013      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x64>
 8002ce6:	423c      	tst	r4, r7
 8002ce8:	d011      	beq.n	8002d0e <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cea:	6819      	ldr	r1, [r3, #0]
 8002cec:	0689      	lsls	r1, r1, #26
 8002cee:	d406      	bmi.n	8002cfe <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002cf0:	240a      	movs	r4, #10
 8002cf2:	6819      	ldr	r1, [r3, #0]
 8002cf4:	43a1      	bics	r1, r4
 8002cf6:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	19c3      	adds	r3, r0, r7
 8002cfc:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cfe:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002d00:	2200      	movs	r2, #0
 8002d02:	1c43      	adds	r3, r0, #1
 8002d04:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8002d06:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d1e5      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x2e>
}  
 8002d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d0e:	2608      	movs	r6, #8
 8002d10:	0037      	movs	r7, r6
 8002d12:	408f      	lsls	r7, r1
 8002d14:	423d      	tst	r5, r7
 8002d16:	d0f9      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x62>
 8002d18:	4234      	tst	r4, r6
 8002d1a:	d0f7      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d1c:	250e      	movs	r5, #14
 8002d1e:	681c      	ldr	r4, [r3, #0]
 8002d20:	43ac      	bics	r4, r5
 8002d22:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d24:	2301      	movs	r3, #1
 8002d26:	001c      	movs	r4, r3
 8002d28:	408c      	lsls	r4, r1
 8002d2a:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 8002d2c:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d2e:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002d30:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 8002d32:	2200      	movs	r2, #0
 8002d34:	18c3      	adds	r3, r0, r3
 8002d36:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 8002d38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002d3a:	e7e5      	b.n	8002d08 <HAL_DMA_IRQHandler+0x5e>

08002d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002d3e:	680b      	ldr	r3, [r1, #0]
{ 
 8002d40:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002d42:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8002d44:	2300      	movs	r3, #0
{ 
 8002d46:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002d48:	9a02      	ldr	r2, [sp, #8]
 8002d4a:	40da      	lsrs	r2, r3
 8002d4c:	d101      	bne.n	8002d52 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8002d4e:	b007      	add	sp, #28
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d52:	2201      	movs	r2, #1
 8002d54:	409a      	lsls	r2, r3
 8002d56:	9203      	str	r2, [sp, #12]
 8002d58:	9903      	ldr	r1, [sp, #12]
 8002d5a:	9a02      	ldr	r2, [sp, #8]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8002d60:	d100      	bne.n	8002d64 <HAL_GPIO_Init+0x28>
 8002d62:	e08c      	b.n	8002e7e <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002d64:	9a01      	ldr	r2, [sp, #4]
 8002d66:	2110      	movs	r1, #16
 8002d68:	6852      	ldr	r2, [r2, #4]
 8002d6a:	0016      	movs	r6, r2
 8002d6c:	438e      	bics	r6, r1
 8002d6e:	2e02      	cmp	r6, #2
 8002d70:	d10e      	bne.n	8002d90 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002d72:	2507      	movs	r5, #7
 8002d74:	401d      	ands	r5, r3
 8002d76:	00ad      	lsls	r5, r5, #2
 8002d78:	3901      	subs	r1, #1
 8002d7a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8002d7c:	08dc      	lsrs	r4, r3, #3
 8002d7e:	00a4      	lsls	r4, r4, #2
 8002d80:	1904      	adds	r4, r0, r4
 8002d82:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8002d84:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002d86:	9901      	ldr	r1, [sp, #4]
 8002d88:	6909      	ldr	r1, [r1, #16]
 8002d8a:	40a9      	lsls	r1, r5
 8002d8c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8002d8e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002d90:	2403      	movs	r4, #3
 8002d92:	005f      	lsls	r7, r3, #1
 8002d94:	40bc      	lsls	r4, r7
 8002d96:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8002d98:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d9a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8002d9c:	4025      	ands	r5, r4
 8002d9e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da0:	2503      	movs	r5, #3
 8002da2:	4015      	ands	r5, r2
 8002da4:	40bd      	lsls	r5, r7
 8002da6:	4661      	mov	r1, ip
 8002da8:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8002daa:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dac:	2e01      	cmp	r6, #1
 8002dae:	d80f      	bhi.n	8002dd0 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002db0:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8002db2:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002db4:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db6:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8002db8:	40bd      	lsls	r5, r7
 8002dba:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8002dbc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8002dbe:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dc2:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002dc4:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	400d      	ands	r5, r1
 8002dca:	409d      	lsls	r5, r3
 8002dcc:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8002dce:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8002dd0:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002dd2:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dd4:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002dd6:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002dd8:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002dda:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002ddc:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002dde:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8002de0:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8002de2:	420a      	tst	r2, r1
 8002de4:	d04b      	beq.n	8002e7e <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002de6:	2101      	movs	r1, #1
 8002de8:	4c26      	ldr	r4, [pc, #152]	; (8002e84 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002dea:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dec:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002dee:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df0:	430d      	orrs	r5, r1
 8002df2:	61a5      	str	r5, [r4, #24]
 8002df4:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8002df6:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df8:	400c      	ands	r4, r1
 8002dfa:	9405      	str	r4, [sp, #20]
 8002dfc:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002dfe:	240f      	movs	r4, #15
 8002e00:	4921      	ldr	r1, [pc, #132]	; (8002e88 <HAL_GPIO_Init+0x14c>)
 8002e02:	00ad      	lsls	r5, r5, #2
 8002e04:	00b6      	lsls	r6, r6, #2
 8002e06:	186d      	adds	r5, r5, r1
 8002e08:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8002e0c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002e10:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e12:	2400      	movs	r4, #0
 8002e14:	4288      	cmp	r0, r1
 8002e16:	d00c      	beq.n	8002e32 <HAL_GPIO_Init+0xf6>
 8002e18:	491c      	ldr	r1, [pc, #112]	; (8002e8c <HAL_GPIO_Init+0x150>)
 8002e1a:	3401      	adds	r4, #1
 8002e1c:	4288      	cmp	r0, r1
 8002e1e:	d008      	beq.n	8002e32 <HAL_GPIO_Init+0xf6>
 8002e20:	491b      	ldr	r1, [pc, #108]	; (8002e90 <HAL_GPIO_Init+0x154>)
 8002e22:	3401      	adds	r4, #1
 8002e24:	4288      	cmp	r0, r1
 8002e26:	d004      	beq.n	8002e32 <HAL_GPIO_Init+0xf6>
 8002e28:	491a      	ldr	r1, [pc, #104]	; (8002e94 <HAL_GPIO_Init+0x158>)
 8002e2a:	3403      	adds	r4, #3
 8002e2c:	4288      	cmp	r0, r1
 8002e2e:	d100      	bne.n	8002e32 <HAL_GPIO_Init+0xf6>
 8002e30:	3c02      	subs	r4, #2
 8002e32:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e34:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e36:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8002e38:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e3a:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8002e3c:	4c16      	ldr	r4, [pc, #88]	; (8002e98 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e3e:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8002e40:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8002e42:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e44:	03d1      	lsls	r1, r2, #15
 8002e46:	d401      	bmi.n	8002e4c <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002e48:	003e      	movs	r6, r7
 8002e4a:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8002e4c:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8002e4e:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8002e50:	9e00      	ldr	r6, [sp, #0]
 8002e52:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e54:	0391      	lsls	r1, r2, #14
 8002e56:	d401      	bmi.n	8002e5c <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002e58:	003e      	movs	r6, r7
 8002e5a:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8002e5c:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8002e5e:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8002e60:	9e00      	ldr	r6, [sp, #0]
 8002e62:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e64:	02d1      	lsls	r1, r2, #11
 8002e66:	d401      	bmi.n	8002e6c <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002e68:	003e      	movs	r6, r7
 8002e6a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8002e6c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8002e6e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8002e70:	9f00      	ldr	r7, [sp, #0]
 8002e72:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e74:	0292      	lsls	r2, r2, #10
 8002e76:	d401      	bmi.n	8002e7c <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002e78:	402e      	ands	r6, r5
 8002e7a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8002e7c:	60e7      	str	r7, [r4, #12]
    position++;
 8002e7e:	3301      	adds	r3, #1
 8002e80:	e762      	b.n	8002d48 <HAL_GPIO_Init+0xc>
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	48000400 	.word	0x48000400
 8002e90:	48000800 	.word	0x48000800
 8002e94:	48000c00 	.word	0x48000c00
 8002e98:	40010400 	.word	0x40010400

08002e9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e9c:	2a00      	cmp	r2, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ea4:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002ea6:	e7fc      	b.n	8002ea2 <HAL_GPIO_WritePin+0x6>

08002ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eaa:	6803      	ldr	r3, [r0, #0]
{
 8002eac:	b085      	sub	sp, #20
 8002eae:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb0:	07db      	lsls	r3, r3, #31
 8002eb2:	d42f      	bmi.n	8002f14 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb4:	682b      	ldr	r3, [r5, #0]
 8002eb6:	079b      	lsls	r3, r3, #30
 8002eb8:	d500      	bpl.n	8002ebc <HAL_RCC_OscConfig+0x14>
 8002eba:	e081      	b.n	8002fc0 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	071b      	lsls	r3, r3, #28
 8002ec0:	d500      	bpl.n	8002ec4 <HAL_RCC_OscConfig+0x1c>
 8002ec2:	e0bc      	b.n	800303e <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	682b      	ldr	r3, [r5, #0]
 8002ec6:	075b      	lsls	r3, r3, #29
 8002ec8:	d500      	bpl.n	8002ecc <HAL_RCC_OscConfig+0x24>
 8002eca:	e0df      	b.n	800308c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	06db      	lsls	r3, r3, #27
 8002ed0:	d51a      	bpl.n	8002f08 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ed2:	696a      	ldr	r2, [r5, #20]
 8002ed4:	4cb5      	ldr	r4, [pc, #724]	; (80031ac <HAL_RCC_OscConfig+0x304>)
 8002ed6:	2304      	movs	r3, #4
 8002ed8:	2a01      	cmp	r2, #1
 8002eda:	d000      	beq.n	8002ede <HAL_RCC_OscConfig+0x36>
 8002edc:	e14b      	b.n	8003176 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ede:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ee0:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8002ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002eec:	f7ff fbc2 	bl	8002674 <HAL_GetTick>
 8002ef0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ef4:	4233      	tst	r3, r6
 8002ef6:	d100      	bne.n	8002efa <HAL_RCC_OscConfig+0x52>
 8002ef8:	e136      	b.n	8003168 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002efa:	21f8      	movs	r1, #248	; 0xf8
 8002efc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002efe:	69ab      	ldr	r3, [r5, #24]
 8002f00:	438a      	bics	r2, r1
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f08:	6a29      	ldr	r1, [r5, #32]
 8002f0a:	2900      	cmp	r1, #0
 8002f0c:	d000      	beq.n	8002f10 <HAL_RCC_OscConfig+0x68>
 8002f0e:	e159      	b.n	80031c4 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8002f10:	2000      	movs	r0, #0
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f14:	210c      	movs	r1, #12
 8002f16:	4ca5      	ldr	r4, [pc, #660]	; (80031ac <HAL_RCC_OscConfig+0x304>)
 8002f18:	6862      	ldr	r2, [r4, #4]
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	2a04      	cmp	r2, #4
 8002f1e:	d006      	beq.n	8002f2e <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f20:	6863      	ldr	r3, [r4, #4]
 8002f22:	400b      	ands	r3, r1
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCC_OscConfig+0x98>
 8002f28:	6863      	ldr	r3, [r4, #4]
 8002f2a:	03db      	lsls	r3, r3, #15
 8002f2c:	d508      	bpl.n	8002f40 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	039b      	lsls	r3, r3, #14
 8002f32:	d5bf      	bpl.n	8002eb4 <HAL_RCC_OscConfig+0xc>
 8002f34:	686b      	ldr	r3, [r5, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1bc      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8002f3a:	2001      	movs	r0, #1
}
 8002f3c:	b005      	add	sp, #20
 8002f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f40:	686b      	ldr	r3, [r5, #4]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d113      	bne.n	8002f6e <HAL_RCC_OscConfig+0xc6>
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	6822      	ldr	r2, [r4, #0]
 8002f4a:	025b      	lsls	r3, r3, #9
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f50:	f7ff fb90 	bl	8002674 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f54:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8002f56:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f58:	02b6      	lsls	r6, r6, #10
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	4233      	tst	r3, r6
 8002f5e:	d1a9      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f60:	f7ff fb88 	bl	8002674 <HAL_GetTick>
 8002f64:	1bc0      	subs	r0, r0, r7
 8002f66:	2864      	cmp	r0, #100	; 0x64
 8002f68:	d9f7      	bls.n	8002f5a <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8002f6a:	2003      	movs	r0, #3
 8002f6c:	e7e6      	b.n	8002f3c <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d116      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xf8>
 8002f72:	6823      	ldr	r3, [r4, #0]
 8002f74:	4a8e      	ldr	r2, [pc, #568]	; (80031b0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f78:	4013      	ands	r3, r2
 8002f7a:	6023      	str	r3, [r4, #0]
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	4a8d      	ldr	r2, [pc, #564]	; (80031b4 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f80:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f82:	4013      	ands	r3, r2
 8002f84:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f86:	f7ff fb75 	bl	8002674 <HAL_GetTick>
 8002f8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	4233      	tst	r3, r6
 8002f90:	d100      	bne.n	8002f94 <HAL_RCC_OscConfig+0xec>
 8002f92:	e78f      	b.n	8002eb4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff fb6e 	bl	8002674 <HAL_GetTick>
 8002f98:	1bc0      	subs	r0, r0, r7
 8002f9a:	2864      	cmp	r0, #100	; 0x64
 8002f9c:	d9f6      	bls.n	8002f8c <HAL_RCC_OscConfig+0xe4>
 8002f9e:	e7e4      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x108>
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	6822      	ldr	r2, [r4, #0]
 8002fa8:	02db      	lsls	r3, r3, #11
 8002faa:	4313      	orrs	r3, r2
 8002fac:	6023      	str	r3, [r4, #0]
 8002fae:	e7ca      	b.n	8002f46 <HAL_RCC_OscConfig+0x9e>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	4a7f      	ldr	r2, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x308>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	6023      	str	r3, [r4, #0]
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	4a7e      	ldr	r2, [pc, #504]	; (80031b4 <HAL_RCC_OscConfig+0x30c>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	e7c6      	b.n	8002f4e <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fc0:	220c      	movs	r2, #12
 8002fc2:	4c7a      	ldr	r4, [pc, #488]	; (80031ac <HAL_RCC_OscConfig+0x304>)
 8002fc4:	6863      	ldr	r3, [r4, #4]
 8002fc6:	4213      	tst	r3, r2
 8002fc8:	d006      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fca:	6863      	ldr	r3, [r4, #4]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d110      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x14c>
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	03db      	lsls	r3, r3, #15
 8002fd6:	d40d      	bmi.n	8002ff4 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	079b      	lsls	r3, r3, #30
 8002fdc:	d502      	bpl.n	8002fe4 <HAL_RCC_OscConfig+0x13c>
 8002fde:	68eb      	ldr	r3, [r5, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d1aa      	bne.n	8002f3a <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	21f8      	movs	r1, #248	; 0xf8
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	692b      	ldr	r3, [r5, #16]
 8002fea:	438a      	bics	r2, r1
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	e763      	b.n	8002ebc <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ff4:	68ea      	ldr	r2, [r5, #12]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d00f      	beq.n	800301c <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8002ffc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffe:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8003000:	4313      	orrs	r3, r2
 8003002:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003004:	f7ff fb36 	bl	8002674 <HAL_GetTick>
 8003008:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	4233      	tst	r3, r6
 800300e:	d1e9      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7ff fb30 	bl	8002674 <HAL_GetTick>
 8003014:	1bc0      	subs	r0, r0, r7
 8003016:	2802      	cmp	r0, #2
 8003018:	d9f7      	bls.n	800300a <HAL_RCC_OscConfig+0x162>
 800301a:	e7a6      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 800301c:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301e:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8003020:	439a      	bics	r2, r3
 8003022:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8003024:	f7ff fb26 	bl	8002674 <HAL_GetTick>
 8003028:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	4233      	tst	r3, r6
 800302e:	d100      	bne.n	8003032 <HAL_RCC_OscConfig+0x18a>
 8003030:	e744      	b.n	8002ebc <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003032:	f7ff fb1f 	bl	8002674 <HAL_GetTick>
 8003036:	1bc0      	subs	r0, r0, r7
 8003038:	2802      	cmp	r0, #2
 800303a:	d9f6      	bls.n	800302a <HAL_RCC_OscConfig+0x182>
 800303c:	e795      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800303e:	69ea      	ldr	r2, [r5, #28]
 8003040:	2301      	movs	r3, #1
 8003042:	4c5a      	ldr	r4, [pc, #360]	; (80031ac <HAL_RCC_OscConfig+0x304>)
 8003044:	2a00      	cmp	r2, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8003048:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304a:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 800304c:	4313      	orrs	r3, r2
 800304e:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003050:	f7ff fb10 	bl	8002674 <HAL_GetTick>
 8003054:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003058:	4233      	tst	r3, r6
 800305a:	d000      	beq.n	800305e <HAL_RCC_OscConfig+0x1b6>
 800305c:	e732      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305e:	f7ff fb09 	bl	8002674 <HAL_GetTick>
 8003062:	1bc0      	subs	r0, r0, r7
 8003064:	2802      	cmp	r0, #2
 8003066:	d9f6      	bls.n	8003056 <HAL_RCC_OscConfig+0x1ae>
 8003068:	e77f      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800306a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800306e:	439a      	bics	r2, r3
 8003070:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003072:	f7ff faff 	bl	8002674 <HAL_GetTick>
 8003076:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800307a:	4233      	tst	r3, r6
 800307c:	d100      	bne.n	8003080 <HAL_RCC_OscConfig+0x1d8>
 800307e:	e721      	b.n	8002ec4 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003080:	f7ff faf8 	bl	8002674 <HAL_GetTick>
 8003084:	1bc0      	subs	r0, r0, r7
 8003086:	2802      	cmp	r0, #2
 8003088:	d9f6      	bls.n	8003078 <HAL_RCC_OscConfig+0x1d0>
 800308a:	e76e      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800308e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003090:	4c46      	ldr	r4, [pc, #280]	; (80031ac <HAL_RCC_OscConfig+0x304>)
 8003092:	0552      	lsls	r2, r2, #21
 8003094:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003096:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003098:	4213      	tst	r3, r2
 800309a:	d108      	bne.n	80030ae <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	69e3      	ldr	r3, [r4, #28]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61e3      	str	r3, [r4, #28]
 80030a2:	69e3      	ldr	r3, [r4, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	9303      	str	r3, [sp, #12]
 80030a8:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80030aa:	2301      	movs	r3, #1
 80030ac:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ae:	2780      	movs	r7, #128	; 0x80
 80030b0:	4e41      	ldr	r6, [pc, #260]	; (80031b8 <HAL_RCC_OscConfig+0x310>)
 80030b2:	007f      	lsls	r7, r7, #1
 80030b4:	6833      	ldr	r3, [r6, #0]
 80030b6:	423b      	tst	r3, r7
 80030b8:	d006      	beq.n	80030c8 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ba:	68ab      	ldr	r3, [r5, #8]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d113      	bne.n	80030e8 <HAL_RCC_OscConfig+0x240>
 80030c0:	6a22      	ldr	r2, [r4, #32]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	6223      	str	r3, [r4, #32]
 80030c6:	e030      	b.n	800312a <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c8:	6833      	ldr	r3, [r6, #0]
 80030ca:	433b      	orrs	r3, r7
 80030cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80030ce:	f7ff fad1 	bl	8002674 <HAL_GetTick>
 80030d2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	6833      	ldr	r3, [r6, #0]
 80030d6:	423b      	tst	r3, r7
 80030d8:	d1ef      	bne.n	80030ba <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7ff facb 	bl	8002674 <HAL_GetTick>
 80030de:	9b01      	ldr	r3, [sp, #4]
 80030e0:	1ac0      	subs	r0, r0, r3
 80030e2:	2864      	cmp	r0, #100	; 0x64
 80030e4:	d9f6      	bls.n	80030d4 <HAL_RCC_OscConfig+0x22c>
 80030e6:	e740      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
 80030e8:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d114      	bne.n	8003118 <HAL_RCC_OscConfig+0x270>
 80030ee:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030f0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f2:	4393      	bics	r3, r2
 80030f4:	6223      	str	r3, [r4, #32]
 80030f6:	6a23      	ldr	r3, [r4, #32]
 80030f8:	3203      	adds	r2, #3
 80030fa:	4393      	bics	r3, r2
 80030fc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80030fe:	f7ff fab9 	bl	8002674 <HAL_GetTick>
 8003102:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	6a23      	ldr	r3, [r4, #32]
 8003106:	423b      	tst	r3, r7
 8003108:	d025      	beq.n	8003156 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7ff fab3 	bl	8002674 <HAL_GetTick>
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_OscConfig+0x314>)
 8003110:	1b80      	subs	r0, r0, r6
 8003112:	4298      	cmp	r0, r3
 8003114:	d9f6      	bls.n	8003104 <HAL_RCC_OscConfig+0x25c>
 8003116:	e728      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	2b05      	cmp	r3, #5
 800311a:	d10b      	bne.n	8003134 <HAL_RCC_OscConfig+0x28c>
 800311c:	6a21      	ldr	r1, [r4, #32]
 800311e:	3b01      	subs	r3, #1
 8003120:	430b      	orrs	r3, r1
 8003122:	6223      	str	r3, [r4, #32]
 8003124:	6a23      	ldr	r3, [r4, #32]
 8003126:	431a      	orrs	r2, r3
 8003128:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 800312a:	f7ff faa3 	bl	8002674 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312e:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8003130:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003132:	e00d      	b.n	8003150 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003134:	6a23      	ldr	r3, [r4, #32]
 8003136:	4393      	bics	r3, r2
 8003138:	2204      	movs	r2, #4
 800313a:	6223      	str	r3, [r4, #32]
 800313c:	6a23      	ldr	r3, [r4, #32]
 800313e:	4393      	bics	r3, r2
 8003140:	e7c0      	b.n	80030c4 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7ff fa97 	bl	8002674 <HAL_GetTick>
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_RCC_OscConfig+0x314>)
 8003148:	1b80      	subs	r0, r0, r6
 800314a:	4298      	cmp	r0, r3
 800314c:	d900      	bls.n	8003150 <HAL_RCC_OscConfig+0x2a8>
 800314e:	e70c      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003150:	6a23      	ldr	r3, [r4, #32]
 8003152:	423b      	tst	r3, r7
 8003154:	d0f5      	beq.n	8003142 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8003156:	9b00      	ldr	r3, [sp, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d000      	beq.n	800315e <HAL_RCC_OscConfig+0x2b6>
 800315c:	e6b6      	b.n	8002ecc <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800315e:	69e3      	ldr	r3, [r4, #28]
 8003160:	4a17      	ldr	r2, [pc, #92]	; (80031c0 <HAL_RCC_OscConfig+0x318>)
 8003162:	4013      	ands	r3, r2
 8003164:	61e3      	str	r3, [r4, #28]
 8003166:	e6b1      	b.n	8002ecc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003168:	f7ff fa84 	bl	8002674 <HAL_GetTick>
 800316c:	1bc0      	subs	r0, r0, r7
 800316e:	2802      	cmp	r0, #2
 8003170:	d800      	bhi.n	8003174 <HAL_RCC_OscConfig+0x2cc>
 8003172:	e6be      	b.n	8002ef2 <HAL_RCC_OscConfig+0x4a>
 8003174:	e6f9      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003176:	3205      	adds	r2, #5
 8003178:	d103      	bne.n	8003182 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 800317a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800317c:	439a      	bics	r2, r3
 800317e:	6362      	str	r2, [r4, #52]	; 0x34
 8003180:	e6bb      	b.n	8002efa <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003182:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003184:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003186:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003188:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800318a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800318c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800318e:	4393      	bics	r3, r2
 8003190:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003192:	f7ff fa6f 	bl	8002674 <HAL_GetTick>
 8003196:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800319a:	4233      	tst	r3, r6
 800319c:	d100      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2f8>
 800319e:	e6b3      	b.n	8002f08 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031a0:	f7ff fa68 	bl	8002674 <HAL_GetTick>
 80031a4:	1bc0      	subs	r0, r0, r7
 80031a6:	2802      	cmp	r0, #2
 80031a8:	d9f6      	bls.n	8003198 <HAL_RCC_OscConfig+0x2f0>
 80031aa:	e6de      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
 80031ac:	40021000 	.word	0x40021000
 80031b0:	fffeffff 	.word	0xfffeffff
 80031b4:	fffbffff 	.word	0xfffbffff
 80031b8:	40007000 	.word	0x40007000
 80031bc:	00001388 	.word	0x00001388
 80031c0:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c4:	220c      	movs	r2, #12
 80031c6:	4c26      	ldr	r4, [pc, #152]	; (8003260 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80031c8:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ca:	6863      	ldr	r3, [r4, #4]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d100      	bne.n	80031d4 <HAL_RCC_OscConfig+0x32c>
 80031d2:	e6b3      	b.n	8002f3c <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_RCC_OscConfig+0x3bc>)
 80031d8:	4013      	ands	r3, r2
 80031da:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031dc:	2902      	cmp	r1, #2
 80031de:	d12f      	bne.n	8003240 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80031e0:	f7ff fa48 	bl	8002674 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e4:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80031e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031e8:	04b6      	lsls	r6, r6, #18
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	4233      	tst	r3, r6
 80031ee:	d121      	bne.n	8003234 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f0:	220f      	movs	r2, #15
 80031f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80031f4:	4393      	bics	r3, r2
 80031f6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80031f8:	4313      	orrs	r3, r2
 80031fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80031fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003200:	6862      	ldr	r2, [r4, #4]
 8003202:	430b      	orrs	r3, r1
 8003204:	4918      	ldr	r1, [pc, #96]	; (8003268 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003206:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003208:	400a      	ands	r2, r1
 800320a:	4313      	orrs	r3, r2
 800320c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800320e:	2380      	movs	r3, #128	; 0x80
 8003210:	6822      	ldr	r2, [r4, #0]
 8003212:	045b      	lsls	r3, r3, #17
 8003214:	4313      	orrs	r3, r2
 8003216:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003218:	f7ff fa2c 	bl	8002674 <HAL_GetTick>
 800321c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800321e:	04ad      	lsls	r5, r5, #18
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	422b      	tst	r3, r5
 8003224:	d000      	beq.n	8003228 <HAL_RCC_OscConfig+0x380>
 8003226:	e673      	b.n	8002f10 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003228:	f7ff fa24 	bl	8002674 <HAL_GetTick>
 800322c:	1b80      	subs	r0, r0, r6
 800322e:	2802      	cmp	r0, #2
 8003230:	d9f6      	bls.n	8003220 <HAL_RCC_OscConfig+0x378>
 8003232:	e69a      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003234:	f7ff fa1e 	bl	8002674 <HAL_GetTick>
 8003238:	1bc0      	subs	r0, r0, r7
 800323a:	2802      	cmp	r0, #2
 800323c:	d9d5      	bls.n	80031ea <HAL_RCC_OscConfig+0x342>
 800323e:	e694      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003240:	f7ff fa18 	bl	8002674 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003244:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8003246:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003248:	04ad      	lsls	r5, r5, #18
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	422b      	tst	r3, r5
 800324e:	d100      	bne.n	8003252 <HAL_RCC_OscConfig+0x3aa>
 8003250:	e65e      	b.n	8002f10 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003252:	f7ff fa0f 	bl	8002674 <HAL_GetTick>
 8003256:	1b80      	subs	r0, r0, r6
 8003258:	2802      	cmp	r0, #2
 800325a:	d9f6      	bls.n	800324a <HAL_RCC_OscConfig+0x3a2>
 800325c:	e685      	b.n	8002f6a <HAL_RCC_OscConfig+0xc2>
 800325e:	46c0      	nop			; (mov r8, r8)
 8003260:	40021000 	.word	0x40021000
 8003264:	feffffff 	.word	0xfeffffff
 8003268:	ffc2ffff 	.word	0xffc2ffff

0800326c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800326c:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800326e:	4c14      	ldr	r4, [pc, #80]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8003270:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003272:	2210      	movs	r2, #16
 8003274:	0021      	movs	r1, r4
 8003276:	4668      	mov	r0, sp
 8003278:	f001 fc74 	bl	8004b64 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800327c:	0021      	movs	r1, r4
 800327e:	ad04      	add	r5, sp, #16
 8003280:	2210      	movs	r2, #16
 8003282:	3110      	adds	r1, #16
 8003284:	0028      	movs	r0, r5
 8003286:	f001 fc6d 	bl	8004b64 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800328a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800328c:	4e0d      	ldr	r6, [pc, #52]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x58>)
 800328e:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003290:	401a      	ands	r2, r3
 8003292:	2a08      	cmp	r2, #8
 8003294:	d111      	bne.n	80032ba <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003296:	200f      	movs	r0, #15
 8003298:	466a      	mov	r2, sp
 800329a:	0c99      	lsrs	r1, r3, #18
 800329c:	4001      	ands	r1, r0
 800329e:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80032a0:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80032a2:	4002      	ands	r2, r0
 80032a4:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032a6:	03db      	lsls	r3, r3, #15
 80032a8:	d505      	bpl.n	80032b6 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80032aa:	4807      	ldr	r0, [pc, #28]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80032ac:	f7fc ff36 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80032b0:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80032b2:	b008      	add	sp, #32
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80032b6:	4805      	ldr	r0, [pc, #20]	; (80032cc <HAL_RCC_GetSysClockFreq+0x60>)
 80032b8:	e7fa      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80032ba:	4803      	ldr	r0, [pc, #12]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80032bc:	e7f9      	b.n	80032b2 <HAL_RCC_GetSysClockFreq+0x46>
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	08004ba0 	.word	0x08004ba0
 80032c4:	40021000 	.word	0x40021000
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	003d0900 	.word	0x003d0900

080032d0 <HAL_RCC_ClockConfig>:
{
 80032d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80032d2:	2201      	movs	r2, #1
 80032d4:	4c43      	ldr	r4, [pc, #268]	; (80033e4 <HAL_RCC_ClockConfig+0x114>)
{
 80032d6:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80032d8:	6823      	ldr	r3, [r4, #0]
{
 80032da:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80032dc:	4013      	ands	r3, r2
 80032de:	428b      	cmp	r3, r1
 80032e0:	d31c      	bcc.n	800331c <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e2:	6832      	ldr	r2, [r6, #0]
 80032e4:	0793      	lsls	r3, r2, #30
 80032e6:	d423      	bmi.n	8003330 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e8:	07d3      	lsls	r3, r2, #31
 80032ea:	d429      	bmi.n	8003340 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80032ec:	2301      	movs	r3, #1
 80032ee:	6822      	ldr	r2, [r4, #0]
 80032f0:	401a      	ands	r2, r3
 80032f2:	4297      	cmp	r7, r2
 80032f4:	d367      	bcc.n	80033c6 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f6:	6833      	ldr	r3, [r6, #0]
 80032f8:	4c3b      	ldr	r4, [pc, #236]	; (80033e8 <HAL_RCC_ClockConfig+0x118>)
 80032fa:	075b      	lsls	r3, r3, #29
 80032fc:	d46a      	bmi.n	80033d4 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032fe:	f7ff ffb5 	bl	800326c <HAL_RCC_GetSysClockFreq>
 8003302:	6863      	ldr	r3, [r4, #4]
 8003304:	4a39      	ldr	r2, [pc, #228]	; (80033ec <HAL_RCC_ClockConfig+0x11c>)
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	0f1b      	lsrs	r3, r3, #28
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	40d8      	lsrs	r0, r3
 800330e:	4b38      	ldr	r3, [pc, #224]	; (80033f0 <HAL_RCC_ClockConfig+0x120>)
 8003310:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003312:	2000      	movs	r0, #0
 8003314:	f7ff f984 	bl	8002620 <HAL_InitTick>
  return HAL_OK;
 8003318:	2000      	movs	r0, #0
 800331a:	e008      	b.n	800332e <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	4393      	bics	r3, r2
 8003320:	430b      	orrs	r3, r1
 8003322:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	4013      	ands	r3, r2
 8003328:	4299      	cmp	r1, r3
 800332a:	d0da      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 800332c:	2001      	movs	r0, #1
}
 800332e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003330:	20f0      	movs	r0, #240	; 0xf0
 8003332:	492d      	ldr	r1, [pc, #180]	; (80033e8 <HAL_RCC_ClockConfig+0x118>)
 8003334:	684b      	ldr	r3, [r1, #4]
 8003336:	4383      	bics	r3, r0
 8003338:	68b0      	ldr	r0, [r6, #8]
 800333a:	4303      	orrs	r3, r0
 800333c:	604b      	str	r3, [r1, #4]
 800333e:	e7d3      	b.n	80032e8 <HAL_RCC_ClockConfig+0x18>
 8003340:	4d29      	ldr	r5, [pc, #164]	; (80033e8 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003342:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003344:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003346:	2a01      	cmp	r2, #1
 8003348:	d11a      	bne.n	8003380 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334a:	039b      	lsls	r3, r3, #14
 800334c:	d5ee      	bpl.n	800332c <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800334e:	2103      	movs	r1, #3
 8003350:	686b      	ldr	r3, [r5, #4]
 8003352:	438b      	bics	r3, r1
 8003354:	4313      	orrs	r3, r2
 8003356:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003358:	f7ff f98c 	bl	8002674 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335c:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800335e:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	2b01      	cmp	r3, #1
 8003362:	d115      	bne.n	8003390 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003364:	220c      	movs	r2, #12
 8003366:	686b      	ldr	r3, [r5, #4]
 8003368:	4013      	ands	r3, r2
 800336a:	2b04      	cmp	r3, #4
 800336c:	d0be      	beq.n	80032ec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336e:	f7ff f981 	bl	8002674 <HAL_GetTick>
 8003372:	9b01      	ldr	r3, [sp, #4]
 8003374:	1ac0      	subs	r0, r0, r3
 8003376:	4b1f      	ldr	r3, [pc, #124]	; (80033f4 <HAL_RCC_ClockConfig+0x124>)
 8003378:	4298      	cmp	r0, r3
 800337a:	d9f3      	bls.n	8003364 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 800337c:	2003      	movs	r0, #3
 800337e:	e7d6      	b.n	800332e <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003380:	2a02      	cmp	r2, #2
 8003382:	d102      	bne.n	800338a <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003384:	019b      	lsls	r3, r3, #6
 8003386:	d4e2      	bmi.n	800334e <HAL_RCC_ClockConfig+0x7e>
 8003388:	e7d0      	b.n	800332c <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	079b      	lsls	r3, r3, #30
 800338c:	d4df      	bmi.n	800334e <HAL_RCC_ClockConfig+0x7e>
 800338e:	e7cd      	b.n	800332c <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003390:	2b02      	cmp	r3, #2
 8003392:	d012      	beq.n	80033ba <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003394:	220c      	movs	r2, #12
 8003396:	686b      	ldr	r3, [r5, #4]
 8003398:	4213      	tst	r3, r2
 800339a:	d0a7      	beq.n	80032ec <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339c:	f7ff f96a 	bl	8002674 <HAL_GetTick>
 80033a0:	9b01      	ldr	r3, [sp, #4]
 80033a2:	1ac0      	subs	r0, r0, r3
 80033a4:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_ClockConfig+0x124>)
 80033a6:	4298      	cmp	r0, r3
 80033a8:	d9f4      	bls.n	8003394 <HAL_RCC_ClockConfig+0xc4>
 80033aa:	e7e7      	b.n	800337c <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033ac:	f7ff f962 	bl	8002674 <HAL_GetTick>
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	1ac0      	subs	r0, r0, r3
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_RCC_ClockConfig+0x124>)
 80033b6:	4298      	cmp	r0, r3
 80033b8:	d8e0      	bhi.n	800337c <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033ba:	220c      	movs	r2, #12
 80033bc:	686b      	ldr	r3, [r5, #4]
 80033be:	4013      	ands	r3, r2
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d1f3      	bne.n	80033ac <HAL_RCC_ClockConfig+0xdc>
 80033c4:	e792      	b.n	80032ec <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	439a      	bics	r2, r3
 80033ca:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	421a      	tst	r2, r3
 80033d0:	d1ac      	bne.n	800332c <HAL_RCC_ClockConfig+0x5c>
 80033d2:	e790      	b.n	80032f6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_RCC_ClockConfig+0x128>)
 80033d8:	4013      	ands	r3, r2
 80033da:	68f2      	ldr	r2, [r6, #12]
 80033dc:	4313      	orrs	r3, r2
 80033de:	6063      	str	r3, [r4, #4]
 80033e0:	e78d      	b.n	80032fe <HAL_RCC_ClockConfig+0x2e>
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	40022000 	.word	0x40022000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	08004c80 	.word	0x08004c80
 80033f0:	20000000 	.word	0x20000000
 80033f4:	00001388 	.word	0x00001388
 80033f8:	fffff8ff 	.word	0xfffff8ff

080033fc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80033fc:	4b01      	ldr	r3, [pc, #4]	; (8003404 <HAL_RCC_GetHCLKFreq+0x8>)
 80033fe:	6818      	ldr	r0, [r3, #0]
}
 8003400:	4770      	bx	lr
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	20000000 	.word	0x20000000

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800340a:	6803      	ldr	r3, [r0, #0]
{
 800340c:	b085      	sub	sp, #20
 800340e:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003410:	03db      	lsls	r3, r3, #15
 8003412:	d528      	bpl.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003414:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003418:	4c37      	ldr	r4, [pc, #220]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 800341a:	0552      	lsls	r2, r2, #21
 800341c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800341e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003420:	4213      	tst	r3, r2
 8003422:	d108      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003424:	69e3      	ldr	r3, [r4, #28]
 8003426:	4313      	orrs	r3, r2
 8003428:	61e3      	str	r3, [r4, #28]
 800342a:	69e3      	ldr	r3, [r4, #28]
 800342c:	4013      	ands	r3, r2
 800342e:	9303      	str	r3, [sp, #12]
 8003430:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003432:	2301      	movs	r3, #1
 8003434:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003436:	2780      	movs	r7, #128	; 0x80
 8003438:	4e30      	ldr	r6, [pc, #192]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800343a:	007f      	lsls	r7, r7, #1
 800343c:	6833      	ldr	r3, [r6, #0]
 800343e:	423b      	tst	r3, r7
 8003440:	d026      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003442:	22c0      	movs	r2, #192	; 0xc0
 8003444:	6a23      	ldr	r3, [r4, #32]
 8003446:	0092      	lsls	r2, r2, #2
 8003448:	4013      	ands	r3, r2
 800344a:	4e2d      	ldr	r6, [pc, #180]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800344c:	d132      	bne.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800344e:	6a23      	ldr	r3, [r4, #32]
 8003450:	401e      	ands	r6, r3
 8003452:	686b      	ldr	r3, [r5, #4]
 8003454:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003456:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003458:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 800345a:	2b01      	cmp	r3, #1
 800345c:	d103      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345e:	69e3      	ldr	r3, [r4, #28]
 8003460:	4a28      	ldr	r2, [pc, #160]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8003462:	4013      	ands	r3, r2
 8003464:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003466:	682a      	ldr	r2, [r5, #0]
 8003468:	07d3      	lsls	r3, r2, #31
 800346a:	d506      	bpl.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800346c:	2003      	movs	r0, #3
 800346e:	4922      	ldr	r1, [pc, #136]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003470:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003472:	4383      	bics	r3, r0
 8003474:	68a8      	ldr	r0, [r5, #8]
 8003476:	4303      	orrs	r3, r0
 8003478:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800347a:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800347c:	0693      	lsls	r3, r2, #26
 800347e:	d517      	bpl.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003480:	2110      	movs	r1, #16
 8003482:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8003484:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003486:	438b      	bics	r3, r1
 8003488:	68e9      	ldr	r1, [r5, #12]
 800348a:	430b      	orrs	r3, r1
 800348c:	6313      	str	r3, [r2, #48]	; 0x30
 800348e:	e00f      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003490:	6833      	ldr	r3, [r6, #0]
 8003492:	433b      	orrs	r3, r7
 8003494:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003496:	f7ff f8ed 	bl	8002674 <HAL_GetTick>
 800349a:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	6833      	ldr	r3, [r6, #0]
 800349e:	423b      	tst	r3, r7
 80034a0:	d1cf      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7ff f8e7 	bl	8002674 <HAL_GetTick>
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	1ac0      	subs	r0, r0, r3
 80034aa:	2864      	cmp	r0, #100	; 0x64
 80034ac:	d9f6      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 80034ae:	2003      	movs	r0, #3
}
 80034b0:	b005      	add	sp, #20
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b4:	6869      	ldr	r1, [r5, #4]
 80034b6:	400a      	ands	r2, r1
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d0c8      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 80034bc:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034be:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c0:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034c2:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 80034c4:	025b      	lsls	r3, r3, #9
 80034c6:	4303      	orrs	r3, r0
 80034c8:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034ca:	6a23      	ldr	r3, [r4, #32]
 80034cc:	480e      	ldr	r0, [pc, #56]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034ce:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034d0:	4003      	ands	r3, r0
 80034d2:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 80034d4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d6:	07d3      	lsls	r3, r2, #31
 80034d8:	d5b9      	bpl.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 80034da:	f7ff f8cb 	bl	8002674 <HAL_GetTick>
 80034de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	2202      	movs	r2, #2
 80034e2:	6a23      	ldr	r3, [r4, #32]
 80034e4:	4213      	tst	r3, r2
 80034e6:	d1b2      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7ff f8c4 	bl	8002674 <HAL_GetTick>
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <HAL_RCCEx_PeriphCLKConfig+0x104>)
 80034ee:	1bc0      	subs	r0, r0, r7
 80034f0:	4298      	cmp	r0, r3
 80034f2:	d9f5      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80034f4:	e7db      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40007000 	.word	0x40007000
 8003500:	fffffcff 	.word	0xfffffcff
 8003504:	efffffff 	.word	0xefffffff
 8003508:	fffeffff 	.word	0xfffeffff
 800350c:	00001388 	.word	0x00001388

08003510 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003510:	2201      	movs	r2, #1
 8003512:	6a03      	ldr	r3, [r0, #32]
{
 8003514:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003516:	4393      	bics	r3, r2
 8003518:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800351e:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003520:	3272      	adds	r2, #114	; 0x72
 8003522:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003524:	680a      	ldr	r2, [r1, #0]
 8003526:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003528:	2202      	movs	r2, #2
 800352a:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800352c:	688a      	ldr	r2, [r1, #8]
 800352e:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003530:	4a14      	ldr	r2, [pc, #80]	; (8003584 <TIM_OC1_SetConfig+0x74>)
 8003532:	4290      	cmp	r0, r2
 8003534:	d008      	beq.n	8003548 <TIM_OC1_SetConfig+0x38>
 8003536:	4e14      	ldr	r6, [pc, #80]	; (8003588 <TIM_OC1_SetConfig+0x78>)
 8003538:	42b0      	cmp	r0, r6
 800353a:	d005      	beq.n	8003548 <TIM_OC1_SetConfig+0x38>
 800353c:	4e13      	ldr	r6, [pc, #76]	; (800358c <TIM_OC1_SetConfig+0x7c>)
 800353e:	42b0      	cmp	r0, r6
 8003540:	d002      	beq.n	8003548 <TIM_OC1_SetConfig+0x38>
 8003542:	4e13      	ldr	r6, [pc, #76]	; (8003590 <TIM_OC1_SetConfig+0x80>)
 8003544:	42b0      	cmp	r0, r6
 8003546:	d116      	bne.n	8003576 <TIM_OC1_SetConfig+0x66>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003548:	2608      	movs	r6, #8
 800354a:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800354c:	68ce      	ldr	r6, [r1, #12]
 800354e:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003550:	2604      	movs	r6, #4
 8003552:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003554:	4290      	cmp	r0, r2
 8003556:	d008      	beq.n	800356a <TIM_OC1_SetConfig+0x5a>
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <TIM_OC1_SetConfig+0x78>)
 800355a:	4290      	cmp	r0, r2
 800355c:	d005      	beq.n	800356a <TIM_OC1_SetConfig+0x5a>
 800355e:	4a0b      	ldr	r2, [pc, #44]	; (800358c <TIM_OC1_SetConfig+0x7c>)
 8003560:	4290      	cmp	r0, r2
 8003562:	d002      	beq.n	800356a <TIM_OC1_SetConfig+0x5a>
 8003564:	4a0a      	ldr	r2, [pc, #40]	; (8003590 <TIM_OC1_SetConfig+0x80>)
 8003566:	4290      	cmp	r0, r2
 8003568:	d105      	bne.n	8003576 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800356a:	4a0a      	ldr	r2, [pc, #40]	; (8003594 <TIM_OC1_SetConfig+0x84>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800356c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800356e:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003570:	694c      	ldr	r4, [r1, #20]
 8003572:	4334      	orrs	r4, r6
 8003574:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003576:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003578:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800357a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800357c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357e:	6203      	str	r3, [r0, #32]
}
 8003580:	bd70      	pop	{r4, r5, r6, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	40012c00 	.word	0x40012c00
 8003588:	40014000 	.word	0x40014000
 800358c:	40014400 	.word	0x40014400
 8003590:	40014800 	.word	0x40014800
 8003594:	fffffcff 	.word	0xfffffcff

08003598 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003598:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800359a:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800359c:	6a03      	ldr	r3, [r0, #32]
 800359e:	4a17      	ldr	r2, [pc, #92]	; (80035fc <TIM_OC3_SetConfig+0x64>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80035a4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80035a6:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80035a8:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035aa:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ac:	680d      	ldr	r5, [r1, #0]
 80035ae:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035b0:	4d13      	ldr	r5, [pc, #76]	; (8003600 <TIM_OC3_SetConfig+0x68>)
 80035b2:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035b4:	688d      	ldr	r5, [r1, #8]
 80035b6:	022d      	lsls	r5, r5, #8
 80035b8:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035ba:	4d12      	ldr	r5, [pc, #72]	; (8003604 <TIM_OC3_SetConfig+0x6c>)
 80035bc:	42a8      	cmp	r0, r5
 80035be:	d10e      	bne.n	80035de <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035c0:	4d11      	ldr	r5, [pc, #68]	; (8003608 <TIM_OC3_SetConfig+0x70>)
 80035c2:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035c4:	68cb      	ldr	r3, [r1, #12]
 80035c6:	021b      	lsls	r3, r3, #8
 80035c8:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ca:	4d10      	ldr	r5, [pc, #64]	; (800360c <TIM_OC3_SetConfig+0x74>)
 80035cc:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ce:	4d10      	ldr	r5, [pc, #64]	; (8003610 <TIM_OC3_SetConfig+0x78>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035d2:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d4:	698a      	ldr	r2, [r1, #24]
 80035d6:	4332      	orrs	r2, r6
 80035d8:	0112      	lsls	r2, r2, #4
 80035da:	432a      	orrs	r2, r5
 80035dc:	e008      	b.n	80035f0 <TIM_OC3_SetConfig+0x58>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80035de:	4d0d      	ldr	r5, [pc, #52]	; (8003614 <TIM_OC3_SetConfig+0x7c>)
 80035e0:	42a8      	cmp	r0, r5
 80035e2:	d0f4      	beq.n	80035ce <TIM_OC3_SetConfig+0x36>
 80035e4:	4d0c      	ldr	r5, [pc, #48]	; (8003618 <TIM_OC3_SetConfig+0x80>)
 80035e6:	42a8      	cmp	r0, r5
 80035e8:	d0f1      	beq.n	80035ce <TIM_OC3_SetConfig+0x36>
 80035ea:	4d0c      	ldr	r5, [pc, #48]	; (800361c <TIM_OC3_SetConfig+0x84>)
 80035ec:	42a8      	cmp	r0, r5
 80035ee:	d0ee      	beq.n	80035ce <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035f0:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035f2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80035f4:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80035f6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f8:	6203      	str	r3, [r0, #32]
}
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	fffffeff 	.word	0xfffffeff
 8003600:	fffffdff 	.word	0xfffffdff
 8003604:	40012c00 	.word	0x40012c00
 8003608:	fffff7ff 	.word	0xfffff7ff
 800360c:	fffffbff 	.word	0xfffffbff
 8003610:	ffffcfff 	.word	0xffffcfff
 8003614:	40014000 	.word	0x40014000
 8003618:	40014400 	.word	0x40014400
 800361c:	40014800 	.word	0x40014800

08003620 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003620:	6a03      	ldr	r3, [r0, #32]
 8003622:	4a14      	ldr	r2, [pc, #80]	; (8003674 <TIM_OC4_SetConfig+0x54>)
{
 8003624:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003626:	4013      	ands	r3, r2
 8003628:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800362c:	4c12      	ldr	r4, [pc, #72]	; (8003678 <TIM_OC4_SetConfig+0x58>)
  tmpcr2 =  TIMx->CR2;
 800362e:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003630:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003632:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003634:	680c      	ldr	r4, [r1, #0]
 8003636:	0224      	lsls	r4, r4, #8
 8003638:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800363a:	4c10      	ldr	r4, [pc, #64]	; (800367c <TIM_OC4_SetConfig+0x5c>)
 800363c:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800363e:	688c      	ldr	r4, [r1, #8]
 8003640:	0324      	lsls	r4, r4, #12
 8003642:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003644:	4c0e      	ldr	r4, [pc, #56]	; (8003680 <TIM_OC4_SetConfig+0x60>)
 8003646:	42a0      	cmp	r0, r4
 8003648:	d008      	beq.n	800365c <TIM_OC4_SetConfig+0x3c>
 800364a:	4c0e      	ldr	r4, [pc, #56]	; (8003684 <TIM_OC4_SetConfig+0x64>)
 800364c:	42a0      	cmp	r0, r4
 800364e:	d005      	beq.n	800365c <TIM_OC4_SetConfig+0x3c>
 8003650:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <TIM_OC4_SetConfig+0x68>)
 8003652:	42a0      	cmp	r0, r4
 8003654:	d002      	beq.n	800365c <TIM_OC4_SetConfig+0x3c>
 8003656:	4c0d      	ldr	r4, [pc, #52]	; (800368c <TIM_OC4_SetConfig+0x6c>)
 8003658:	42a0      	cmp	r0, r4
 800365a:	d104      	bne.n	8003666 <TIM_OC4_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800365c:	4c0c      	ldr	r4, [pc, #48]	; (8003690 <TIM_OC4_SetConfig+0x70>)
 800365e:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003660:	694c      	ldr	r4, [r1, #20]
 8003662:	01a4      	lsls	r4, r4, #6
 8003664:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003666:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003668:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800366a:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800366c:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	6202      	str	r2, [r0, #32]
}
 8003670:	bd30      	pop	{r4, r5, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	ffffefff 	.word	0xffffefff
 8003678:	ffff8cff 	.word	0xffff8cff
 800367c:	ffffdfff 	.word	0xffffdfff
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800
 8003690:	ffffbfff 	.word	0xffffbfff

08003694 <HAL_TIM_PeriodElapsedCallback>:
 8003694:	4770      	bx	lr

08003696 <HAL_TIM_OC_DelayElapsedCallback>:
 8003696:	4770      	bx	lr

08003698 <HAL_TIM_IC_CaptureCallback>:
 8003698:	4770      	bx	lr

0800369a <HAL_TIM_TriggerCallback>:
 800369a:	4770      	bx	lr

0800369c <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369c:	2202      	movs	r2, #2
 800369e:	6803      	ldr	r3, [r0, #0]
{
 80036a0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a2:	6919      	ldr	r1, [r3, #16]
{
 80036a4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a6:	4211      	tst	r1, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80036aa:	68d9      	ldr	r1, [r3, #12]
 80036ac:	4211      	tst	r1, r2
 80036ae:	d00b      	beq.n	80036c8 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b0:	3a05      	subs	r2, #5
 80036b2:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b6:	3204      	adds	r2, #4
 80036b8:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036ba:	079b      	lsls	r3, r3, #30
 80036bc:	d100      	bne.n	80036c0 <HAL_TIM_IRQHandler+0x24>
 80036be:	e079      	b.n	80037b4 <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 80036c0:	f7ff ffea 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c4:	2300      	movs	r3, #0
 80036c6:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036c8:	2204      	movs	r2, #4
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	6919      	ldr	r1, [r3, #16]
 80036ce:	4211      	tst	r1, r2
 80036d0:	d010      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80036d2:	68d9      	ldr	r1, [r3, #12]
 80036d4:	4211      	tst	r1, r2
 80036d6:	d00d      	beq.n	80036f4 <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d8:	3a09      	subs	r2, #9
 80036da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036dc:	3207      	adds	r2, #7
 80036de:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	23c0      	movs	r3, #192	; 0xc0
 80036e4:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80036e6:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e8:	421a      	tst	r2, r3
 80036ea:	d069      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 80036ec:	f7ff ffd4 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f0:	2300      	movs	r3, #0
 80036f2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f4:	2208      	movs	r2, #8
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	6919      	ldr	r1, [r3, #16]
 80036fa:	4211      	tst	r1, r2
 80036fc:	d00e      	beq.n	800371c <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80036fe:	68d9      	ldr	r1, [r3, #12]
 8003700:	4211      	tst	r1, r2
 8003702:	d00b      	beq.n	800371c <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003704:	3a11      	subs	r2, #17
 8003706:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003708:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800370a:	320d      	adds	r2, #13
 800370c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800370e:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003710:	079b      	lsls	r3, r3, #30
 8003712:	d05b      	beq.n	80037cc <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8003714:	f7ff ffc0 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003718:	2300      	movs	r3, #0
 800371a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800371c:	2210      	movs	r2, #16
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	6919      	ldr	r1, [r3, #16]
 8003722:	4211      	tst	r1, r2
 8003724:	d010      	beq.n	8003748 <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003726:	68d9      	ldr	r1, [r3, #12]
 8003728:	4211      	tst	r1, r2
 800372a:	d00d      	beq.n	8003748 <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800372c:	3a21      	subs	r2, #33	; 0x21
 800372e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003730:	3219      	adds	r2, #25
 8003732:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003734:	69da      	ldr	r2, [r3, #28]
 8003736:	23c0      	movs	r3, #192	; 0xc0
 8003738:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800373a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800373c:	421a      	tst	r2, r3
 800373e:	d04b      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8003740:	f7ff ffaa 	bl	8003698 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003744:	2300      	movs	r3, #0
 8003746:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003748:	2201      	movs	r2, #1
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	6919      	ldr	r1, [r3, #16]
 800374e:	4211      	tst	r1, r2
 8003750:	d007      	beq.n	8003762 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003752:	68d9      	ldr	r1, [r3, #12]
 8003754:	4211      	tst	r1, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	3a03      	subs	r2, #3
 800375a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800375c:	0020      	movs	r0, r4
 800375e:	f7ff ff99 	bl	8003694 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003762:	2280      	movs	r2, #128	; 0x80
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	6919      	ldr	r1, [r3, #16]
 8003768:	4211      	tst	r1, r2
 800376a:	d008      	beq.n	800377e <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	4211      	tst	r1, r2
 8003770:	d005      	beq.n	800377e <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003772:	3a02      	subs	r2, #2
 8003774:	3aff      	subs	r2, #255	; 0xff
 8003776:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003778:	0020      	movs	r0, r4
 800377a:	f000 fa62 	bl	8003c42 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800377e:	2240      	movs	r2, #64	; 0x40
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	6919      	ldr	r1, [r3, #16]
 8003784:	4211      	tst	r1, r2
 8003786:	d007      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003788:	68d9      	ldr	r1, [r3, #12]
 800378a:	4211      	tst	r1, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800378e:	3a81      	subs	r2, #129	; 0x81
 8003790:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003792:	0020      	movs	r0, r4
 8003794:	f7ff ff81 	bl	800369a <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003798:	2220      	movs	r2, #32
 800379a:	6823      	ldr	r3, [r4, #0]
 800379c:	6919      	ldr	r1, [r3, #16]
 800379e:	4211      	tst	r1, r2
 80037a0:	d007      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80037a2:	68d9      	ldr	r1, [r3, #12]
 80037a4:	4211      	tst	r1, r2
 80037a6:	d004      	beq.n	80037b2 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a8:	3a41      	subs	r2, #65	; 0x41
 80037aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80037ac:	0020      	movs	r0, r4
 80037ae:	f000 fa47 	bl	8003c40 <HAL_TIMEx_CommutationCallback>
}
 80037b2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b4:	f7ff ff6f 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b8:	0020      	movs	r0, r4
 80037ba:	f000 fee5 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
 80037be:	e781      	b.n	80036c4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c0:	f7ff ff69 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c4:	0020      	movs	r0, r4
 80037c6:	f000 fedf 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
 80037ca:	e791      	b.n	80036f0 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037cc:	f7ff ff63 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d0:	0020      	movs	r0, r4
 80037d2:	f000 fed9 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
 80037d6:	e79f      	b.n	8003718 <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d8:	f7ff ff5d 	bl	8003696 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037dc:	0020      	movs	r0, r4
 80037de:	f000 fed3 	bl	8004588 <HAL_TIM_PWM_PulseFinishedCallback>
 80037e2:	e7af      	b.n	8003744 <HAL_TIM_IRQHandler+0xa8>

080037e4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e4:	4a1c      	ldr	r2, [pc, #112]	; (8003858 <TIM_Base_SetConfig+0x74>)
{
 80037e6:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 80037e8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037ea:	4290      	cmp	r0, r2
 80037ec:	d002      	beq.n	80037f4 <TIM_Base_SetConfig+0x10>
 80037ee:	4c1b      	ldr	r4, [pc, #108]	; (800385c <TIM_Base_SetConfig+0x78>)
 80037f0:	42a0      	cmp	r0, r4
 80037f2:	d108      	bne.n	8003806 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037f4:	2470      	movs	r4, #112	; 0x70
 80037f6:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 80037f8:	684c      	ldr	r4, [r1, #4]
 80037fa:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fc:	4290      	cmp	r0, r2
 80037fe:	d00e      	beq.n	800381e <TIM_Base_SetConfig+0x3a>
 8003800:	4c16      	ldr	r4, [pc, #88]	; (800385c <TIM_Base_SetConfig+0x78>)
 8003802:	42a0      	cmp	r0, r4
 8003804:	d00b      	beq.n	800381e <TIM_Base_SetConfig+0x3a>
 8003806:	4c16      	ldr	r4, [pc, #88]	; (8003860 <TIM_Base_SetConfig+0x7c>)
 8003808:	42a0      	cmp	r0, r4
 800380a:	d008      	beq.n	800381e <TIM_Base_SetConfig+0x3a>
 800380c:	4c15      	ldr	r4, [pc, #84]	; (8003864 <TIM_Base_SetConfig+0x80>)
 800380e:	42a0      	cmp	r0, r4
 8003810:	d005      	beq.n	800381e <TIM_Base_SetConfig+0x3a>
 8003812:	4c15      	ldr	r4, [pc, #84]	; (8003868 <TIM_Base_SetConfig+0x84>)
 8003814:	42a0      	cmp	r0, r4
 8003816:	d002      	beq.n	800381e <TIM_Base_SetConfig+0x3a>
 8003818:	4c14      	ldr	r4, [pc, #80]	; (800386c <TIM_Base_SetConfig+0x88>)
 800381a:	42a0      	cmp	r0, r4
 800381c:	d103      	bne.n	8003826 <TIM_Base_SetConfig+0x42>
    tmpcr1 &= ~TIM_CR1_CKD;
 800381e:	4c14      	ldr	r4, [pc, #80]	; (8003870 <TIM_Base_SetConfig+0x8c>)
 8003820:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003822:	68cc      	ldr	r4, [r1, #12]
 8003824:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003826:	2480      	movs	r4, #128	; 0x80
 8003828:	43a3      	bics	r3, r4
 800382a:	694c      	ldr	r4, [r1, #20]
 800382c:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 800382e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003830:	688b      	ldr	r3, [r1, #8]
 8003832:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003834:	680b      	ldr	r3, [r1, #0]
 8003836:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003838:	4290      	cmp	r0, r2
 800383a:	d008      	beq.n	800384e <TIM_Base_SetConfig+0x6a>
 800383c:	4b09      	ldr	r3, [pc, #36]	; (8003864 <TIM_Base_SetConfig+0x80>)
 800383e:	4298      	cmp	r0, r3
 8003840:	d005      	beq.n	800384e <TIM_Base_SetConfig+0x6a>
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <TIM_Base_SetConfig+0x84>)
 8003844:	4298      	cmp	r0, r3
 8003846:	d002      	beq.n	800384e <TIM_Base_SetConfig+0x6a>
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <TIM_Base_SetConfig+0x88>)
 800384a:	4298      	cmp	r0, r3
 800384c:	d101      	bne.n	8003852 <TIM_Base_SetConfig+0x6e>
    TIMx->RCR = Structure->RepetitionCounter;
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003852:	2301      	movs	r3, #1
 8003854:	6143      	str	r3, [r0, #20]
}
 8003856:	bd10      	pop	{r4, pc}
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40000400 	.word	0x40000400
 8003860:	40002000 	.word	0x40002000
 8003864:	40014000 	.word	0x40014000
 8003868:	40014400 	.word	0x40014400
 800386c:	40014800 	.word	0x40014800
 8003870:	fffffcff 	.word	0xfffffcff

08003874 <HAL_TIM_OC_Init>:
{
 8003874:	b570      	push	{r4, r5, r6, lr}
 8003876:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003878:	2001      	movs	r0, #1
  if(htim == NULL)
 800387a:	2c00      	cmp	r4, #0
 800387c:	d014      	beq.n	80038a8 <HAL_TIM_OC_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 800387e:	0025      	movs	r5, r4
 8003880:	353d      	adds	r5, #61	; 0x3d
 8003882:	782b      	ldrb	r3, [r5, #0]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <HAL_TIM_OC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800388a:	0022      	movs	r2, r4
 800388c:	323c      	adds	r2, #60	; 0x3c
 800388e:	7013      	strb	r3, [r2, #0]
    HAL_TIM_OC_MspInit(htim);
 8003890:	0020      	movs	r0, r4
 8003892:	f001 f815 	bl	80048c0 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003896:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003898:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800389a:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800389c:	1d21      	adds	r1, r4, #4
 800389e:	f7ff ffa1 	bl	80037e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80038a2:	2301      	movs	r3, #1
  return HAL_OK;
 80038a4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80038a6:	702b      	strb	r3, [r5, #0]
}
 80038a8:	bd70      	pop	{r4, r5, r6, pc}

080038aa <HAL_TIM_PWM_Init>:
{
 80038aa:	b570      	push	{r4, r5, r6, lr}
 80038ac:	0004      	movs	r4, r0
    return HAL_ERROR;
 80038ae:	2001      	movs	r0, #1
  if(htim == NULL)
 80038b0:	2c00      	cmp	r4, #0
 80038b2:	d014      	beq.n	80038de <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80038b4:	0025      	movs	r5, r4
 80038b6:	353d      	adds	r5, #61	; 0x3d
 80038b8:	782b      	ldrb	r3, [r5, #0]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80038c0:	0022      	movs	r2, r4
 80038c2:	323c      	adds	r2, #60	; 0x3c
 80038c4:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 80038c6:	0020      	movs	r0, r4
 80038c8:	f000 ffd6 	bl	8004878 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80038cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ce:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80038d0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d2:	1d21      	adds	r1, r4, #4
 80038d4:	f7ff ff86 	bl	80037e4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80038d8:	2301      	movs	r3, #1
  return HAL_OK;
 80038da:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80038dc:	702b      	strb	r3, [r5, #0]
}
 80038de:	bd70      	pop	{r4, r5, r6, pc}

080038e0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e0:	2210      	movs	r2, #16
 80038e2:	6a03      	ldr	r3, [r0, #32]
{
 80038e4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e6:	4393      	bics	r3, r2
 80038e8:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80038ea:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038ec:	4d16      	ldr	r5, [pc, #88]	; (8003948 <TIM_OC2_SetConfig+0x68>)
  tmpcr2 =  TIMx->CR2;
 80038ee:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80038f0:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038f2:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f4:	680d      	ldr	r5, [r1, #0]
 80038f6:	022d      	lsls	r5, r5, #8
 80038f8:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80038fa:	2520      	movs	r5, #32
 80038fc:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038fe:	688d      	ldr	r5, [r1, #8]
 8003900:	012d      	lsls	r5, r5, #4
 8003902:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003904:	4d11      	ldr	r5, [pc, #68]	; (800394c <TIM_OC2_SetConfig+0x6c>)
 8003906:	42a8      	cmp	r0, r5
 8003908:	d10f      	bne.n	800392a <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800390a:	2580      	movs	r5, #128	; 0x80
 800390c:	43aa      	bics	r2, r5
 800390e:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003910:	68ca      	ldr	r2, [r1, #12]
 8003912:	0112      	lsls	r2, r2, #4
 8003914:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003916:	2540      	movs	r5, #64	; 0x40
 8003918:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800391a:	4d0d      	ldr	r5, [pc, #52]	; (8003950 <TIM_OC2_SetConfig+0x70>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800391c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800391e:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003920:	698b      	ldr	r3, [r1, #24]
 8003922:	4333      	orrs	r3, r6
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	432b      	orrs	r3, r5
 8003928:	e008      	b.n	800393c <TIM_OC2_SetConfig+0x5c>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800392a:	4d0a      	ldr	r5, [pc, #40]	; (8003954 <TIM_OC2_SetConfig+0x74>)
 800392c:	42a8      	cmp	r0, r5
 800392e:	d0f4      	beq.n	800391a <TIM_OC2_SetConfig+0x3a>
 8003930:	4d09      	ldr	r5, [pc, #36]	; (8003958 <TIM_OC2_SetConfig+0x78>)
 8003932:	42a8      	cmp	r0, r5
 8003934:	d0f1      	beq.n	800391a <TIM_OC2_SetConfig+0x3a>
 8003936:	4d09      	ldr	r5, [pc, #36]	; (800395c <TIM_OC2_SetConfig+0x7c>)
 8003938:	42a8      	cmp	r0, r5
 800393a:	d0ee      	beq.n	800391a <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800393c:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800393e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003940:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003942:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003944:	6202      	str	r2, [r0, #32]
}
 8003946:	bd70      	pop	{r4, r5, r6, pc}
 8003948:	ffff8cff 	.word	0xffff8cff
 800394c:	40012c00 	.word	0x40012c00
 8003950:	fffff3ff 	.word	0xfffff3ff
 8003954:	40014000 	.word	0x40014000
 8003958:	40014400 	.word	0x40014400
 800395c:	40014800 	.word	0x40014800

08003960 <HAL_TIM_OC_ConfigChannel>:
{
 8003960:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003962:	0004      	movs	r4, r0
 8003964:	2602      	movs	r6, #2
 8003966:	343c      	adds	r4, #60	; 0x3c
 8003968:	7825      	ldrb	r5, [r4, #0]
{
 800396a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800396c:	0030      	movs	r0, r6
 800396e:	2d01      	cmp	r5, #1
 8003970:	d017      	beq.n	80039a2 <HAL_TIM_OC_ConfigChannel+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003972:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8003974:	3801      	subs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003976:	353d      	adds	r5, #61	; 0x3d
  __HAL_LOCK(htim);
 8003978:	7020      	strb	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800397a:	702e      	strb	r6, [r5, #0]
  switch (Channel)
 800397c:	2a0c      	cmp	r2, #12
 800397e:	d80c      	bhi.n	800399a <HAL_TIM_OC_ConfigChannel+0x3a>
 8003980:	0010      	movs	r0, r2
 8003982:	f7fc fbc1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003986:	0a07      	.short	0x0a07
 8003988:	0a0f0a0a 	.word	0x0a0f0a0a
 800398c:	0a130a0a 	.word	0x0a130a0a
 8003990:	0a0a      	.short	0x0a0a
 8003992:	17          	.byte	0x17
 8003993:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	f7ff fdbb 	bl	8003510 <TIM_OC1_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800399a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800399c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800399e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80039a0:	7020      	strb	r0, [r4, #0]
}
 80039a2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	f7ff ff9b 	bl	80038e0 <TIM_OC2_SetConfig>
    break;
 80039aa:	e7f6      	b.n	800399a <HAL_TIM_OC_ConfigChannel+0x3a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	f7ff fdf3 	bl	8003598 <TIM_OC3_SetConfig>
    break;
 80039b2:	e7f2      	b.n	800399a <HAL_TIM_OC_ConfigChannel+0x3a>
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	f7ff fe33 	bl	8003620 <TIM_OC4_SetConfig>
    break;
 80039ba:	e7ee      	b.n	800399a <HAL_TIM_OC_ConfigChannel+0x3a>

080039bc <HAL_TIM_PWM_ConfigChannel>:
{
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80039be:	0006      	movs	r6, r0
 80039c0:	2302      	movs	r3, #2
 80039c2:	363c      	adds	r6, #60	; 0x3c
{
 80039c4:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80039c6:	7831      	ldrb	r1, [r6, #0]
{
 80039c8:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80039ca:	0018      	movs	r0, r3
 80039cc:	2901      	cmp	r1, #1
 80039ce:	d025      	beq.n	8003a1c <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80039d2:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80039d6:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80039da:	2a0c      	cmp	r2, #12
 80039dc:	d81a      	bhi.n	8003a14 <HAL_TIM_PWM_ConfigChannel+0x58>
 80039de:	0010      	movs	r0, r2
 80039e0:	f7fc fb92 	bl	8000108 <__gnu_thumb1_case_uqi>
 80039e4:	18181807 	.word	0x18181807
 80039e8:	1818181d 	.word	0x1818181d
 80039ec:	1818182f 	.word	0x1818182f
 80039f0:	41          	.byte	0x41
 80039f1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f2:	0029      	movs	r1, r5
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	f7ff fd8b 	bl	8003510 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039fa:	2208      	movs	r2, #8
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	6999      	ldr	r1, [r3, #24]
 8003a00:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a02:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a06:	699a      	ldr	r2, [r3, #24]
 8003a08:	438a      	bics	r2, r1
 8003a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a10:	430a      	orrs	r2, r1
 8003a12:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003a16:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003a18:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 8003a1a:	7030      	strb	r0, [r6, #0]
}
 8003a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a1e:	0029      	movs	r1, r5
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	f7ff ff5d 	bl	80038e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a26:	2280      	movs	r2, #128	; 0x80
 8003a28:	6823      	ldr	r3, [r4, #0]
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	6999      	ldr	r1, [r3, #24]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a32:	699a      	ldr	r2, [r3, #24]
 8003a34:	4915      	ldr	r1, [pc, #84]	; (8003a8c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a3a:	692a      	ldr	r2, [r5, #16]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	0212      	lsls	r2, r2, #8
 8003a40:	e7e6      	b.n	8003a10 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a42:	0029      	movs	r1, r5
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	f7ff fda7 	bl	8003598 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	6823      	ldr	r3, [r4, #0]
 8003a4e:	69d9      	ldr	r1, [r3, #28]
 8003a50:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a52:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a56:	69da      	ldr	r2, [r3, #28]
 8003a58:	438a      	bics	r2, r1
 8003a5a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a60:	430a      	orrs	r2, r1
 8003a62:	61da      	str	r2, [r3, #28]
    break;
 8003a64:	e7d6      	b.n	8003a14 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a66:	0029      	movs	r1, r5
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	f7ff fdd9 	bl	8003620 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	69d9      	ldr	r1, [r3, #28]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a7a:	69da      	ldr	r2, [r3, #28]
 8003a7c:	4903      	ldr	r1, [pc, #12]	; (8003a8c <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8003a7e:	400a      	ands	r2, r1
 8003a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a82:	692a      	ldr	r2, [r5, #16]
 8003a84:	69d9      	ldr	r1, [r3, #28]
 8003a86:	0212      	lsls	r2, r2, #8
 8003a88:	e7ea      	b.n	8003a60 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	fffffbff 	.word	0xfffffbff

08003a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a90:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8003a92:	2401      	movs	r4, #1
 8003a94:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a96:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003a98:	6a03      	ldr	r3, [r0, #32]
 8003a9a:	43a3      	bics	r3, r4
 8003a9c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8003a9e:	6a03      	ldr	r3, [r0, #32]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	6202      	str	r2, [r0, #32]
}
 8003aa4:	bd10      	pop	{r4, pc}
	...

08003aa8 <HAL_TIM_PWM_Start>:
{
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aac:	2201      	movs	r2, #1
 8003aae:	6800      	ldr	r0, [r0, #0]
 8003ab0:	f7ff ffee 	bl	8003a90 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <HAL_TIM_PWM_Start+0x3c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d008      	beq.n	8003ace <HAL_TIM_PWM_Start+0x26>
 8003abc:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <HAL_TIM_PWM_Start+0x40>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d005      	beq.n	8003ace <HAL_TIM_PWM_Start+0x26>
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <HAL_TIM_PWM_Start+0x44>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d002      	beq.n	8003ace <HAL_TIM_PWM_Start+0x26>
 8003ac8:	4a09      	ldr	r2, [pc, #36]	; (8003af0 <HAL_TIM_PWM_Start+0x48>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d104      	bne.n	8003ad8 <HAL_TIM_PWM_Start+0x30>
    __HAL_TIM_MOE_ENABLE(htim);
 8003ace:	2280      	movs	r2, #128	; 0x80
 8003ad0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003ad2:	0212      	lsls	r2, r2, #8
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003ad8:	2201      	movs	r2, #1
 8003ada:	6819      	ldr	r1, [r3, #0]
}
 8003adc:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40014000 	.word	0x40014000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800

08003af4 <HAL_TIM_OC_Start>:
 8003af4:	b510      	push	{r4, lr}
 8003af6:	f7ff ffd7 	bl	8003aa8 <HAL_TIM_PWM_Start>
 8003afa:	bd10      	pop	{r4, pc}

08003afc <HAL_TIM_PWM_Start_IT>:
{
 8003afc:	b510      	push	{r4, lr}
 8003afe:	0004      	movs	r4, r0
  switch (Channel)
 8003b00:	290c      	cmp	r1, #12
 8003b02:	d80e      	bhi.n	8003b22 <HAL_TIM_PWM_Start_IT+0x26>
 8003b04:	0008      	movs	r0, r1
 8003b06:	f7fc faff 	bl	8000108 <__gnu_thumb1_case_uqi>
 8003b0a:	0c07      	.short	0x0c07
 8003b0c:	0c280c0c 	.word	0x0c280c0c
 8003b10:	0c2c0c0c 	.word	0x0c2c0c0c
 8003b14:	0c0c      	.short	0x0c0c
 8003b16:	30          	.byte	0x30
 8003b17:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b18:	2302      	movs	r3, #2
 8003b1a:	6822      	ldr	r2, [r4, #0]
 8003b1c:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b22:	2201      	movs	r2, #1
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	f7ff ffb3 	bl	8003a90 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <HAL_TIM_PWM_Start_IT+0x78>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d008      	beq.n	8003b44 <HAL_TIM_PWM_Start_IT+0x48>
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <HAL_TIM_PWM_Start_IT+0x7c>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d005      	beq.n	8003b44 <HAL_TIM_PWM_Start_IT+0x48>
 8003b38:	4a10      	ldr	r2, [pc, #64]	; (8003b7c <HAL_TIM_PWM_Start_IT+0x80>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d002      	beq.n	8003b44 <HAL_TIM_PWM_Start_IT+0x48>
 8003b3e:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <HAL_TIM_PWM_Start_IT+0x84>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d104      	bne.n	8003b4e <HAL_TIM_PWM_Start_IT+0x52>
    __HAL_TIM_MOE_ENABLE(htim);
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003b48:	0212      	lsls	r2, r2, #8
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8003b4e:	2201      	movs	r2, #1
 8003b50:	6819      	ldr	r1, [r3, #0]
}
 8003b52:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8003b54:	430a      	orrs	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b5a:	6822      	ldr	r2, [r4, #0]
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	68d0      	ldr	r0, [r2, #12]
 8003b60:	e7dd      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	2308      	movs	r3, #8
 8003b66:	68d0      	ldr	r0, [r2, #12]
 8003b68:	e7d9      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	68d0      	ldr	r0, [r2, #12]
 8003b70:	e7d5      	b.n	8003b1e <HAL_TIM_PWM_Start_IT+0x22>
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	40012c00 	.word	0x40012c00
 8003b78:	40014000 	.word	0x40014000
 8003b7c:	40014400 	.word	0x40014400
 8003b80:	40014800 	.word	0x40014800

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003b84:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003b86:	0004      	movs	r4, r0
 8003b88:	343c      	adds	r4, #60	; 0x3c
 8003b8a:	7822      	ldrb	r2, [r4, #0]
{
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003b90:	2a01      	cmp	r2, #1
 8003b92:	d017      	beq.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8003b94:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b96:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	353d      	adds	r5, #61	; 0x3d
 8003b9a:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	306e      	adds	r0, #110	; 0x6e
 8003ba0:	4382      	bics	r2, r0
 8003ba2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003ba8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003baa:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003bac:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003bae:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	4382      	bics	r2, r0
 8003bb4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003bb6:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003bb8:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003bc2:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003bc4:	bd30      	pop	{r4, r5, pc}
	...

08003bc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bc8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bca:	0004      	movs	r4, r0
 8003bcc:	343c      	adds	r4, #60	; 0x3c
 8003bce:	7823      	ldrb	r3, [r4, #0]
{
 8003bd0:	0002      	movs	r2, r0
 8003bd2:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d024      	beq.n	8003c22 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8003bd8:	0015      	movs	r5, r2
 8003bda:	353d      	adds	r5, #61	; 0x3d
 8003bdc:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003be0:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003be2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003be4:	4003      	ands	r3, r0
 8003be6:	6888      	ldr	r0, [r1, #8]
 8003be8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003bea:	480f      	ldr	r0, [pc, #60]	; (8003c28 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003bec:	4003      	ands	r3, r0
 8003bee:	6848      	ldr	r0, [r1, #4]
 8003bf0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003bf2:	480e      	ldr	r0, [pc, #56]	; (8003c2c <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8003bf4:	4003      	ands	r3, r0
 8003bf6:	6808      	ldr	r0, [r1, #0]
 8003bf8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003bfa:	480d      	ldr	r0, [pc, #52]	; (8003c30 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8003bfc:	4003      	ands	r3, r0
 8003bfe:	6908      	ldr	r0, [r1, #16]
 8003c00:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c02:	480c      	ldr	r0, [pc, #48]	; (8003c34 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8003c04:	4003      	ands	r3, r0
 8003c06:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c08:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c0a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c0c:	480a      	ldr	r0, [pc, #40]	; (8003c38 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8003c0e:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c10:	480a      	ldr	r0, [pc, #40]	; (8003c3c <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c12:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c14:	4003      	ands	r3, r0
 8003c16:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8003c18:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003c1a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8003c20:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8003c22:	bd30      	pop	{r4, r5, pc}
 8003c24:	fffffcff 	.word	0xfffffcff
 8003c28:	fffffbff 	.word	0xfffffbff
 8003c2c:	fffff7ff 	.word	0xfffff7ff
 8003c30:	ffffefff 	.word	0xffffefff
 8003c34:	ffffdfff 	.word	0xffffdfff
 8003c38:	ffffbfff 	.word	0xffffbfff
 8003c3c:	ffff7fff 	.word	0xffff7fff

08003c40 <HAL_TIMEx_CommutationCallback>:
 8003c40:	4770      	bx	lr

08003c42 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c42:	4770      	bx	lr

08003c44 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c44:	6803      	ldr	r3, [r0, #0]
 8003c46:	4906      	ldr	r1, [pc, #24]	; (8003c60 <UART_EndRxTransfer+0x1c>)
 8003c48:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c4a:	306a      	adds	r0, #106	; 0x6a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	3123      	adds	r1, #35	; 0x23
 8003c54:	31ff      	adds	r1, #255	; 0xff
 8003c56:	438a      	bics	r2, r1
 8003c58:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	2320      	movs	r3, #32
 8003c5c:	7003      	strb	r3, [r0, #0]
}
 8003c5e:	4770      	bx	lr
 8003c60:	fffffedf 	.word	0xfffffedf

08003c64 <HAL_UART_TxCpltCallback>:
 8003c64:	4770      	bx	lr

08003c66 <HAL_UART_RxCpltCallback>:
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_ErrorCallback>:
 8003c68:	4770      	bx	lr

08003c6a <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8003c6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	0002      	movs	r2, r0
{
 8003c70:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003c72:	325a      	adds	r2, #90	; 0x5a
 8003c74:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003c76:	3a08      	subs	r2, #8
 8003c78:	8013      	strh	r3, [r2, #0]

  HAL_UART_ErrorCallback(huart);
 8003c7a:	f7ff fff5 	bl	8003c68 <HAL_UART_ErrorCallback>
}
 8003c7e:	bd10      	pop	{r4, pc}

08003c80 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c80:	0003      	movs	r3, r0
{
 8003c82:	b530      	push	{r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c84:	3369      	adds	r3, #105	; 0x69
 8003c86:	781b      	ldrb	r3, [r3, #0]
{
 8003c88:	0002      	movs	r2, r0
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c8c:	2b21      	cmp	r3, #33	; 0x21
 8003c8e:	d10f      	bne.n	8003cb0 <UART_Transmit_IT+0x30>
    if(huart->TxXferCount == 0U)
 8003c90:	0014      	movs	r4, r2
 8003c92:	3452      	adds	r4, #82	; 0x52
 8003c94:	8823      	ldrh	r3, [r4, #0]
 8003c96:	6811      	ldr	r1, [r2, #0]
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <UART_Transmit_IT+0x32>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c9e:	680a      	ldr	r2, [r1, #0]
 8003ca0:	307e      	adds	r0, #126	; 0x7e
 8003ca2:	4382      	bics	r2, r0
 8003ca4:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	6808      	ldr	r0, [r1, #0]
 8003caa:	4302      	orrs	r2, r0
 8003cac:	600a      	str	r2, [r1, #0]
      return HAL_OK;
 8003cae:	2000      	movs	r0, #0
  }
}
 8003cb0:	bd30      	pop	{r4, r5, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb2:	2080      	movs	r0, #128	; 0x80
 8003cb4:	6895      	ldr	r5, [r2, #8]
 8003cb6:	0140      	lsls	r0, r0, #5
 8003cb8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003cba:	4285      	cmp	r5, r0
 8003cbc:	d10d      	bne.n	8003cda <UART_Transmit_IT+0x5a>
 8003cbe:	6910      	ldr	r0, [r2, #16]
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d10a      	bne.n	8003cda <UART_Transmit_IT+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003cc4:	8818      	ldrh	r0, [r3, #0]
        huart->pTxBuffPtr += 2U;
 8003cc6:	3302      	adds	r3, #2
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003cc8:	05c0      	lsls	r0, r0, #23
 8003cca:	0dc0      	lsrs	r0, r0, #23
 8003ccc:	8508      	strh	r0, [r1, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003cce:	64d3      	str	r3, [r2, #76]	; 0x4c
      huart->TxXferCount--;
 8003cd0:	8823      	ldrh	r3, [r4, #0]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	8023      	strh	r3, [r4, #0]
 8003cd8:	e7e9      	b.n	8003cae <UART_Transmit_IT+0x2e>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8003cda:	1c58      	adds	r0, r3, #1
 8003cdc:	64d0      	str	r0, [r2, #76]	; 0x4c
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	850b      	strh	r3, [r1, #40]	; 0x28
 8003ce2:	e7f5      	b.n	8003cd0 <UART_Transmit_IT+0x50>

08003ce4 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ce4:	2140      	movs	r1, #64	; 0x40
 8003ce6:	6802      	ldr	r2, [r0, #0]
{
 8003ce8:	b510      	push	{r4, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cea:	6813      	ldr	r3, [r2, #0]
 8003cec:	438b      	bics	r3, r1
 8003cee:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	3369      	adds	r3, #105	; 0x69
 8003cf6:	701a      	strb	r2, [r3, #0]

  HAL_UART_TxCpltCallback(huart);
 8003cf8:	f7ff ffb4 	bl	8003c64 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d00:	0002      	movs	r2, r0
{
 8003d02:	b570      	push	{r4, r5, r6, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d04:	326a      	adds	r2, #106	; 0x6a
 8003d06:	7811      	ldrb	r1, [r2, #0]
 8003d08:	6803      	ldr	r3, [r0, #0]
 8003d0a:	2922      	cmp	r1, #34	; 0x22
 8003d0c:	d12d      	bne.n	8003d6a <UART_Receive_IT+0x6a>
  uint16_t  uhMask = huart->Mask;
 8003d0e:	0001      	movs	r1, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	2480      	movs	r4, #128	; 0x80
  uint16_t  uhMask = huart->Mask;
 8003d12:	315c      	adds	r1, #92	; 0x5c
 8003d14:	880d      	ldrh	r5, [r1, #0]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d16:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d18:	0164      	lsls	r4, r4, #5
 8003d1a:	4029      	ands	r1, r5
 8003d1c:	6885      	ldr	r5, [r0, #8]
 8003d1e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003d20:	42a5      	cmp	r5, r4
 8003d22:	d11e      	bne.n	8003d62 <UART_Receive_IT+0x62>
 8003d24:	6904      	ldr	r4, [r0, #16]
 8003d26:	2c00      	cmp	r4, #0
 8003d28:	d11b      	bne.n	8003d62 <UART_Receive_IT+0x62>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8003d2a:	8019      	strh	r1, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8003d30:	0001      	movs	r1, r0
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8003d32:	2400      	movs	r4, #0
    if(--huart->RxXferCount == 0U)
 8003d34:	315a      	adds	r1, #90	; 0x5a
 8003d36:	880b      	ldrh	r3, [r1, #0]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	800b      	strh	r3, [r1, #0]
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	d10d      	bne.n	8003d5e <UART_Receive_IT+0x5e>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d42:	6803      	ldr	r3, [r0, #0]
 8003d44:	4d0c      	ldr	r5, [pc, #48]	; (8003d78 <UART_Receive_IT+0x78>)
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	4029      	ands	r1, r5
 8003d4a:	6019      	str	r1, [r3, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4c:	6899      	ldr	r1, [r3, #8]
 8003d4e:	3523      	adds	r5, #35	; 0x23
 8003d50:	35ff      	adds	r5, #255	; 0xff
 8003d52:	43a9      	bics	r1, r5
 8003d54:	6099      	str	r1, [r3, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8003d56:	2320      	movs	r3, #32
 8003d58:	7013      	strb	r3, [r2, #0]
      HAL_UART_RxCpltCallback(huart);
 8003d5a:	f7ff ff84 	bl	8003c66 <HAL_UART_RxCpltCallback>
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8003d5e:	0020      	movs	r0, r4
 8003d60:	bd70      	pop	{r4, r5, r6, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d62:	1c5c      	adds	r4, r3, #1
 8003d64:	6544      	str	r4, [r0, #84]	; 0x54
 8003d66:	7019      	strb	r1, [r3, #0]
 8003d68:	e7e2      	b.n	8003d30 <UART_Receive_IT+0x30>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	6999      	ldr	r1, [r3, #24]
    return HAL_BUSY;
 8003d6e:	2402      	movs	r4, #2
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8003d74:	e7f3      	b.n	8003d5e <UART_Receive_IT+0x5e>
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	fffffedf 	.word	0xfffffedf

08003d7c <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003d7c:	220f      	movs	r2, #15
{
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003d82:	6800      	ldr	r0, [r0, #0]
 8003d84:	69c3      	ldr	r3, [r0, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d86:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003d88:	401a      	ands	r2, r3
  if (errorflags == RESET)
 8003d8a:	d108      	bne.n	8003d9e <HAL_UART_IRQHandler+0x22>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d8c:	2520      	movs	r5, #32
 8003d8e:	422b      	tst	r3, r5
 8003d90:	d005      	beq.n	8003d9e <HAL_UART_IRQHandler+0x22>
 8003d92:	4229      	tst	r1, r5
 8003d94:	d003      	beq.n	8003d9e <HAL_UART_IRQHandler+0x22>
      UART_Receive_IT(huart);
 8003d96:	0020      	movs	r0, r4
 8003d98:	f7ff ffb2 	bl	8003d00 <UART_Receive_IT>
}
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
  cr3its = READ_REG(huart->Instance->CR3);
 8003d9e:	6885      	ldr	r5, [r0, #8]
  if(   (errorflags != RESET)
 8003da0:	2a00      	cmp	r2, #0
 8003da2:	d060      	beq.n	8003e66 <HAL_UART_IRQHandler+0xea>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8003da4:	2201      	movs	r2, #1
 8003da6:	4015      	ands	r5, r2
 8003da8:	d103      	bne.n	8003db2 <HAL_UART_IRQHandler+0x36>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8003daa:	2690      	movs	r6, #144	; 0x90
 8003dac:	0076      	lsls	r6, r6, #1
 8003dae:	4231      	tst	r1, r6
 8003db0:	d059      	beq.n	8003e66 <HAL_UART_IRQHandler+0xea>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003db2:	4213      	tst	r3, r2
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x46>
 8003db6:	05ce      	lsls	r6, r1, #23
 8003db8:	d503      	bpl.n	8003dc2 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8003dba:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003dbc:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003dbe:	4332      	orrs	r2, r6
 8003dc0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4213      	tst	r3, r2
 8003dc6:	d006      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x5a>
 8003dc8:	2d00      	cmp	r5, #0
 8003dca:	d004      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8003dcc:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dce:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003dd0:	1892      	adds	r2, r2, r2
 8003dd2:	4332      	orrs	r2, r6
 8003dd4:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	4213      	tst	r3, r2
 8003dda:	d006      	beq.n	8003dea <HAL_UART_IRQHandler+0x6e>
 8003ddc:	2d00      	cmp	r5, #0
 8003dde:	d004      	beq.n	8003dea <HAL_UART_IRQHandler+0x6e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8003de0:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003de2:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8003de4:	3a02      	subs	r2, #2
 8003de6:	4332      	orrs	r2, r6
 8003de8:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8003dea:	071a      	lsls	r2, r3, #28
 8003dec:	d508      	bpl.n	8003e00 <HAL_UART_IRQHandler+0x84>
 8003dee:	068a      	lsls	r2, r1, #26
 8003df0:	d401      	bmi.n	8003df6 <HAL_UART_IRQHandler+0x7a>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003df2:	2d00      	cmp	r5, #0
 8003df4:	d004      	beq.n	8003e00 <HAL_UART_IRQHandler+0x84>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8003df6:	2208      	movs	r2, #8
 8003df8:	6202      	str	r2, [r0, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dfa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003dfc:	4302      	orrs	r2, r0
 8003dfe:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e00:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003e02:	2a00      	cmp	r2, #0
 8003e04:	d0ca      	beq.n	8003d9c <HAL_UART_IRQHandler+0x20>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e06:	2220      	movs	r2, #32
 8003e08:	4213      	tst	r3, r2
 8003e0a:	d004      	beq.n	8003e16 <HAL_UART_IRQHandler+0x9a>
 8003e0c:	4211      	tst	r1, r2
 8003e0e:	d002      	beq.n	8003e16 <HAL_UART_IRQHandler+0x9a>
        UART_Receive_IT(huart);
 8003e10:	0020      	movs	r0, r4
 8003e12:	f7ff ff75 	bl	8003d00 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e16:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        UART_EndRxTransfer(huart);
 8003e18:	0020      	movs	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e1a:	071b      	lsls	r3, r3, #28
 8003e1c:	d404      	bmi.n	8003e28 <HAL_UART_IRQHandler+0xac>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	689d      	ldr	r5, [r3, #8]
 8003e22:	2340      	movs	r3, #64	; 0x40
 8003e24:	401d      	ands	r5, r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8003e26:	d01a      	beq.n	8003e5e <HAL_UART_IRQHandler+0xe2>
        UART_EndRxTransfer(huart);
 8003e28:	f7ff ff0c 	bl	8003c44 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	2140      	movs	r1, #64	; 0x40
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	420a      	tst	r2, r1
 8003e34:	d00f      	beq.n	8003e56 <HAL_UART_IRQHandler+0xda>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e36:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003e38:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3a:	438a      	bics	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8003e3e:	2800      	cmp	r0, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_UART_IRQHandler+0xda>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_UART_IRQHandler+0x114>)
 8003e44:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e46:	f7fe ff0d 	bl	8002c64 <HAL_DMA_Abort_IT>
 8003e4a:	2800      	cmp	r0, #0
 8003e4c:	d0a6      	beq.n	8003d9c <HAL_UART_IRQHandler+0x20>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e4e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003e50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003e52:	4798      	blx	r3
 8003e54:	e7a2      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8003e56:	0020      	movs	r0, r4
 8003e58:	f7ff ff06 	bl	8003c68 <HAL_UART_ErrorCallback>
 8003e5c:	e79e      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
        HAL_UART_ErrorCallback(huart);
 8003e5e:	f7ff ff03 	bl	8003c68 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	66e5      	str	r5, [r4, #108]	; 0x6c
 8003e64:	e79a      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	4213      	tst	r3, r2
 8003e6a:	d005      	beq.n	8003e78 <HAL_UART_IRQHandler+0xfc>
 8003e6c:	4211      	tst	r1, r2
 8003e6e:	d003      	beq.n	8003e78 <HAL_UART_IRQHandler+0xfc>
    UART_Transmit_IT(huart);
 8003e70:	0020      	movs	r0, r4
 8003e72:	f7ff ff05 	bl	8003c80 <UART_Transmit_IT>
    return;
 8003e76:	e791      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e78:	2240      	movs	r2, #64	; 0x40
 8003e7a:	4213      	tst	r3, r2
 8003e7c:	d100      	bne.n	8003e80 <HAL_UART_IRQHandler+0x104>
 8003e7e:	e78d      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
 8003e80:	4211      	tst	r1, r2
 8003e82:	d100      	bne.n	8003e86 <HAL_UART_IRQHandler+0x10a>
 8003e84:	e78a      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
    UART_EndTransmit_IT(huart);
 8003e86:	0020      	movs	r0, r4
 8003e88:	f7ff ff2c 	bl	8003ce4 <UART_EndTransmit_IT>
    return;
 8003e8c:	e786      	b.n	8003d9c <HAL_UART_IRQHandler+0x20>
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	08003c6b 	.word	0x08003c6b

08003e94 <HAL_ADC_MspInit>:
  HAL_ADC_MspInit(&hadc);

}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	0005      	movs	r5, r0
 8003e98:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e9a:	2214      	movs	r2, #20
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	a803      	add	r0, sp, #12
 8003ea0:	f000 fe69 	bl	8004b76 <memset>
  if(adcHandle->Instance==ADC1)
 8003ea4:	4b21      	ldr	r3, [pc, #132]	; (8003f2c <HAL_ADC_MspInit+0x98>)
 8003ea6:	682a      	ldr	r2, [r5, #0]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d13d      	bne.n	8003f28 <HAL_ADC_MspInit+0x94>
  {

    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003eac:	2680      	movs	r6, #128	; 0x80
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eae:	2080      	movs	r0, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <HAL_ADC_MspInit+0x9c>)
 8003eb2:	00b6      	lsls	r6, r6, #2
 8003eb4:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eb6:	0280      	lsls	r0, r0, #10
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003eb8:	4332      	orrs	r2, r6
 8003eba:	619a      	str	r2, [r3, #24]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	4032      	ands	r2, r6
 8003ec0:	9200      	str	r2, [sp, #0]
 8003ec2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec4:	6959      	ldr	r1, [r3, #20]
 8003ec6:	4301      	orrs	r1, r0
 8003ec8:	6159      	str	r1, [r3, #20]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003eca:	2101      	movs	r1, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4002      	ands	r2, r0
 8003ed0:	9201      	str	r2, [sp, #4]
 8003ed2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003ed4:	695a      	ldr	r2, [r3, #20]
    */
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
                          |CURRENT_PHASE_V_Pin|CURRENT_PHASE_W_Pin|THROTTLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed6:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	615a      	str	r2, [r3, #20]
 8003edc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ede:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_DMA1_CLK_ENABLE();
 8003ee0:	400b      	ands	r3, r1
 8003ee2:	9302      	str	r3, [sp, #8]
 8003ee4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 8003ee6:	237f      	movs	r3, #127	; 0x7f
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VOLTAGE_PHASE_U_Pin|VOLTAGE_PHASE_V_Pin|VOLTAGE_PHASE_W_Pin|CURRENT_PHASE_U_Pin 
 8003eea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eec:	3b7c      	subs	r3, #124	; 0x7c
 8003eee:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef0:	f7fe ff24 	bl	8002d3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003ef4:	4c0f      	ldr	r4, [pc, #60]	; (8003f34 <HAL_ADC_MspInit+0xa0>)
 8003ef6:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_ADC_MspInit+0xa4>)
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc.Init.Mode = DMA_CIRCULAR;
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003ef8:	0020      	movs	r0, r4
    hdma_adc.Instance = DMA1_Channel1;
 8003efa:	6023      	str	r3, [r4, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003efc:	2300      	movs	r3, #0
 8003efe:	6063      	str	r3, [r4, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f00:	60a3      	str	r3, [r4, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003f02:	3380      	adds	r3, #128	; 0x80
 8003f04:	60e3      	str	r3, [r4, #12]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f06:	2380      	movs	r3, #128	; 0x80
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	6163      	str	r3, [r4, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003f0c:	2320      	movs	r3, #32
 8003f0e:	61a3      	str	r3, [r4, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f14:	6126      	str	r6, [r4, #16]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003f16:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003f18:	f7fe fe6e 	bl	8002bf8 <HAL_DMA_Init>
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d001      	beq.n	8003f24 <HAL_ADC_MspInit+0x90>
    {
      Error_Handler();
 8003f20:	f000 fbaa 	bl	8004678 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8003f24:	63ec      	str	r4, [r5, #60]	; 0x3c
 8003f26:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003f28:	b008      	add	sp, #32
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	40012400 	.word	0x40012400
 8003f30:	40021000 	.word	0x40021000
 8003f34:	20000064 	.word	0x20000064
 8003f38:	40020008 	.word	0x40020008

08003f3c <MX_ADC_Init>:
{
 8003f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f3e:	220c      	movs	r2, #12
 8003f40:	2100      	movs	r1, #0
 8003f42:	a801      	add	r0, sp, #4
 8003f44:	f000 fe17 	bl	8004b76 <memset>
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003f48:	2201      	movs	r2, #1
  hadc.Instance = ADC1;
 8003f4a:	4c1d      	ldr	r4, [pc, #116]	; (8003fc0 <MX_ADC_Init+0x84>)
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <MX_ADC_Init+0x88>)
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003f4e:	6122      	str	r2, [r4, #16]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003f50:	6222      	str	r2, [r4, #32]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003f52:	323f      	adds	r2, #63	; 0x3f
 8003f54:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003f56:	2280      	movs	r2, #128	; 0x80
  hadc.Instance = ADC1;
 8003f58:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003f5a:	2108      	movs	r1, #8
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f5c:	2300      	movs	r3, #0
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003f5e:	00d2      	lsls	r2, r2, #3
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003f60:	0020      	movs	r0, r4
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f62:	6063      	str	r3, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003f64:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f66:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003f68:	6161      	str	r1, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003f6a:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003f6c:	61e3      	str	r3, [r4, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003f6e:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003f70:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003f72:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003f74:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003f76:	f7fe fbcf 	bl	8002718 <HAL_ADC_Init>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_ADC_Init+0x46>
    Error_Handler();
 8003f7e:	f000 fb7b 	bl	8004678 <Error_Handler>
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	015b      	lsls	r3, r3, #5
 8003f86:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003f88:	2380      	movs	r3, #128	; 0x80
 8003f8a:	055b      	lsls	r3, r3, #21
 8003f8c:	9303      	str	r3, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_6;
 8003f8e:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f90:	a901      	add	r1, sp, #4
 8003f92:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_6;
 8003f94:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003f96:	f7fe fd11 	bl	80029bc <HAL_ADC_ConfigChannel>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d001      	beq.n	8003fa2 <MX_ADC_Init+0x66>
    Error_Handler();
 8003f9e:	f000 fb6b 	bl	8004678 <Error_Handler>
  HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	200c      	movs	r0, #12
 8003fa8:	f7fe fdd2 	bl	8002b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8003fac:	200c      	movs	r0, #12
 8003fae:	f7fe fdff 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
  HAL_ADCEx_Calibration_Start(&hadc);
 8003fb2:	0020      	movs	r0, r4
 8003fb4:	f7fe fd78 	bl	8002aa8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_MspInit(&hadc);
 8003fb8:	0020      	movs	r0, r4
 8003fba:	f7ff ff6b 	bl	8003e94 <HAL_ADC_MspInit>
}
 8003fbe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 8003fc0:	200000ac 	.word	0x200000ac
 8003fc4:	40012400 	.word	0x40012400

08003fc8 <FindWaveformPhase>:
  * @brief Function to find the waveform phase based on the hall effect values
  * @param none
  * @retval none
  */
void FindWaveformPhase(void)
{
 8003fc8:	2080      	movs	r0, #128	; 0x80
	if(GPIOB->IDR & HALL_PHASE_U_Pin)
 8003fca:	4a12      	ldr	r2, [pc, #72]	; (8004014 <FindWaveformPhase+0x4c>)
{
 8003fcc:	b510      	push	{r4, lr}
	if(GPIOB->IDR & HALL_PHASE_U_Pin)
 8003fce:	6911      	ldr	r1, [r2, #16]
 8003fd0:	0180      	lsls	r0, r0, #6
 8003fd2:	4b11      	ldr	r3, [pc, #68]	; (8004018 <FindWaveformPhase+0x50>)
 8003fd4:	04c9      	lsls	r1, r1, #19
 8003fd6:	d50c      	bpl.n	8003ff2 <FindWaveformPhase+0x2a>
	{
		if(GPIOB->IDR & HALL_PHASE_V_Pin)
 8003fd8:	6911      	ldr	r1, [r2, #16]
 8003fda:	4201      	tst	r1, r0
 8003fdc:	d002      	beq.n	8003fe4 <FindWaveformPhase+0x1c>
		{
			waveformPhase = waveform_Phase4;
 8003fde:	2204      	movs	r2, #4
				waveformPhase = waveform_Phase1;
			}
			// If none of the hall effect outputs are active then there is a problem
			else
			{
				waveformPhase = waveform_NoWaveform;
 8003fe0:	701a      	strb	r2, [r3, #0]
			}

		}
	}
}
 8003fe2:	bd10      	pop	{r4, pc}
		else if(GPIOB->IDR & HALL_PHASE_W_Pin)
 8003fe4:	6912      	ldr	r2, [r2, #16]
 8003fe6:	0452      	lsls	r2, r2, #17
 8003fe8:	d501      	bpl.n	8003fee <FindWaveformPhase+0x26>
			waveformPhase = waveform_Phase6;
 8003fea:	2206      	movs	r2, #6
 8003fec:	e7f8      	b.n	8003fe0 <FindWaveformPhase+0x18>
			waveformPhase = waveform_Phase5;
 8003fee:	2205      	movs	r2, #5
 8003ff0:	e7f6      	b.n	8003fe0 <FindWaveformPhase+0x18>
 8003ff2:	2180      	movs	r1, #128	; 0x80
		if(GPIOB->IDR & HALL_PHASE_V_Pin)
 8003ff4:	6914      	ldr	r4, [r2, #16]
 8003ff6:	01c9      	lsls	r1, r1, #7
			if(GPIOB->IDR & HALL_PHASE_W_Pin)
 8003ff8:	6912      	ldr	r2, [r2, #16]
		if(GPIOB->IDR & HALL_PHASE_V_Pin)
 8003ffa:	4204      	tst	r4, r0
 8003ffc:	d005      	beq.n	800400a <FindWaveformPhase+0x42>
			if(GPIOB->IDR & HALL_PHASE_W_Pin)
 8003ffe:	420a      	tst	r2, r1
 8004000:	d001      	beq.n	8004006 <FindWaveformPhase+0x3e>
				waveformPhase = waveform_Phase2;
 8004002:	2202      	movs	r2, #2
 8004004:	e7ec      	b.n	8003fe0 <FindWaveformPhase+0x18>
				waveformPhase = waveform_Phase3;
 8004006:	2203      	movs	r2, #3
 8004008:	e7ea      	b.n	8003fe0 <FindWaveformPhase+0x18>
			if(GPIOB->IDR & HALL_PHASE_W_Pin)
 800400a:	400a      	ands	r2, r1
 800400c:	d0e8      	beq.n	8003fe0 <FindWaveformPhase+0x18>
				waveformPhase = waveform_Phase1;
 800400e:	2201      	movs	r2, #1
 8004010:	e7e6      	b.n	8003fe0 <FindWaveformPhase+0x18>
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	48000400 	.word	0x48000400
 8004018:	2000062c 	.word	0x2000062c

0800401c <StopWaveforms>:
  * @brief Function to stop the waveforms and turn off the output
  * @param none
  * @retval none
  */
void StopWaveforms(void)
{
 800401c:	b570      	push	{r4, r5, r6, lr}
	// Turn off all high side
	TIM1->CCR1 = 0;
 800401e:	2400      	movs	r4, #0
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <StopWaveforms+0x40>)
	TIM1->CCR2 = 0;
	TIM1->CCR3 = 0;

	// Turn on all low side
	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 8004022:	4d0f      	ldr	r5, [pc, #60]	; (8004060 <StopWaveforms+0x44>)
	TIM1->CCR1 = 0;
 8004024:	635c      	str	r4, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 8004026:	0028      	movs	r0, r5
	TIM1->CCR2 = 0;
 8004028:	639c      	str	r4, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 800402a:	0022      	movs	r2, r4
	TIM1->CCR3 = 0;
 800402c:	63dc      	str	r4, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 800402e:	2140      	movs	r1, #64	; 0x40
 8004030:	f7fe ff34 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 8004034:	0028      	movs	r0, r5
 8004036:	0022      	movs	r2, r4
 8004038:	2180      	movs	r1, #128	; 0x80
 800403a:	f7fe ff2f 	bl	8002e9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 800403e:	0022      	movs	r2, r4
 8004040:	2101      	movs	r1, #1
 8004042:	4808      	ldr	r0, [pc, #32]	; (8004064 <StopWaveforms+0x48>)
 8004044:	f7fe ff2a 	bl	8002e9c <HAL_GPIO_WritePin>

	// Update phase states
	phaseU_State = phaseLow;
 8004048:	2302      	movs	r3, #2
 800404a:	4a07      	ldr	r2, [pc, #28]	; (8004068 <StopWaveforms+0x4c>)
 800404c:	7013      	strb	r3, [r2, #0]
	phaseV_State = phaseLow;
 800404e:	4a07      	ldr	r2, [pc, #28]	; (800406c <StopWaveforms+0x50>)
 8004050:	7013      	strb	r3, [r2, #0]
	phaseW_State = phaseLow;
 8004052:	4a07      	ldr	r2, [pc, #28]	; (8004070 <StopWaveforms+0x54>)
 8004054:	7013      	strb	r3, [r2, #0]

	// Update output status
	outputState = outputOff;
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <StopWaveforms+0x58>)
 8004058:	701c      	strb	r4, [r3, #0]

}
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	40012c00 	.word	0x40012c00
 8004060:	48000800 	.word	0x48000800
 8004064:	48000400 	.word	0x48000400
 8004068:	20000058 	.word	0x20000058
 800406c:	20000030 	.word	0x20000030
 8004070:	20000060 	.word	0x20000060
 8004074:	20000034 	.word	0x20000034

08004078 <UpdateWaveforms>:
  * @brief Function to update the three waveforms
  * @param none
  * @retval none
  */
void UpdateWaveforms(void)
{
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch(waveformPhase)
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <UpdateWaveforms+0x148>)
 800407c:	7818      	ldrb	r0, [r3, #0]
 800407e:	3801      	subs	r0, #1
 8004080:	2805      	cmp	r0, #5
 8004082:	d900      	bls.n	8004086 <UpdateWaveforms+0xe>
 8004084:	e098      	b.n	80041b8 <UpdateWaveforms+0x140>
 8004086:	4f4f      	ldr	r7, [pc, #316]	; (80041c4 <UpdateWaveforms+0x14c>)
 8004088:	4c4f      	ldr	r4, [pc, #316]	; (80041c8 <UpdateWaveforms+0x150>)
 800408a:	4e50      	ldr	r6, [pc, #320]	; (80041cc <UpdateWaveforms+0x154>)
 800408c:	2500      	movs	r5, #0
 800408e:	f7fc f83b 	bl	8000108 <__gnu_thumb1_case_uqi>
 8004092:	1f03      	.short	0x1f03
 8004094:	7d654b3a 	.word	0x7d654b3a
		// Turn on phase U high side
		TIM1->CCR1 = waveformAmplitude;
		// Turn off phase U low side (will get turned back on in interrupts)
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
    	// Update phase state
    	phaseU_State = phaseHigh;
 8004098:	2501      	movs	r5, #1
		TIM1->CCR1 = waveformAmplitude;
 800409a:	683b      	ldr	r3, [r7, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 800409c:	2200      	movs	r2, #0
		TIM1->CCR1 = waveformAmplitude;
 800409e:	6363      	str	r3, [r4, #52]	; 0x34
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 80040a0:	2140      	movs	r1, #64	; 0x40
 80040a2:	484b      	ldr	r0, [pc, #300]	; (80041d0 <UpdateWaveforms+0x158>)
 80040a4:	f7fe fefa 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseU_State = phaseHigh;
 80040a8:	7035      	strb	r5, [r6, #0]

    	// Turn off phase V high side
    	TIM1->CCR2 = 0;
 80040aa:	2600      	movs	r6, #0
    	// Turn on phase V low side
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, SET);
 80040ac:	002a      	movs	r2, r5
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	4847      	ldr	r0, [pc, #284]	; (80041d0 <UpdateWaveforms+0x158>)
    	TIM1->CCR2 = 0;
 80040b2:	63a6      	str	r6, [r4, #56]	; 0x38
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, SET);
 80040b4:	f7fe fef2 	bl	8002e9c <HAL_GPIO_WritePin>
    	// Update phase state
    	phaseV_State = phaseLow;
 80040b8:	2302      	movs	r3, #2
 80040ba:	4a46      	ldr	r2, [pc, #280]	; (80041d4 <UpdateWaveforms+0x15c>)

    	// Turn off phase W high side
    	TIM1->CCR3 = 0;
    	// Turn off phase W low side
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 80040bc:	0029      	movs	r1, r5
    	phaseV_State = phaseLow;
 80040be:	7013      	strb	r3, [r2, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 80040c0:	4845      	ldr	r0, [pc, #276]	; (80041d8 <UpdateWaveforms+0x160>)
    	TIM1->CCR3 = 0;
 80040c2:	63e6      	str	r6, [r4, #60]	; 0x3c
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 80040c4:	0032      	movs	r2, r6
 80040c6:	f7fe fee9 	bl	8002e9c <HAL_GPIO_WritePin>
    	// Update phase state
    	phaseW_State = phaseOff;
 80040ca:	4b44      	ldr	r3, [pc, #272]	; (80041dc <UpdateWaveforms+0x164>)
 80040cc:	701e      	strb	r6, [r3, #0]
		StopWaveforms();

		return;
	}

}
 80040ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 80040d0:	2200      	movs	r2, #0
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	483e      	ldr	r0, [pc, #248]	; (80041d0 <UpdateWaveforms+0x158>)
		TIM1->CCR1 = 0;
 80040d6:	6365      	str	r5, [r4, #52]	; 0x34
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 80040d8:	f7fe fee0 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseU_State = phaseOff;
 80040dc:	7035      	strb	r5, [r6, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, SET);
 80040de:	2201      	movs	r2, #1
    	TIM1->CCR2 = 0;
 80040e0:	63a5      	str	r5, [r4, #56]	; 0x38
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, SET);
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	483a      	ldr	r0, [pc, #232]	; (80041d0 <UpdateWaveforms+0x158>)
 80040e6:	f7fe fed9 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseV_State = phaseLow;
 80040ea:	2302      	movs	r3, #2
 80040ec:	4a39      	ldr	r2, [pc, #228]	; (80041d4 <UpdateWaveforms+0x15c>)
 80040ee:	7013      	strb	r3, [r2, #0]
    	TIM1->CCR3 = waveformAmplitude;
 80040f0:	683b      	ldr	r3, [r7, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 80040f2:	2200      	movs	r2, #0
    	TIM1->CCR3 = waveformAmplitude;
 80040f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 80040f6:	2101      	movs	r1, #1
 80040f8:	4837      	ldr	r0, [pc, #220]	; (80041d8 <UpdateWaveforms+0x160>)
 80040fa:	f7fe fecf 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseW_State = phaseHigh;
 80040fe:	2301      	movs	r3, #1
    	phaseW_State = phaseLow;
 8004100:	4a36      	ldr	r2, [pc, #216]	; (80041dc <UpdateWaveforms+0x164>)
 8004102:	7013      	strb	r3, [r2, #0]
		return;
 8004104:	e7e3      	b.n	80040ce <UpdateWaveforms+0x56>
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, SET);
 8004106:	2201      	movs	r2, #1
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	4831      	ldr	r0, [pc, #196]	; (80041d0 <UpdateWaveforms+0x158>)
		TIM1->CCR1 = 0;
 800410c:	6365      	str	r5, [r4, #52]	; 0x34
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, SET);
 800410e:	f7fe fec5 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseU_State = phaseLow;
 8004112:	2302      	movs	r3, #2
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 8004114:	2200      	movs	r2, #0
    	phaseU_State = phaseLow;
 8004116:	7033      	strb	r3, [r6, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 8004118:	2180      	movs	r1, #128	; 0x80
    	TIM1->CCR2 = 0;
 800411a:	63a5      	str	r5, [r4, #56]	; 0x38
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 800411c:	482c      	ldr	r0, [pc, #176]	; (80041d0 <UpdateWaveforms+0x158>)
 800411e:	f7fe febd 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseV_State = phaseOff;
 8004122:	4b2c      	ldr	r3, [pc, #176]	; (80041d4 <UpdateWaveforms+0x15c>)
 8004124:	701d      	strb	r5, [r3, #0]
 8004126:	e7e3      	b.n	80040f0 <UpdateWaveforms+0x78>
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, SET);
 8004128:	2201      	movs	r2, #1
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	4828      	ldr	r0, [pc, #160]	; (80041d0 <UpdateWaveforms+0x158>)
		TIM1->CCR1 = 0;
 800412e:	6365      	str	r5, [r4, #52]	; 0x34
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, SET);
 8004130:	f7fe feb4 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseU_State = phaseLow;
 8004134:	2302      	movs	r3, #2
 8004136:	7033      	strb	r3, [r6, #0]
    	TIM1->CCR2 = waveformAmplitude;
 8004138:	683b      	ldr	r3, [r7, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 800413a:	2200      	movs	r2, #0
    	TIM1->CCR2 = waveformAmplitude;
 800413c:	63a3      	str	r3, [r4, #56]	; 0x38
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 800413e:	2180      	movs	r1, #128	; 0x80
 8004140:	4823      	ldr	r0, [pc, #140]	; (80041d0 <UpdateWaveforms+0x158>)
 8004142:	f7fe feab 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseV_State = phaseHigh;
 8004146:	2101      	movs	r1, #1
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <UpdateWaveforms+0x15c>)
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 800414a:	2200      	movs	r2, #0
    	phaseV_State = phaseHigh;
 800414c:	7019      	strb	r1, [r3, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 800414e:	4822      	ldr	r0, [pc, #136]	; (80041d8 <UpdateWaveforms+0x160>)
    	TIM1->CCR3 = 0;
 8004150:	63e5      	str	r5, [r4, #60]	; 0x3c
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 8004152:	f7fe fea3 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseW_State = phaseOff;
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <UpdateWaveforms+0x164>)
 8004158:	701d      	strb	r5, [r3, #0]
		return;
 800415a:	e7b8      	b.n	80040ce <UpdateWaveforms+0x56>
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 800415c:	2200      	movs	r2, #0
 800415e:	2140      	movs	r1, #64	; 0x40
 8004160:	481b      	ldr	r0, [pc, #108]	; (80041d0 <UpdateWaveforms+0x158>)
		TIM1->CCR1 = 0;
 8004162:	6365      	str	r5, [r4, #52]	; 0x34
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 8004164:	f7fe fe9a 	bl	8002e9c <HAL_GPIO_WritePin>
    	TIM1->CCR2 = waveformAmplitude;
 8004168:	683b      	ldr	r3, [r7, #0]
    	phaseU_State = phaseOff;
 800416a:	7035      	strb	r5, [r6, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 800416c:	2200      	movs	r2, #0
    	TIM1->CCR2 = waveformAmplitude;
 800416e:	63a3      	str	r3, [r4, #56]	; 0x38
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 8004170:	2180      	movs	r1, #128	; 0x80
 8004172:	4817      	ldr	r0, [pc, #92]	; (80041d0 <UpdateWaveforms+0x158>)
 8004174:	f7fe fe92 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseV_State = phaseHigh;
 8004178:	2101      	movs	r1, #1
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, SET);
 800417a:	000a      	movs	r2, r1
    	phaseV_State = phaseHigh;
 800417c:	4b15      	ldr	r3, [pc, #84]	; (80041d4 <UpdateWaveforms+0x15c>)
 800417e:	7019      	strb	r1, [r3, #0]
    	TIM1->CCR3 = 0;
 8004180:	63e5      	str	r5, [r4, #60]	; 0x3c
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, SET);
 8004182:	4815      	ldr	r0, [pc, #84]	; (80041d8 <UpdateWaveforms+0x160>)
 8004184:	f7fe fe8a 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseW_State = phaseLow;
 8004188:	2302      	movs	r3, #2
 800418a:	e7b9      	b.n	8004100 <UpdateWaveforms+0x88>
    	phaseU_State = phaseHigh;
 800418c:	2501      	movs	r5, #1
		TIM1->CCR1 = waveformAmplitude;
 800418e:	683b      	ldr	r3, [r7, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 8004190:	2200      	movs	r2, #0
		TIM1->CCR1 = waveformAmplitude;
 8004192:	6363      	str	r3, [r4, #52]	; 0x34
    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	480e      	ldr	r0, [pc, #56]	; (80041d0 <UpdateWaveforms+0x158>)
 8004198:	f7fe fe80 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseU_State = phaseHigh;
 800419c:	7035      	strb	r5, [r6, #0]
    	TIM1->CCR2 = 0;
 800419e:	2600      	movs	r6, #0
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 80041a0:	2180      	movs	r1, #128	; 0x80
 80041a2:	0032      	movs	r2, r6
    	TIM1->CCR2 = 0;
 80041a4:	63a6      	str	r6, [r4, #56]	; 0x38
    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 80041a6:	480a      	ldr	r0, [pc, #40]	; (80041d0 <UpdateWaveforms+0x158>)
 80041a8:	f7fe fe78 	bl	8002e9c <HAL_GPIO_WritePin>
    	phaseV_State = phaseOff;
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <UpdateWaveforms+0x15c>)
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, SET);
 80041ae:	002a      	movs	r2, r5
    	phaseV_State = phaseOff;
 80041b0:	701e      	strb	r6, [r3, #0]
    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, SET);
 80041b2:	0029      	movs	r1, r5
    	TIM1->CCR3 = 0;
 80041b4:	63e6      	str	r6, [r4, #60]	; 0x3c
 80041b6:	e7e4      	b.n	8004182 <UpdateWaveforms+0x10a>
		StopWaveforms();
 80041b8:	f7ff ff30 	bl	800401c <StopWaveforms>
		return;
 80041bc:	e787      	b.n	80040ce <UpdateWaveforms+0x56>
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	2000062c 	.word	0x2000062c
 80041c4:	20000024 	.word	0x20000024
 80041c8:	40012c00 	.word	0x40012c00
 80041cc:	20000058 	.word	0x20000058
 80041d0:	48000800 	.word	0x48000800
 80041d4:	20000030 	.word	0x20000030
 80041d8:	48000400 	.word	0x48000400
 80041dc:	20000060 	.word	0x20000060

080041e0 <fast_sin>:
  * @brief Use the fast sin algorithm to calculate sin(x)
  * @param x = input to sin(x)
  * @retval floating point value of result
  */
float fast_sin(float x)
{
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	1c04      	adds	r4, r0, #0
	// If a value outside of -Pi - Pi is given, correct it
	if(x < -(PI))
 80041e4:	f7fe f922 	bl	800242c <__aeabi_f2d>
 80041e8:	4a42      	ldr	r2, [pc, #264]	; (80042f4 <fast_sin+0x114>)
 80041ea:	4b43      	ldr	r3, [pc, #268]	; (80042f8 <fast_sin+0x118>)
 80041ec:	0006      	movs	r6, r0
 80041ee:	000f      	movs	r7, r1
 80041f0:	f7fc f836 	bl	8000260 <__aeabi_dcmplt>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	d04e      	beq.n	8004296 <fast_sin+0xb6>
	{
		x += TWO_PI;
 80041f8:	4a40      	ldr	r2, [pc, #256]	; (80042fc <fast_sin+0x11c>)
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <fast_sin+0x120>)
 80041fc:	0030      	movs	r0, r6
 80041fe:	0039      	movs	r1, r7
 8004200:	f7fc fc3a 	bl	8000a78 <__aeabi_dadd>
	}
	else if(x > PI)
	{
		x -= TWO_PI;
 8004204:	f7fe f964 	bl	80024d0 <__aeabi_d2f>
 8004208:	1c04      	adds	r4, r0, #0
	}

	// Compute the approximation of sine
	float sine;
	// Compute the brunt of the calculation using sin(x) ~ (4/pi)x +- (4/(pi^2))x^2
	if(x < 0)
 800420a:	2100      	movs	r1, #0
 800420c:	1c20      	adds	r0, r4, #0
 800420e:	f7fc f861 	bl	80002d4 <__aeabi_fcmplt>
 8004212:	2800      	cmp	r0, #0
 8004214:	d04e      	beq.n	80042b4 <fast_sin+0xd4>
	{
		sine = (FOUR_OVER_PI * x) + (FOUR_OVER_PI2 * x * x);
 8004216:	1c20      	adds	r0, r4, #0
 8004218:	f7fe f908 	bl	800242c <__aeabi_f2d>
 800421c:	0004      	movs	r4, r0
 800421e:	000d      	movs	r5, r1
 8004220:	4a38      	ldr	r2, [pc, #224]	; (8004304 <fast_sin+0x124>)
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <fast_sin+0x128>)
 8004224:	f7fd fb6c 	bl	8001900 <__aeabi_dmul>
 8004228:	0022      	movs	r2, r4
 800422a:	002b      	movs	r3, r5
 800422c:	f7fd fb68 	bl	8001900 <__aeabi_dmul>
 8004230:	4a36      	ldr	r2, [pc, #216]	; (800430c <fast_sin+0x12c>)
 8004232:	0006      	movs	r6, r0
 8004234:	000f      	movs	r7, r1
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <fast_sin+0x130>)
 8004238:	0020      	movs	r0, r4
 800423a:	0029      	movs	r1, r5
 800423c:	f7fd fb60 	bl	8001900 <__aeabi_dmul>
 8004240:	0002      	movs	r2, r0
 8004242:	000b      	movs	r3, r1
 8004244:	0030      	movs	r0, r6
 8004246:	0039      	movs	r1, r7
 8004248:	f7fc fc16 	bl	8000a78 <__aeabi_dadd>
	}
	else
	{
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 800424c:	f7fe f940 	bl	80024d0 <__aeabi_d2f>
	}
	// Make the calculation more accurate by = .225 * (+-(sine)^2 - sine) + sine
    if (sine < 0)
 8004250:	2100      	movs	r1, #0
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 8004252:	1c04      	adds	r4, r0, #0
    if (sine < 0)
 8004254:	f7fc f83e 	bl	80002d4 <__aeabi_fcmplt>
 8004258:	2800      	cmp	r0, #0
 800425a:	d047      	beq.n	80042ec <fast_sin+0x10c>
    {
        sine = SINE_ACCURACY_CONSTANT * (sine * -1 * sine - sine) + sine;
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	18e0      	adds	r0, r4, r3
 8004262:	1c21      	adds	r1, r4, #0
    }
    else
    {
        sine = SINE_ACCURACY_CONSTANT * (sine * sine - sine) + sine;
 8004264:	f7fc f906 	bl	8000474 <__aeabi_fmul>
 8004268:	1c21      	adds	r1, r4, #0
 800426a:	f7fc fa23 	bl	80006b4 <__aeabi_fsub>
 800426e:	f7fe f8dd 	bl	800242c <__aeabi_f2d>
 8004272:	4a28      	ldr	r2, [pc, #160]	; (8004314 <fast_sin+0x134>)
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <fast_sin+0x138>)
 8004276:	f7fd fb43 	bl	8001900 <__aeabi_dmul>
 800427a:	0006      	movs	r6, r0
 800427c:	1c20      	adds	r0, r4, #0
 800427e:	000f      	movs	r7, r1
 8004280:	f7fe f8d4 	bl	800242c <__aeabi_f2d>
 8004284:	0002      	movs	r2, r0
 8004286:	000b      	movs	r3, r1
 8004288:	0030      	movs	r0, r6
 800428a:	0039      	movs	r1, r7
 800428c:	f7fc fbf4 	bl	8000a78 <__aeabi_dadd>
 8004290:	f7fe f91e 	bl	80024d0 <__aeabi_d2f>
    }
    // Return the calculated value
    return sine;
}
 8004294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(x > PI)
 8004296:	4a17      	ldr	r2, [pc, #92]	; (80042f4 <fast_sin+0x114>)
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <fast_sin+0x13c>)
 800429a:	0030      	movs	r0, r6
 800429c:	0039      	movs	r1, r7
 800429e:	f7fb fff3 	bl	8000288 <__aeabi_dcmpgt>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d0b1      	beq.n	800420a <fast_sin+0x2a>
		x -= TWO_PI;
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <fast_sin+0x11c>)
 80042a8:	4b15      	ldr	r3, [pc, #84]	; (8004300 <fast_sin+0x120>)
 80042aa:	0030      	movs	r0, r6
 80042ac:	0039      	movs	r1, r7
 80042ae:	f7fd fda7 	bl	8001e00 <__aeabi_dsub>
 80042b2:	e7a7      	b.n	8004204 <fast_sin+0x24>
		sine = (FOUR_OVER_PI * x) - (FOUR_OVER_PI2 * x * x);
 80042b4:	1c20      	adds	r0, r4, #0
 80042b6:	f7fe f8b9 	bl	800242c <__aeabi_f2d>
 80042ba:	4a14      	ldr	r2, [pc, #80]	; (800430c <fast_sin+0x12c>)
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <fast_sin+0x130>)
 80042be:	0004      	movs	r4, r0
 80042c0:	000d      	movs	r5, r1
 80042c2:	f7fd fb1d 	bl	8001900 <__aeabi_dmul>
 80042c6:	4a0f      	ldr	r2, [pc, #60]	; (8004304 <fast_sin+0x124>)
 80042c8:	0006      	movs	r6, r0
 80042ca:	000f      	movs	r7, r1
 80042cc:	4b0e      	ldr	r3, [pc, #56]	; (8004308 <fast_sin+0x128>)
 80042ce:	0020      	movs	r0, r4
 80042d0:	0029      	movs	r1, r5
 80042d2:	f7fd fb15 	bl	8001900 <__aeabi_dmul>
 80042d6:	0022      	movs	r2, r4
 80042d8:	002b      	movs	r3, r5
 80042da:	f7fd fb11 	bl	8001900 <__aeabi_dmul>
 80042de:	0002      	movs	r2, r0
 80042e0:	000b      	movs	r3, r1
 80042e2:	0030      	movs	r0, r6
 80042e4:	0039      	movs	r1, r7
 80042e6:	f7fd fd8b 	bl	8001e00 <__aeabi_dsub>
 80042ea:	e7af      	b.n	800424c <fast_sin+0x6c>
        sine = SINE_ACCURACY_CONSTANT * (sine * sine - sine) + sine;
 80042ec:	1c21      	adds	r1, r4, #0
 80042ee:	1c20      	adds	r0, r4, #0
 80042f0:	e7b8      	b.n	8004264 <fast_sin+0x84>
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	53c8d4f1 	.word	0x53c8d4f1
 80042f8:	c00921fb 	.word	0xc00921fb
 80042fc:	5474a168 	.word	0x5474a168
 8004300:	401921fb 	.word	0x401921fb
 8004304:	62992759 	.word	0x62992759
 8004308:	3fd9f02f 	.word	0x3fd9f02f
 800430c:	6c8462a6 	.word	0x6c8462a6
 8004310:	3ff45f30 	.word	0x3ff45f30
 8004314:	cccccccd 	.word	0xcccccccd
 8004318:	3fcccccc 	.word	0x3fcccccc
 800431c:	400921fb 	.word	0x400921fb

08004320 <Create_SineTable>:
  * @brief Creates a lookup table for the sine wave
  * @param none
  * @retval none
  */
void Create_SineTable(void)
{
 8004320:	b570      	push	{r4, r5, r6, lr}
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004322:	254e      	movs	r5, #78	; 0x4e
{
 8004324:	2400      	movs	r4, #0
	{
		sine_lookup[i] = fast_sin((float)i * PI / (float) WAVEFORM_MAX_COUNT);
 8004326:	4e0c      	ldr	r6, [pc, #48]	; (8004358 <Create_SineTable+0x38>)
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004328:	35ff      	adds	r5, #255	; 0xff
		sine_lookup[i] = fast_sin((float)i * PI / (float) WAVEFORM_MAX_COUNT);
 800432a:	b2a0      	uxth	r0, r4
 800432c:	f7fc fb5e 	bl	80009ec <__aeabi_ui2f>
 8004330:	f7fe f87c 	bl	800242c <__aeabi_f2d>
 8004334:	4a09      	ldr	r2, [pc, #36]	; (800435c <Create_SineTable+0x3c>)
 8004336:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <Create_SineTable+0x40>)
 8004338:	f7fd fae2 	bl	8001900 <__aeabi_dmul>
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <Create_SineTable+0x44>)
 800433e:	2200      	movs	r2, #0
 8004340:	f7fc feaa 	bl	8001098 <__aeabi_ddiv>
 8004344:	f7fe f8c4 	bl	80024d0 <__aeabi_d2f>
 8004348:	f7ff ff4a 	bl	80041e0 <fast_sin>
 800434c:	00a3      	lsls	r3, r4, #2
 800434e:	3401      	adds	r4, #1
 8004350:	50f0      	str	r0, [r6, r3]
	for(uint16_t i = 0; i < WAVEFORM_MAX_COUNT; i++)
 8004352:	42ac      	cmp	r4, r5
 8004354:	d1e9      	bne.n	800432a <Create_SineTable+0xa>
	}
}
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	200000f8 	.word	0x200000f8
 800435c:	53c8d4f1 	.word	0x53c8d4f1
 8004360:	400921fb 	.word	0x400921fb
 8004364:	4074d000 	.word	0x4074d000

08004368 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004368:	b507      	push	{r0, r1, r2, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800436a:	2001      	movs	r0, #1
 800436c:	4a08      	ldr	r2, [pc, #32]	; (8004390 <MX_DMA_Init+0x28>)
 800436e:	6951      	ldr	r1, [r2, #20]
 8004370:	4301      	orrs	r1, r0
 8004372:	6151      	str	r1, [r2, #20]
 8004374:	6953      	ldr	r3, [r2, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004376:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004378:	4003      	ands	r3, r0
 800437a:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800437c:	0011      	movs	r1, r2
 800437e:	3008      	adds	r0, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004380:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004382:	f7fe fbe5 	bl	8002b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004386:	2009      	movs	r0, #9
 8004388:	f7fe fc12 	bl	8002bb0 <HAL_NVIC_EnableIRQ>

}
 800438c:	bd07      	pop	{r0, r1, r2, pc}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	40021000 	.word	0x40021000

08004394 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004398:	2214      	movs	r2, #20
 800439a:	2100      	movs	r1, #0
 800439c:	a803      	add	r0, sp, #12
 800439e:	f000 fbea 	bl	8004b76 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80043a2:	2080      	movs	r0, #128	; 0x80
 80043a4:	4b23      	ldr	r3, [pc, #140]	; (8004434 <MX_GPIO_Init+0xa0>)
 80043a6:	0280      	lsls	r0, r0, #10
 80043a8:	6959      	ldr	r1, [r3, #20]

	// Configure and enable external gpio interrupts channel in NVIC
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

	GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 80043aa:	2401      	movs	r4, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4301      	orrs	r1, r0
 80043ae:	6159      	str	r1, [r3, #20]
 80043b0:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b2:	2500      	movs	r5, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80043b4:	4002      	ands	r2, r0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043b6:	2080      	movs	r0, #128	; 0x80
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80043b8:	9200      	str	r2, [sp, #0]
 80043ba:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043bc:	6959      	ldr	r1, [r3, #20]
 80043be:	02c0      	lsls	r0, r0, #11
 80043c0:	4301      	orrs	r1, r0
 80043c2:	6159      	str	r1, [r3, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043c4:	2180      	movs	r1, #128	; 0x80
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043c6:	695a      	ldr	r2, [r3, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043c8:	0309      	lsls	r1, r1, #12
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80043ca:	4002      	ands	r2, r0
 80043cc:	9201      	str	r2, [sp, #4]
 80043ce:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043d0:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043d2:	2603      	movs	r6, #3
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043d4:	430a      	orrs	r2, r1
 80043d6:	615a      	str	r2, [r3, #20]
 80043d8:	695b      	ldr	r3, [r3, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043da:	4f17      	ldr	r7, [pc, #92]	; (8004438 <MX_GPIO_Init+0xa4>)
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80043dc:	400b      	ands	r3, r1
 80043de:	9302      	str	r3, [sp, #8]
 80043e0:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Pin = HALL_PHASE_U_Pin|HALL_PHASE_V_Pin|HALL_PHASE_W_Pin;
 80043e2:	23e0      	movs	r3, #224	; 0xe0
 80043e4:	01db      	lsls	r3, r3, #7
 80043e6:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043e8:	4b14      	ldr	r3, [pc, #80]	; (800443c <MX_GPIO_Init+0xa8>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ea:	a903      	add	r1, sp, #12
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80043ec:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043ee:	2302      	movs	r3, #2
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f0:	0038      	movs	r0, r7
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043f2:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043f4:	f7fe fca2 	bl	8002d3c <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 1, 0);
 80043f8:	2200      	movs	r2, #0
 80043fa:	2101      	movs	r1, #1
 80043fc:	2007      	movs	r0, #7
 80043fe:	f7fe fba7 	bl	8002b50 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004402:	2007      	movs	r0, #7
 8004404:	f7fe fbd4 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
	HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004408:	a903      	add	r1, sp, #12
 800440a:	0038      	movs	r0, r7
	GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 800440c:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440e:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004412:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004414:	9407      	str	r4, [sp, #28]
	HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004416:	f7fe fc91 	bl	8002d3c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
 800441a:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800441c:	a903      	add	r1, sp, #12
 800441e:	4808      	ldr	r0, [pc, #32]	; (8004440 <MX_GPIO_Init+0xac>)
	GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
 8004420:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004422:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004424:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004426:	9606      	str	r6, [sp, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 8004428:	9507      	str	r5, [sp, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800442a:	f7fe fc87 	bl	8002d3c <HAL_GPIO_Init>
}
 800442e:	b009      	add	sp, #36	; 0x24
 8004430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	40021000 	.word	0x40021000
 8004438:	48000400 	.word	0x48000400
 800443c:	10310000 	.word	0x10310000
 8004440:	48000800 	.word	0x48000800

08004444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004444:	b530      	push	{r4, r5, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004446:	2410      	movs	r4, #16
{
 8004448:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800444a:	2230      	movs	r2, #48	; 0x30
 800444c:	2100      	movs	r1, #0
 800444e:	a808      	add	r0, sp, #32
 8004450:	f000 fb91 	bl	8004b76 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004454:	0022      	movs	r2, r4
 8004456:	2100      	movs	r1, #0
 8004458:	4668      	mov	r0, sp
 800445a:	f000 fb8c 	bl	8004b76 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800445e:	0022      	movs	r2, r4
 8004460:	2100      	movs	r1, #0
 8004462:	a804      	add	r0, sp, #16
 8004464:	f000 fb87 	bl	8004b76 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004468:	2312      	movs	r3, #18
 800446a:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 800446c:	2380      	movs	r3, #128	; 0x80
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800446e:	2501      	movs	r5, #1
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004470:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004472:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8004474:	039b      	lsls	r3, r3, #14
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004476:	3c0e      	subs	r4, #14
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004478:	a808      	add	r0, sp, #32
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800447a:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800447c:	950d      	str	r5, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800447e:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL10;
 8004480:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004482:	f7fe fd11 	bl	8002ea8 <HAL_RCC_OscConfig>
 8004486:	2800      	cmp	r0, #0
 8004488:	d000      	beq.n	800448c <SystemClock_Config+0x48>
 800448a:	e7fe      	b.n	800448a <SystemClock_Config+0x46>
	{
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800448c:	2307      	movs	r3, #7
							  |RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800448e:	9002      	str	r0, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004490:	9003      	str	r0, [sp, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004492:	0029      	movs	r1, r5
 8004494:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004496:	9300      	str	r3, [sp, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004498:	9401      	str	r4, [sp, #4]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800449a:	f7fe ff19 	bl	80032d0 <HAL_RCC_ClockConfig>
 800449e:	2800      	cmp	r0, #0
 80044a0:	d000      	beq.n	80044a4 <SystemClock_Config+0x60>
 80044a2:	e7fe      	b.n	80044a2 <SystemClock_Config+0x5e>
	{
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80044a4:	2321      	movs	r3, #33	; 0x21
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80044a6:	9006      	str	r0, [sp, #24]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80044a8:	9007      	str	r0, [sp, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044aa:	a804      	add	r0, sp, #16
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80044ac:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80044ae:	f7fe ffab 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	d000      	beq.n	80044b8 <SystemClock_Config+0x74>
 80044b6:	e7fe      	b.n	80044b6 <SystemClock_Config+0x72>
	{
		Error_Handler();
	}
}
 80044b8:	b015      	add	sp, #84	; 0x54
 80044ba:	bd30      	pop	{r4, r5, pc}

080044bc <main>:
	waveform_frequency = WAVEFORM_FREQ_HZ;
 80044bc:	221e      	movs	r2, #30
 80044be:	4b18      	ldr	r3, [pc, #96]	; (8004520 <main+0x64>)
{
 80044c0:	b510      	push	{r4, lr}
	waveform_frequency = WAVEFORM_FREQ_HZ;
 80044c2:	801a      	strh	r2, [r3, #0]
	waveform_maxSwitches = WAVEFORM_MAX_COUNT / 6;
 80044c4:	4b17      	ldr	r3, [pc, #92]	; (8004524 <main+0x68>)
 80044c6:	3219      	adds	r2, #25
 80044c8:	601a      	str	r2, [r3, #0]
	waveformU_switchCount = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <main+0x6c>)
 80044ce:	6013      	str	r3, [r2, #0]
	waveformV_switchCount = 0;
 80044d0:	4a16      	ldr	r2, [pc, #88]	; (800452c <main+0x70>)
 80044d2:	6013      	str	r3, [r2, #0]
	waveformW_switchCount = 0;
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <main+0x74>)
 80044d6:	6013      	str	r3, [r2, #0]
	phaseU_State = phaseOff;
 80044d8:	4a16      	ldr	r2, [pc, #88]	; (8004534 <main+0x78>)
 80044da:	7013      	strb	r3, [r2, #0]
	phaseV_State = phaseOff;
 80044dc:	4a16      	ldr	r2, [pc, #88]	; (8004538 <main+0x7c>)
 80044de:	7013      	strb	r3, [r2, #0]
	phaseW_State = phaseOff;
 80044e0:	4a16      	ldr	r2, [pc, #88]	; (800453c <main+0x80>)
 80044e2:	7013      	strb	r3, [r2, #0]
	outputState = outputOff;
 80044e4:	4a16      	ldr	r2, [pc, #88]	; (8004540 <main+0x84>)
 80044e6:	7013      	strb	r3, [r2, #0]
	waveformAmplitude = 0;
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <main+0x88>)
 80044ea:	6013      	str	r3, [r2, #0]
	waveformPhase = waveform_Phase1;
 80044ec:	2201      	movs	r2, #1
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <main+0x8c>)
 80044f0:	701a      	strb	r2, [r3, #0]
	Create_SineTable();
 80044f2:	f7ff ff15 	bl	8004320 <Create_SineTable>
	HAL_Init();
 80044f6:	f7fe f8a5 	bl	8002644 <HAL_Init>
	SystemClock_Config();
 80044fa:	f7ff ffa3 	bl	8004444 <SystemClock_Config>
	MX_GPIO_Init();
 80044fe:	f7ff ff49 	bl	8004394 <MX_GPIO_Init>
	MX_DMA_Init();
 8004502:	f7ff ff31 	bl	8004368 <MX_DMA_Init>
	MX_ADC_Init();
 8004506:	f7ff fd19 	bl	8003f3c <MX_ADC_Init>
	MX_TIM1_Init();
 800450a:	f000 fa45 	bl	8004998 <MX_TIM1_Init>
	MX_TIM15_Init();
 800450e:	f000 f945 	bl	800479c <MX_TIM15_Init>
	if(HAL_ADC_Start_IT(&hadc) != HAL_OK)
 8004512:	480e      	ldr	r0, [pc, #56]	; (800454c <main+0x90>)
 8004514:	f7fe f9a6 	bl	8002864 <HAL_ADC_Start_IT>
 8004518:	2800      	cmp	r0, #0
 800451a:	d000      	beq.n	800451e <main+0x62>
 800451c:	e7fe      	b.n	800451c <main+0x60>
 800451e:	e7fe      	b.n	800451e <main+0x62>
 8004520:	20000028 	.word	0x20000028
 8004524:	2000002c 	.word	0x2000002c
 8004528:	20000038 	.word	0x20000038
 800452c:	2000005c 	.word	0x2000005c
 8004530:	200000a8 	.word	0x200000a8
 8004534:	20000058 	.word	0x20000058
 8004538:	20000030 	.word	0x20000030
 800453c:	20000060 	.word	0x20000060
 8004540:	20000034 	.word	0x20000034
 8004544:	20000024 	.word	0x20000024
 8004548:	2000062c 	.word	0x2000062c
 800454c:	200000ac 	.word	0x200000ac

08004550 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
	// Get the current ADC conversion
	throttleValue = (ADC1->DR / 2) + (throttleValue / 2);
 8004550:	4a08      	ldr	r2, [pc, #32]	; (8004574 <HAL_ADC_ConvCpltCallback+0x24>)
 8004552:	4b09      	ldr	r3, [pc, #36]	; (8004578 <HAL_ADC_ConvCpltCallback+0x28>)
 8004554:	8810      	ldrh	r0, [r2, #0]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	0840      	lsrs	r0, r0, #1
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	18c0      	adds	r0, r0, r3
	waveformAmplitude = MAX_PULSE_WIDTH * throttleValue / (THROTTLE_MAX_VALUE);
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <HAL_ADC_ConvCpltCallback+0x2c>)
	throttleValue = (ADC1->DR / 2) + (throttleValue / 2);
 8004560:	b280      	uxth	r0, r0
{
 8004562:	b510      	push	{r4, lr}
	waveformAmplitude = MAX_PULSE_WIDTH * throttleValue / (THROTTLE_MAX_VALUE);
 8004564:	4906      	ldr	r1, [pc, #24]	; (8004580 <HAL_ADC_ConvCpltCallback+0x30>)
	throttleValue = (ADC1->DR / 2) + (throttleValue / 2);
 8004566:	8010      	strh	r0, [r2, #0]
	waveformAmplitude = MAX_PULSE_WIDTH * throttleValue / (THROTTLE_MAX_VALUE);
 8004568:	4358      	muls	r0, r3
 800456a:	f7fb fdd7 	bl	800011c <__udivsi3>
 800456e:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_ADC_ConvCpltCallback+0x34>)
 8004570:	6018      	str	r0, [r3, #0]
}
 8004572:	bd10      	pop	{r4, pc}
 8004574:	20000032 	.word	0x20000032
 8004578:	40012400 	.word	0x40012400
 800457c:	00000c99 	.word	0x00000c99
 8004580:	00000fff 	.word	0x00000fff
 8004584:	20000024 	.word	0x20000024

08004588 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b510      	push	{r4, lr}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800458a:	7f03      	ldrb	r3, [r0, #28]
{
 800458c:	0004      	movs	r4, r0
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10c      	bne.n	80045ac <HAL_TIM_PWM_PulseFinishedCallback+0x24>
	{
		if(phaseU_State == phaseHigh)
 8004592:	4b2f      	ldr	r3, [pc, #188]	; (8004650 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	2a01      	cmp	r2, #1
 8004598:	d108      	bne.n	80045ac <HAL_TIM_PWM_PulseFinishedCallback+0x24>
		{
	    	TIM1->CCR1 = (uint16_t) waveformAmplitude;
 800459a:	4b2e      	ldr	r3, [pc, #184]	; (8004654 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 800459c:	492e      	ldr	r1, [pc, #184]	; (8004658 <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 800459e:	681b      	ldr	r3, [r3, #0]
	    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, SET);
 80045a0:	482e      	ldr	r0, [pc, #184]	; (800465c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80045a2:	b29b      	uxth	r3, r3
	    	TIM1->CCR1 = (uint16_t) waveformAmplitude;
 80045a4:	634b      	str	r3, [r1, #52]	; 0x34
	    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, SET);
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	f7fe fc78 	bl	8002e9c <HAL_GPIO_WritePin>
		}

	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 80045ac:	7f23      	ldrb	r3, [r4, #28]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d10c      	bne.n	80045cc <HAL_TIM_PWM_PulseFinishedCallback+0x44>
	{
		if(phaseV_State == phaseHigh)
 80045b2:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	2a01      	cmp	r2, #1
 80045b8:	d108      	bne.n	80045cc <HAL_TIM_PWM_PulseFinishedCallback+0x44>
		{
	    	TIM1->CCR2 = (uint16_t) waveformAmplitude;
 80045ba:	4b26      	ldr	r3, [pc, #152]	; (8004654 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 80045bc:	4926      	ldr	r1, [pc, #152]	; (8004658 <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 80045be:	681b      	ldr	r3, [r3, #0]
	    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, SET);
 80045c0:	4826      	ldr	r0, [pc, #152]	; (800465c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 80045c2:	b29b      	uxth	r3, r3
	    	TIM1->CCR2 = (uint16_t) waveformAmplitude;
 80045c4:	638b      	str	r3, [r1, #56]	; 0x38
	    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, SET);
 80045c6:	2180      	movs	r1, #128	; 0x80
 80045c8:	f7fe fc68 	bl	8002e9c <HAL_GPIO_WritePin>
		}

	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80045cc:	7f23      	ldrb	r3, [r4, #28]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d10c      	bne.n	80045ec <HAL_TIM_PWM_PulseFinishedCallback+0x64>
	{
		if(phaseW_State == phaseHigh)
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 80045d4:	7819      	ldrb	r1, [r3, #0]
 80045d6:	2901      	cmp	r1, #1
 80045d8:	d108      	bne.n	80045ec <HAL_TIM_PWM_PulseFinishedCallback+0x64>
		{
	    	TIM1->CCR3 = (uint16_t) waveformAmplitude;
 80045da:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <HAL_TIM_PWM_PulseFinishedCallback+0xcc>)
 80045dc:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <HAL_TIM_PWM_PulseFinishedCallback+0xd0>)
 80045de:	681b      	ldr	r3, [r3, #0]
	    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, SET);
 80045e0:	4821      	ldr	r0, [pc, #132]	; (8004668 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 80045e2:	b29b      	uxth	r3, r3
	    	TIM1->CCR3 = (uint16_t) waveformAmplitude;
 80045e4:	63d3      	str	r3, [r2, #60]	; 0x3c
	    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, SET);
 80045e6:	000a      	movs	r2, r1
 80045e8:	f7fe fc58 	bl	8002e9c <HAL_GPIO_WritePin>
		}

	}
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80045ec:	7f23      	ldrb	r3, [r4, #28]
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d12b      	bne.n	800464a <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
	{
		if(phaseU_State == phaseHigh)
 80045f2:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d104      	bne.n	8004604 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>
		{
	    	HAL_GPIO_WritePin(PWM_PHASE_U_LOW_GPIO_Port, PWM_PHASE_U_LOW_Pin, RESET);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2140      	movs	r1, #64	; 0x40
 80045fe:	4817      	ldr	r0, [pc, #92]	; (800465c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8004600:	f7fe fc4c 	bl	8002e9c <HAL_GPIO_WritePin>
		}
		if(phaseV_State == phaseHigh)
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_TIM_PWM_PulseFinishedCallback+0xd8>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d104      	bne.n	8004616 <HAL_TIM_PWM_PulseFinishedCallback+0x8e>
		{
	    	HAL_GPIO_WritePin(PWM_PHASE_V_LOW_GPIO_Port, PWM_PHASE_V_LOW_Pin, RESET);
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	4812      	ldr	r0, [pc, #72]	; (800465c <HAL_TIM_PWM_PulseFinishedCallback+0xd4>)
 8004612:	f7fe fc43 	bl	8002e9c <HAL_GPIO_WritePin>
		}
		if(phaseW_State == phaseHigh)
 8004616:	4b13      	ldr	r3, [pc, #76]	; (8004664 <HAL_TIM_PWM_PulseFinishedCallback+0xdc>)
 8004618:	7819      	ldrb	r1, [r3, #0]
 800461a:	2901      	cmp	r1, #1
 800461c:	d103      	bne.n	8004626 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
		{
	    	HAL_GPIO_WritePin(PWM_PHASE_W_LOW_GPIO_Port, PWM_PHASE_W_LOW_Pin, RESET);
 800461e:	2200      	movs	r2, #0
 8004620:	4811      	ldr	r0, [pc, #68]	; (8004668 <HAL_TIM_PWM_PulseFinishedCallback+0xe0>)
 8004622:	f7fe fc3b 	bl	8002e9c <HAL_GPIO_WritePin>
		}

		// Increase switch count
		waveformU_switchCount++;
 8004626:	4a11      	ldr	r2, [pc, #68]	; (800466c <HAL_TIM_PWM_PulseFinishedCallback+0xe4>)
		// Check to see if phase should be switched
		if(waveformU_switchCount >= waveform_maxSwitches)
 8004628:	4911      	ldr	r1, [pc, #68]	; (8004670 <HAL_TIM_PWM_PulseFinishedCallback+0xe8>)
		waveformU_switchCount++;
 800462a:	6813      	ldr	r3, [r2, #0]
		if(waveformU_switchCount >= waveform_maxSwitches)
 800462c:	6809      	ldr	r1, [r1, #0]
		waveformU_switchCount++;
 800462e:	3301      	adds	r3, #1
 8004630:	6013      	str	r3, [r2, #0]
		if(waveformU_switchCount >= waveform_maxSwitches)
 8004632:	428b      	cmp	r3, r1
 8004634:	d309      	bcc.n	800464a <HAL_TIM_PWM_PulseFinishedCallback+0xc2>
		{
			waveformU_switchCount = 0;
 8004636:	2300      	movs	r3, #0
 8004638:	6013      	str	r3, [r2, #0]
			if(waveformPhase != waveform_Phase6){
 800463a:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <HAL_TIM_PWM_PulseFinishedCallback+0xec>)
 800463c:	7813      	ldrb	r3, [r2, #0]
 800463e:	2b06      	cmp	r3, #6
 8004640:	d004      	beq.n	800464c <HAL_TIM_PWM_PulseFinishedCallback+0xc4>
				waveformPhase++;
 8004642:	3301      	adds	r3, #1
			}
			else
			{
				waveformPhase = waveform_Phase1;
 8004644:	7013      	strb	r3, [r2, #0]
			}
			UpdateWaveforms();
 8004646:	f7ff fd17 	bl	8004078 <UpdateWaveforms>

		}

	}
}
 800464a:	bd10      	pop	{r4, pc}
				waveformPhase = waveform_Phase1;
 800464c:	2301      	movs	r3, #1
 800464e:	e7f9      	b.n	8004644 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
 8004650:	20000058 	.word	0x20000058
 8004654:	20000024 	.word	0x20000024
 8004658:	40012c00 	.word	0x40012c00
 800465c:	48000800 	.word	0x48000800
 8004660:	20000030 	.word	0x20000030
 8004664:	20000060 	.word	0x20000060
 8004668:	48000400 	.word	0x48000400
 800466c:	20000038 	.word	0x20000038
 8004670:	2000002c 	.word	0x2000002c
 8004674:	2000062c 	.word	0x2000062c

08004678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004678:	e7fe      	b.n	8004678 <Error_Handler>
	...

0800467c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800467c:	2001      	movs	r0, #1
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_MspInit+0x2c>)
{
 8004680:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004682:	6999      	ldr	r1, [r3, #24]
 8004684:	4301      	orrs	r1, r0
 8004686:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468a:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800468c:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468e:	4002      	ands	r2, r0
 8004690:	9200      	str	r2, [sp, #0]
 8004692:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	430a      	orrs	r2, r1
 8004698:	61da      	str	r2, [r3, #28]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	400b      	ands	r3, r1
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046a2:	b002      	add	sp, #8
 80046a4:	4770      	bx	lr
 80046a6:	46c0      	nop			; (mov r8, r8)
 80046a8:	40021000 	.word	0x40021000

080046ac <NMI_Handler>:
 80046ac:	4770      	bx	lr

080046ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046ae:	e7fe      	b.n	80046ae <HardFault_Handler>

080046b0 <SVC_Handler>:
 80046b0:	4770      	bx	lr

080046b2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80046b2:	4770      	bx	lr

080046b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046b4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046b6:	f7fd ffd5 	bl	8002664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046ba:	bd10      	pop	{r4, pc}

080046bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80046be:	4802      	ldr	r0, [pc, #8]	; (80046c8 <DMA1_Channel1_IRQHandler+0xc>)
 80046c0:	f7fe faf3 	bl	8002caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	20000064 	.word	0x20000064

080046cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80046cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80046ce:	4802      	ldr	r0, [pc, #8]	; (80046d8 <USART1_IRQHandler+0xc>)
 80046d0:	f7ff fb54 	bl	8003d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	200006f0 	.word	0x200006f0

080046dc <TIM1_BRK_UP_TRG_COM_IRQHandler>:
{
	HAL_TIM_IRQHandler(&htim1);
}

void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80046dc:	b510      	push	{r4, lr}
	HAL_TIM_IRQHandler(&htim1);
 80046de:	4802      	ldr	r0, [pc, #8]	; (80046e8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0xc>)
 80046e0:	f7fe ffdc 	bl	800369c <HAL_TIM_IRQHandler>
}
 80046e4:	bd10      	pop	{r4, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	200006b0 	.word	0x200006b0

080046ec <TIM1_CC_IRQHandler>:
 80046ec:	b510      	push	{r4, lr}
 80046ee:	f7ff fff5 	bl	80046dc <TIM1_BRK_UP_TRG_COM_IRQHandler>
 80046f2:	bd10      	pop	{r4, pc}

080046f4 <TIM3_IRQHandler>:
// Interrupt handler
void TIM3_IRQHandler(void)
{

	// Check for CC1 interrupt
	if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_CC1) != RESET)
 80046f4:	2102      	movs	r1, #2
 80046f6:	4a06      	ldr	r2, [pc, #24]	; (8004710 <TIM3_IRQHandler+0x1c>)
 80046f8:	6813      	ldr	r3, [r2, #0]
 80046fa:	6918      	ldr	r0, [r3, #16]
 80046fc:	4208      	tst	r0, r1
 80046fe:	d006      	beq.n	800470e <TIM3_IRQHandler+0x1a>
	{
		if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_CC1) !=RESET)
 8004700:	68d8      	ldr	r0, [r3, #12]
 8004702:	4208      	tst	r0, r1
 8004704:	d003      	beq.n	800470e <TIM3_IRQHandler+0x1a>
		{
			// Clear the interrupt
		    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_CC1);
 8004706:	3905      	subs	r1, #5
 8004708:	6119      	str	r1, [r3, #16]
		    htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_1;

//		    UpdateWaveform(phase_U);

			htim3.Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800470a:	2300      	movs	r3, #0
 800470c:	7713      	strb	r3, [r2, #28]
		}
	}

}
 800470e:	4770      	bx	lr
 8004710:	20000670 	.word	0x20000670

08004714 <ADC1_IRQHandler>:

void ADC1_IRQHandler(void)
{
 8004714:	b510      	push	{r4, lr}

	HAL_ADC_IRQHandler(&hadc);
 8004716:	4802      	ldr	r0, [pc, #8]	; (8004720 <ADC1_IRQHandler+0xc>)
 8004718:	f7fe f8e0 	bl	80028dc <HAL_ADC_IRQHandler>
}
 800471c:	bd10      	pop	{r4, pc}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	200000ac 	.word	0x200000ac

08004724 <EXTI4_15_IRQHandler>:

// External Interrupts Handler (Hall Effects)
void EXTI4_15_IRQHandler(void)
{
 8004724:	b510      	push	{r4, lr}
	uint32_t pr = EXTI->PR;
 8004726:	4b04      	ldr	r3, [pc, #16]	; (8004738 <EXTI4_15_IRQHandler+0x14>)
 8004728:	695a      	ldr	r2, [r3, #20]
	EXTI->PR = pr;
 800472a:	615a      	str	r2, [r3, #20]
//	}
//	if(__HAL_GPIO_EXTI_GET_IT(HALL_PHASE_V_Pin) != RESET)
//	{
//		__HAL_GPIO_EXTI_CLEAR_IT(HALL_PHASE_V_Pin);
//	}
	FindWaveformPhase();
 800472c:	f7ff fc4c 	bl	8003fc8 <FindWaveformPhase>
	// Update the waveforms after determining the phase
	UpdateWaveforms();
 8004730:	f7ff fca2 	bl	8004078 <UpdateWaveforms>
//	HAL_GPIO_EXTI_IRQHandler(HALL_PHASE_U_Pin);
//	HAL_GPIO_EXTI_IRQHandler(HALL_PHASE_V_Pin);
//	HAL_GPIO_EXTI_IRQHandler(HALL_PHASE_W_Pin);

}
 8004734:	bd10      	pop	{r4, pc}
 8004736:	46c0      	nop			; (mov r8, r8)
 8004738:	40010400 	.word	0x40010400

0800473c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800473c:	2101      	movs	r1, #1
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004740:	4811      	ldr	r0, [pc, #68]	; (8004788 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	4002      	ands	r2, r0
 800474c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	480e      	ldr	r0, [pc, #56]	; (800478c <SystemInit+0x50>)
 8004752:	4002      	ands	r2, r0
 8004754:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	480d      	ldr	r0, [pc, #52]	; (8004790 <SystemInit+0x54>)
 800475a:	4002      	ands	r2, r0
 800475c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	480c      	ldr	r0, [pc, #48]	; (8004794 <SystemInit+0x58>)
 8004762:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004764:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004766:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476a:	4382      	bics	r2, r0
 800476c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800476e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004770:	4809      	ldr	r0, [pc, #36]	; (8004798 <SystemInit+0x5c>)
 8004772:	4002      	ands	r2, r0
 8004774:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004778:	438a      	bics	r2, r1
 800477a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]

}
 8004780:	4770      	bx	lr
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	40021000 	.word	0x40021000
 8004788:	08ffb80c 	.word	0x08ffb80c
 800478c:	fef6ffff 	.word	0xfef6ffff
 8004790:	fffbffff 	.word	0xfffbffff
 8004794:	ffc0ffff 	.word	0xffc0ffff
 8004798:	fffffeec 	.word	0xfffffeec

0800479c <MX_TIM15_Init>:
//	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(TIM3_IRQn);
}
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800479c:	b530      	push	{r4, r5, lr}
 800479e:	b093      	sub	sp, #76	; 0x4c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047a0:	2208      	movs	r2, #8
 80047a2:	2100      	movs	r1, #0
 80047a4:	a802      	add	r0, sp, #8
 80047a6:	f000 f9e6 	bl	8004b76 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80047aa:	221c      	movs	r2, #28
 80047ac:	2100      	movs	r1, #0
 80047ae:	a804      	add	r0, sp, #16
 80047b0:	f000 f9e1 	bl	8004b76 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80047b4:	221c      	movs	r2, #28
 80047b6:	2100      	movs	r1, #0
 80047b8:	a80b      	add	r0, sp, #44	; 0x2c
 80047ba:	f000 f9dc 	bl	8004b76 <memset>

	htim15.Instance = TIM15;
 80047be:	4d2b      	ldr	r5, [pc, #172]	; (800486c <MX_TIM15_Init+0xd0>)
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <MX_TIM15_Init+0xd4>)
	htim15.Init.Prescaler = 0;
 80047c2:	2400      	movs	r4, #0
	htim15.Instance = TIM15;
 80047c4:	602b      	str	r3, [r5, #0]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
	htim15.Init.Period = 1000;
 80047c6:	23fa      	movs	r3, #250	; 0xfa
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	htim15.Init.RepetitionCounter = 0;
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80047c8:	0028      	movs	r0, r5
	htim15.Init.Period = 1000;
 80047ca:	009b      	lsls	r3, r3, #2
	htim15.Init.Prescaler = 0;
 80047cc:	606c      	str	r4, [r5, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ce:	60ac      	str	r4, [r5, #8]
	htim15.Init.Period = 1000;
 80047d0:	60eb      	str	r3, [r5, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047d2:	612c      	str	r4, [r5, #16]
	htim15.Init.RepetitionCounter = 0;
 80047d4:	616c      	str	r4, [r5, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d6:	61ac      	str	r4, [r5, #24]
	if (HAL_TIM_OC_Init(&htim15) != HAL_OK)
 80047d8:	f7ff f84c 	bl	8003874 <HAL_TIM_OC_Init>
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d001      	beq.n	80047e4 <MX_TIM15_Init+0x48>
	{
		Error_Handler();
 80047e0:	f7ff ff4a 	bl	8004678 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80047e4:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80047e6:	a902      	add	r1, sp, #8
 80047e8:	0028      	movs	r0, r5
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ea:	9402      	str	r4, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80047ec:	9303      	str	r3, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80047ee:	f7ff f9c9 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM15_Init+0x5e>
	{
		Error_Handler();
 80047f6:	f7ff ff3f 	bl	8004678 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80047fa:	2400      	movs	r4, #0
	sConfigOC.Pulse = 500;
 80047fc:	23fa      	movs	r3, #250	; 0xfa
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047fe:	0022      	movs	r2, r4
	sConfigOC.Pulse = 500;
 8004800:	005b      	lsls	r3, r3, #1
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004802:	a904      	add	r1, sp, #16
 8004804:	0028      	movs	r0, r5
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004806:	9404      	str	r4, [sp, #16]
	sConfigOC.Pulse = 500;
 8004808:	9305      	str	r3, [sp, #20]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800480a:	9406      	str	r4, [sp, #24]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800480c:	9407      	str	r4, [sp, #28]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800480e:	9408      	str	r4, [sp, #32]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004810:	9409      	str	r4, [sp, #36]	; 0x24
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004812:	940a      	str	r4, [sp, #40]	; 0x28
	if (HAL_TIM_OC_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004814:	f7ff f8a4 	bl	8003960 <HAL_TIM_OC_ConfigChannel>
 8004818:	42a0      	cmp	r0, r4
 800481a:	d001      	beq.n	8004820 <MX_TIM15_Init+0x84>
	{
		Error_Handler();
 800481c:	f7ff ff2c 	bl	8004678 <Error_Handler>
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
	sBreakDeadTimeConfig.DeadTime = 0;
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004820:	2380      	movs	r3, #128	; 0x80
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004822:	a90b      	add	r1, sp, #44	; 0x2c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004824:	019b      	lsls	r3, r3, #6
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004826:	0028      	movs	r0, r5
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004828:	940b      	str	r4, [sp, #44]	; 0x2c
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800482a:	940c      	str	r4, [sp, #48]	; 0x30
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800482c:	940d      	str	r4, [sp, #52]	; 0x34
	sBreakDeadTimeConfig.DeadTime = 0;
 800482e:	940e      	str	r4, [sp, #56]	; 0x38
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004830:	940f      	str	r4, [sp, #60]	; 0x3c
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004832:	9310      	str	r3, [sp, #64]	; 0x40
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004834:	9411      	str	r4, [sp, #68]	; 0x44
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004836:	f7ff f9c7 	bl	8003bc8 <HAL_TIMEx_ConfigBreakDeadTime>
 800483a:	2800      	cmp	r0, #0
 800483c:	d001      	beq.n	8004842 <MX_TIM15_Init+0xa6>
	{
		Error_Handler();
 800483e:	f7ff ff1b 	bl	8004678 <Error_Handler>
	}

	// Enable clock tree
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004842:	2080      	movs	r0, #128	; 0x80
 8004844:	4a0b      	ldr	r2, [pc, #44]	; (8004874 <MX_TIM15_Init+0xd8>)
 8004846:	0240      	lsls	r0, r0, #9
 8004848:	6991      	ldr	r1, [r2, #24]
 800484a:	4301      	orrs	r1, r0
 800484c:	6191      	str	r1, [r2, #24]
 800484e:	6993      	ldr	r3, [r2, #24]

	// Start Waveform
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004850:	2100      	movs	r1, #0
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004852:	4003      	ands	r3, r0
 8004854:	9301      	str	r3, [sp, #4]
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 8004856:	0028      	movs	r0, r5
	__HAL_RCC_TIM15_CLK_ENABLE();
 8004858:	9b01      	ldr	r3, [sp, #4]
	if(HAL_TIM_OC_Start(&htim15, TIM_CHANNEL_1) != HAL_OK)
 800485a:	f7ff f94b 	bl	8003af4 <HAL_TIM_OC_Start>
 800485e:	2800      	cmp	r0, #0
 8004860:	d001      	beq.n	8004866 <MX_TIM15_Init+0xca>
	{
		Error_Handler();
 8004862:	f7ff ff09 	bl	8004678 <Error_Handler>
	}
}
 8004866:	b013      	add	sp, #76	; 0x4c
 8004868:	bd30      	pop	{r4, r5, pc}
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	20000630 	.word	0x20000630
 8004870:	40014000 	.word	0x40014000
 8004874:	40021000 	.word	0x40021000

08004878 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM1)
 8004878:	6803      	ldr	r3, [r0, #0]
 800487a:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <HAL_TIM_PWM_MspInit+0x3c>)
{
 800487c:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM1)
 800487e:	4293      	cmp	r3, r2
 8004880:	d10b      	bne.n	800489a <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004882:	2080      	movs	r0, #128	; 0x80
 8004884:	4a0c      	ldr	r2, [pc, #48]	; (80048b8 <HAL_TIM_PWM_MspInit+0x40>)
 8004886:	0100      	lsls	r0, r0, #4
 8004888:	6991      	ldr	r1, [r2, #24]
 800488a:	4301      	orrs	r1, r0
 800488c:	6191      	str	r1, [r2, #24]
 800488e:	6993      	ldr	r3, [r2, #24]
 8004890:	4003      	ands	r3, r0
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004896:	b002      	add	sp, #8
 8004898:	4770      	bx	lr
  else if(tim_pwmHandle->Instance==TIM3)
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <HAL_TIM_PWM_MspInit+0x44>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d1fa      	bne.n	8004896 <HAL_TIM_PWM_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80048a0:	2002      	movs	r0, #2
 80048a2:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <HAL_TIM_PWM_MspInit+0x40>)
 80048a4:	69d1      	ldr	r1, [r2, #28]
 80048a6:	4301      	orrs	r1, r0
 80048a8:	61d1      	str	r1, [r2, #28]
 80048aa:	69d3      	ldr	r3, [r2, #28]
 80048ac:	4003      	ands	r3, r0
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	9b01      	ldr	r3, [sp, #4]
}
 80048b2:	e7f0      	b.n	8004896 <HAL_TIM_PWM_MspInit+0x1e>
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40021000 	.word	0x40021000
 80048bc:	40000400 	.word	0x40000400

080048c0 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{

  if(tim_ocHandle->Instance==TIM15)
 80048c0:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <HAL_TIM_OC_MspInit+0x24>)
 80048c2:	6802      	ldr	r2, [r0, #0]
{
 80048c4:	b082      	sub	sp, #8
  if(tim_ocHandle->Instance==TIM15)
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d109      	bne.n	80048de <HAL_TIM_OC_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80048ca:	2080      	movs	r0, #128	; 0x80
 80048cc:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <HAL_TIM_OC_MspInit+0x28>)
 80048ce:	0240      	lsls	r0, r0, #9
 80048d0:	6991      	ldr	r1, [r2, #24]
 80048d2:	4301      	orrs	r1, r0
 80048d4:	6191      	str	r1, [r2, #24]
 80048d6:	6993      	ldr	r3, [r2, #24]
 80048d8:	4003      	ands	r3, r0
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80048de:	b002      	add	sp, #8
 80048e0:	4770      	bx	lr
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40021000 	.word	0x40021000

080048ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80048ec:	b510      	push	{r4, lr}
 80048ee:	0004      	movs	r4, r0
 80048f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f2:	2214      	movs	r2, #20
 80048f4:	2100      	movs	r1, #0
 80048f6:	a803      	add	r0, sp, #12
 80048f8:	f000 f93d 	bl	8004b76 <memset>
  if(timHandle->Instance==TIM1)
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <HAL_TIM_MspPostInit+0x98>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d116      	bne.n	8004932 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004904:	2080      	movs	r0, #128	; 0x80
 8004906:	4a20      	ldr	r2, [pc, #128]	; (8004988 <HAL_TIM_MspPostInit+0x9c>)
 8004908:	0280      	lsls	r0, r0, #10
 800490a:	6951      	ldr	r1, [r2, #20]
 800490c:	4301      	orrs	r1, r0
 800490e:	6151      	str	r1, [r2, #20]
 8004910:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004912:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004914:	4003      	ands	r3, r0
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = PWM_PHASE_U_HIGH_Pin|PWM_PHASE_V_HIGH_Pin|PWM_PHASE_W_HIGH_Pin;
 800491a:	23e0      	movs	r3, #224	; 0xe0
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004920:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004922:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004924:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004928:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800492a:	f7fe fa07 	bl	8002d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800492e:	b008      	add	sp, #32
 8004930:	bd10      	pop	{r4, pc}
  else if(timHandle->Instance==TIM3)
 8004932:	4a16      	ldr	r2, [pc, #88]	; (800498c <HAL_TIM_MspPostInit+0xa0>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d1fa      	bne.n	800492e <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004938:	2080      	movs	r0, #128	; 0x80
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_TIM_MspPostInit+0x9c>)
 800493c:	02c0      	lsls	r0, r0, #11
 800493e:	6959      	ldr	r1, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004942:	4301      	orrs	r1, r0
 8004944:	6159      	str	r1, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004946:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004948:	695a      	ldr	r2, [r3, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800494a:	0309      	lsls	r1, r1, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800494c:	4002      	ands	r2, r0
 800494e:	9201      	str	r2, [sp, #4]
 8004950:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004952:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004954:	480e      	ldr	r0, [pc, #56]	; (8004990 <HAL_TIM_MspPostInit+0xa4>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004956:	430a      	orrs	r2, r1
 8004958:	615a      	str	r2, [r3, #20]
 800495a:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800495c:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800495e:	400b      	ands	r3, r1
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8004964:	2301      	movs	r3, #1
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 8004966:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = PWM_PHASE_W_LOW_Pin;
 8004968:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800496a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(PWM_PHASE_W_LOW_GPIO_Port, &GPIO_InitStruct);
 800496c:	f7fe f9e6 	bl	8002d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_PHASE_U_LOW_Pin|PWM_PHASE_V_LOW_Pin;
 8004970:	23c0      	movs	r3, #192	; 0xc0
 8004972:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004974:	2300      	movs	r3, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004976:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004978:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800497a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_TIM3;
 800497c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800497e:	a903      	add	r1, sp, #12
 8004980:	4804      	ldr	r0, [pc, #16]	; (8004994 <HAL_TIM_MspPostInit+0xa8>)
 8004982:	e7d2      	b.n	800492a <HAL_TIM_MspPostInit+0x3e>
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40021000 	.word	0x40021000
 800498c:	40000400 	.word	0x40000400
 8004990:	48000400 	.word	0x48000400
 8004994:	48000800 	.word	0x48000800

08004998 <MX_TIM1_Init>:
{
 8004998:	b530      	push	{r4, r5, lr}
 800499a:	b08b      	sub	sp, #44	; 0x2c
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800499c:	2208      	movs	r2, #8
 800499e:	2100      	movs	r1, #0
 80049a0:	a801      	add	r0, sp, #4
 80049a2:	f000 f8e8 	bl	8004b76 <memset>
	TIM_OC_InitTypeDef sConfigOC = {0};
 80049a6:	221c      	movs	r2, #28
 80049a8:	2100      	movs	r1, #0
 80049aa:	a803      	add	r0, sp, #12
 80049ac:	f000 f8e3 	bl	8004b76 <memset>
	htim1.Instance = TIM1;
 80049b0:	4c41      	ldr	r4, [pc, #260]	; (8004ab8 <MX_TIM1_Init+0x120>)
 80049b2:	4b42      	ldr	r3, [pc, #264]	; (8004abc <MX_TIM1_Init+0x124>)
	htim1.Init.Prescaler = 0;
 80049b4:	2500      	movs	r5, #0
	htim1.Instance = TIM1;
 80049b6:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = TIM_PERIOD;
 80049b8:	23fa      	movs	r3, #250	; 0xfa
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049ba:	0020      	movs	r0, r4
	htim1.Init.Period = TIM_PERIOD;
 80049bc:	011b      	lsls	r3, r3, #4
	htim1.Init.Prescaler = 0;
 80049be:	6065      	str	r5, [r4, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049c0:	60a5      	str	r5, [r4, #8]
	htim1.Init.Period = TIM_PERIOD;
 80049c2:	60e3      	str	r3, [r4, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049c4:	6125      	str	r5, [r4, #16]
	htim1.Init.RepetitionCounter = 0;
 80049c6:	6165      	str	r5, [r4, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049c8:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049ca:	f7fe ff6e 	bl	80038aa <HAL_TIM_PWM_Init>
 80049ce:	42a8      	cmp	r0, r5
 80049d0:	d001      	beq.n	80049d6 <MX_TIM1_Init+0x3e>
		Error_Handler();
 80049d2:	f7ff fe51 	bl	8004678 <Error_Handler>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80049d6:	2380      	movs	r3, #128	; 0x80
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049d8:	a901      	add	r1, sp, #4
 80049da:	0020      	movs	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049dc:	9501      	str	r5, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80049de:	9302      	str	r3, [sp, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049e0:	f7ff f8d0 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d001      	beq.n	80049ec <MX_TIM1_Init+0x54>
		Error_Handler();
 80049e8:	f7ff fe46 	bl	8004678 <Error_Handler>
	sConfigOC.Pulse = 0;
 80049ec:	2200      	movs	r2, #0
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049ee:	2360      	movs	r3, #96	; 0x60
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049f0:	a903      	add	r1, sp, #12
 80049f2:	0020      	movs	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049f4:	9303      	str	r3, [sp, #12]
	sConfigOC.Pulse = 0;
 80049f6:	9204      	str	r2, [sp, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049f8:	9205      	str	r2, [sp, #20]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049fa:	9206      	str	r2, [sp, #24]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049fc:	9207      	str	r2, [sp, #28]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049fe:	9208      	str	r2, [sp, #32]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a00:	9209      	str	r2, [sp, #36]	; 0x24
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a02:	f7fe ffdb 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d001      	beq.n	8004a0e <MX_TIM1_Init+0x76>
		Error_Handler();
 8004a0a:	f7ff fe35 	bl	8004678 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a0e:	2204      	movs	r2, #4
 8004a10:	a903      	add	r1, sp, #12
 8004a12:	0020      	movs	r0, r4
 8004a14:	f7fe ffd2 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM1_Init+0x88>
		Error_Handler();
 8004a1c:	f7ff fe2c 	bl	8004678 <Error_Handler>
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a20:	2208      	movs	r2, #8
 8004a22:	a903      	add	r1, sp, #12
 8004a24:	0020      	movs	r0, r4
 8004a26:	f7fe ffc9 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d001      	beq.n	8004a32 <MX_TIM1_Init+0x9a>
		Error_Handler();
 8004a2e:	f7ff fe23 	bl	8004678 <Error_Handler>
	sConfigOC.Pulse = TIM_PERIOD - PWM_DEADTIME;
 8004a32:	4b23      	ldr	r3, [pc, #140]	; (8004ac0 <MX_TIM1_Init+0x128>)
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a34:	220c      	movs	r2, #12
 8004a36:	a903      	add	r1, sp, #12
 8004a38:	0020      	movs	r0, r4
	sConfigOC.Pulse = TIM_PERIOD - PWM_DEADTIME;
 8004a3a:	9304      	str	r3, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004a3c:	f7fe ffbe 	bl	80039bc <HAL_TIM_PWM_ConfigChannel>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d001      	beq.n	8004a48 <MX_TIM1_Init+0xb0>
		Error_Handler();
 8004a44:	f7ff fe18 	bl	8004678 <Error_Handler>
	HAL_TIM_MspPostInit(&htim1);
 8004a48:	0020      	movs	r0, r4
 8004a4a:	f7ff ff4f 	bl	80048ec <HAL_TIM_MspPostInit>
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004a4e:	2080      	movs	r0, #128	; 0x80
 8004a50:	4a1c      	ldr	r2, [pc, #112]	; (8004ac4 <MX_TIM1_Init+0x12c>)
 8004a52:	0100      	lsls	r0, r0, #4
 8004a54:	6991      	ldr	r1, [r2, #24]
 8004a56:	4301      	orrs	r1, r0
 8004a58:	6191      	str	r1, [r2, #24]
 8004a5a:	6993      	ldr	r3, [r2, #24]
	if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004a5c:	2100      	movs	r1, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004a5e:	4003      	ands	r3, r0
 8004a60:	9300      	str	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004a62:	0020      	movs	r0, r4
	__HAL_RCC_TIM1_CLK_ENABLE();
 8004a64:	9b00      	ldr	r3, [sp, #0]
	if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8004a66:	f7ff f849 	bl	8003afc <HAL_TIM_PWM_Start_IT>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	d001      	beq.n	8004a72 <MX_TIM1_Init+0xda>
		Error_Handler();
 8004a6e:	f7ff fe03 	bl	8004678 <Error_Handler>
	if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8004a72:	2104      	movs	r1, #4
 8004a74:	0020      	movs	r0, r4
 8004a76:	f7ff f841 	bl	8003afc <HAL_TIM_PWM_Start_IT>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM1_Init+0xea>
		Error_Handler();
 8004a7e:	f7ff fdfb 	bl	8004678 <Error_Handler>
	if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_3) != HAL_OK)
 8004a82:	2108      	movs	r1, #8
 8004a84:	0020      	movs	r0, r4
 8004a86:	f7ff f839 	bl	8003afc <HAL_TIM_PWM_Start_IT>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d001      	beq.n	8004a92 <MX_TIM1_Init+0xfa>
		Error_Handler();
 8004a8e:	f7ff fdf3 	bl	8004678 <Error_Handler>
	if(HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8004a92:	210c      	movs	r1, #12
 8004a94:	0020      	movs	r0, r4
 8004a96:	f7ff f831 	bl	8003afc <HAL_TIM_PWM_Start_IT>
 8004a9a:	2800      	cmp	r0, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM1_Init+0x10a>
		Error_Handler();
 8004a9e:	f7ff fdeb 	bl	8004678 <Error_Handler>
	HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	200e      	movs	r0, #14
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	f7fe f852 	bl	8002b50 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004aac:	200e      	movs	r0, #14
 8004aae:	f7fe f87f 	bl	8002bb0 <HAL_NVIC_EnableIRQ>
}
 8004ab2:	b00b      	add	sp, #44	; 0x2c
 8004ab4:	bd30      	pop	{r4, r5, pc}
 8004ab6:	46c0      	nop			; (mov r8, r8)
 8004ab8:	200006b0 	.word	0x200006b0
 8004abc:	40012c00 	.word	0x40012c00
 8004ac0:	00000ea6 	.word	0x00000ea6
 8004ac4:	40021000 	.word	0x40021000

08004ac8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ac8:	480d      	ldr	r0, [pc, #52]	; (8004b00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004aca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004acc:	480d      	ldr	r0, [pc, #52]	; (8004b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8004ace:	490e      	ldr	r1, [pc, #56]	; (8004b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004ad0:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <LoopForever+0xe>)
  movs r3, #0
 8004ad2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ad4:	e002      	b.n	8004adc <LoopCopyDataInit>

08004ad6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ad6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ad8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ada:	3304      	adds	r3, #4

08004adc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004adc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ade:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ae0:	d3f9      	bcc.n	8004ad6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004ae4:	4c0b      	ldr	r4, [pc, #44]	; (8004b14 <LoopForever+0x16>)
  movs r3, #0
 8004ae6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ae8:	e001      	b.n	8004aee <LoopFillZerobss>

08004aea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004aea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004aec:	3204      	adds	r2, #4

08004aee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004aee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004af0:	d3fb      	bcc.n	8004aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004af2:	f7ff fe23 	bl	800473c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004af6:	f000 f811 	bl	8004b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004afa:	f7ff fcdf 	bl	80044bc <main>

08004afe <LoopForever>:

LoopForever:
    b LoopForever
 8004afe:	e7fe      	b.n	8004afe <LoopForever>
  ldr   r0, =_estack
 8004b00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b08:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8004b0c:	08004c98 	.word	0x08004c98
  ldr r2, =_sbss
 8004b10:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8004b14:	20000760 	.word	0x20000760

08004b18 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b18:	e7fe      	b.n	8004b18 <DMA1_Channel2_3_IRQHandler>
	...

08004b1c <__libc_init_array>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	2600      	movs	r6, #0
 8004b20:	4d0c      	ldr	r5, [pc, #48]	; (8004b54 <__libc_init_array+0x38>)
 8004b22:	4c0d      	ldr	r4, [pc, #52]	; (8004b58 <__libc_init_array+0x3c>)
 8004b24:	1b64      	subs	r4, r4, r5
 8004b26:	10a4      	asrs	r4, r4, #2
 8004b28:	42a6      	cmp	r6, r4
 8004b2a:	d109      	bne.n	8004b40 <__libc_init_array+0x24>
 8004b2c:	2600      	movs	r6, #0
 8004b2e:	f000 f82b 	bl	8004b88 <_init>
 8004b32:	4d0a      	ldr	r5, [pc, #40]	; (8004b5c <__libc_init_array+0x40>)
 8004b34:	4c0a      	ldr	r4, [pc, #40]	; (8004b60 <__libc_init_array+0x44>)
 8004b36:	1b64      	subs	r4, r4, r5
 8004b38:	10a4      	asrs	r4, r4, #2
 8004b3a:	42a6      	cmp	r6, r4
 8004b3c:	d105      	bne.n	8004b4a <__libc_init_array+0x2e>
 8004b3e:	bd70      	pop	{r4, r5, r6, pc}
 8004b40:	00b3      	lsls	r3, r6, #2
 8004b42:	58eb      	ldr	r3, [r5, r3]
 8004b44:	4798      	blx	r3
 8004b46:	3601      	adds	r6, #1
 8004b48:	e7ee      	b.n	8004b28 <__libc_init_array+0xc>
 8004b4a:	00b3      	lsls	r3, r6, #2
 8004b4c:	58eb      	ldr	r3, [r5, r3]
 8004b4e:	4798      	blx	r3
 8004b50:	3601      	adds	r6, #1
 8004b52:	e7f2      	b.n	8004b3a <__libc_init_array+0x1e>
 8004b54:	08004c90 	.word	0x08004c90
 8004b58:	08004c90 	.word	0x08004c90
 8004b5c:	08004c90 	.word	0x08004c90
 8004b60:	08004c94 	.word	0x08004c94

08004b64 <memcpy>:
 8004b64:	2300      	movs	r3, #0
 8004b66:	b510      	push	{r4, lr}
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d100      	bne.n	8004b6e <memcpy+0xa>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	5ccc      	ldrb	r4, [r1, r3]
 8004b70:	54c4      	strb	r4, [r0, r3]
 8004b72:	3301      	adds	r3, #1
 8004b74:	e7f8      	b.n	8004b68 <memcpy+0x4>

08004b76 <memset>:
 8004b76:	0003      	movs	r3, r0
 8004b78:	1882      	adds	r2, r0, r2
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d100      	bne.n	8004b80 <memset+0xa>
 8004b7e:	4770      	bx	lr
 8004b80:	7019      	strb	r1, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	e7f9      	b.n	8004b7a <memset+0x4>
	...

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	46c0      	nop			; (mov r8, r8)
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr
